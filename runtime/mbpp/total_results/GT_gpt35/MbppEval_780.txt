{'task_id': 'MbppEval/780', 'iter_num': 39, 'already_test_oracle_gt': {'t-0': [(5, 7), (4, 8), (7, 11)], 't-1': [(5, 7), (4, 8), (7, 11)], 't-2': [(40, 60), (60, 80), (80, 100)], 't-3': [(5, 7)], 't-4': [(5, 7), (4, 8), (8, 10), (7, 11), (11, 13), (10, 14)], 't-5': [(5, 7), (4, 8), (7, 11)], 't-6': [(40, 60)], 't-7': [(3, 5), (6, 8), (7, 9)], 't-8': [(5, 7), (4, 8), (8, 10), (10, 12), (7, 11), (11, 13), (13, 15), (10, 14), (12, 16), (16, 18)], 't-49': [(3, 5)]}, 'pass_num_dict': {'s-49': ['t-0', 't-1', 't-2', 't-3', 't-4', 't-5', 't-6', 't-7', 't-8', 't-9', 't-10', 't-49'], 's-55': ['t-0', 't-1', 't-2', 't-3', 't-4', 't-5', 't-6', 't-7', 't-8', 't-9', 't-10', 't-49']}, 'code_test_output': {'s-0': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-1': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-2': {'t-0': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((4, 5), (3, 6)), 18), (((1, 2), (4, 5), (3, 6)), 21)], 't-1': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((4, 5), (3, 6)), 18), (((1, 2), (4, 5), (3, 6)), 21)], 't-2': [(((10, 20),), 30), (((30, 40),), 70), (((50, 60),), 110), (((10, 20), (30, 40)), 100), (((10, 20), (50, 60)), 140), (((30, 40), (50, 60)), 180), (((10, 20), (30, 40), (50, 60)), 210)], 't-3': [(((1, 2),), 3), (((4, 5),), 9), (((1, 2), (4, 5)), 12)], 't-4': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((7, 8),), 15), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((1, 2), (7, 8)), 18), (((4, 5), (3, 6)), 18), (((4, 5), (7, 8)), 24), (((3, 6), (7, 8)), 24), (((1, 2), (4, 5), (3, 6)), 21), (((1, 2), (4, 5), (7, 8)), 27), (((1, 2), (3, 6), (7, 8)), 27), (((4, 5), (3, 6), (7, 8)), 33), (((1, 2), (4, 5), (3, 6), (7, 8)), 36)], 't-5': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((4, 5), (3, 6)), 18), (((1, 2), (4, 5), (3, 6)), 21)], 't-6': [(((10, 20),), 30), (((30, 40),), 70), (((10, 20), (30, 40)), 100)], 't-7': [(((1, 2),), 3), (((2, 3),), 5), (((5, 6),), 11), (((1, 2), (2, 3)), 8), (((1, 2), (5, 6)), 14), (((2, 3), (5, 6)), 16), (((1, 2), (2, 3), (5, 6)), 19)], 't-8': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((7, 8),), 15), (((9, 10),), 19), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((1, 2), (7, 8)), 18), (((1, 2), (9, 10)), 22), (((4, 5), (3, 6)), 18), (((4, 5), (7, 8)), 24), (((4, 5), (9, 10)), 28), (((3, 6), (7, 8)), 24), (((3, 6), (9, 10)), 28), (((7, 8), (9, 10)), 34), (((1, 2), (4, 5), (3, 6)), 21), (((1, 2), (4, 5), (7, 8)), 27), (((1, 2), (4, 5), (9, 10)), 31), (((1, 2), (3, 6), (7, 8)), 27), (((1, 2), (3, 6), (9, 10)), 31), (((1, 2), (7, 8), (9, 10)), 37), (((4, 5), (3, 6), (7, 8)), 33), (((4, 5), (3, 6), (9, 10)), 37), (((4, 5), (7, 8), (9, 10)), 43), (((3, 6), (7, 8), (9, 10)), 43), (((1, 2), (4, 5), (3, 6), (7, 8)), 36), (((1, 2), (4, 5), (3, 6), (9, 10)), 40), (((1, 2), (4, 5), (7, 8), (9, 10)), 46), (((1, 2), (3, 6), (7, 8), (9, 10)), 46), (((4, 5), (3, 6), (7, 8), (9, 10)), 52), (((1, 2), (4, 5), (3, 6), (7, 8), (9, 10)), 55)], 't-9': [(((1, 2),), 3)], 't-10': [], 't-49': [(((1, 2),), 3), (((2, 3),), 5), (((1, 2), (2, 3)), 8)]}, 's-3': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-4': {'t-0': [(1, (2,)), (4, (5,)), (3, (6,)), (5, (2, 5)), (4, (2, 6)), (7, (5, 6)), (8, (2, 5, 6))], 't-1': [(1, (2,)), (4, (5,)), (3, (6,)), (5, (2, 5)), (4, (2, 6)), (7, (5, 6)), (8, (2, 5, 6))], 't-2': [(10, (20,)), (30, (40,)), (50, (60,)), (40, (20, 40)), (60, (20, 60)), (80, (40, 60)), (90, (20, 40, 60))], 't-3': [(1, (2,)), (4, (5,)), (5, (2, 5))], 't-4': [(1, (2,)), (4, (5,)), (3, (6,)), (7, (8,)), (5, (2, 5)), (4, (2, 6)), (8, (2, 8)), (7, (5, 6)), (11, (5, 8)), (10, (6, 8)), (8, (2, 5, 6)), (12, (2, 5, 8)), (11, (2, 6, 8)), (14, (5, 6, 8)), (15, (2, 5, 6, 8))], 't-5': [(1, (2,)), (4, (5,)), (3, (6,)), (5, (2, 5)), (4, (2, 6)), (7, (5, 6)), (8, (2, 5, 6))], 't-6': [(10, (20,)), (30, (40,)), (40, (20, 40))], 't-7': [(1, (2,)), (2, (3,)), (5, (6,)), (3, (2, 3)), (6, (2, 6)), (7, (3, 6)), (8, (2, 3, 6))], 't-8': [(1, (2,)), (4, (5,)), (3, (6,)), (7, (8,)), (9, (10,)), (5, (2, 5)), (4, (2, 6)), (8, (2, 8)), (10, (2, 10)), (7, (5, 6)), (11, (5, 8)), (13, (5, 10)), (10, (6, 8)), (12, (6, 10)), (16, (8, 10)), (8, (2, 5, 6)), (12, (2, 5, 8)), (14, (2, 5, 10)), (11, (2, 6, 8)), (13, (2, 6, 10)), (17, (2, 8, 10)), (14, (5, 6, 8)), (16, (5, 6, 10)), (20, (5, 8, 10)), (19, (6, 8, 10)), (15, (2, 5, 6, 8)), (17, (2, 5, 6, 10)), (21, (2, 5, 8, 10)), (20, (2, 6, 8, 10)), (23, (5, 6, 8, 10)), (24, (2, 5, 6, 8, 10))], 't-9': [(1, (2,))], 't-10': [], 't-49': [(1, (2,)), (2, (3,)), (3, (2, 3))]}, 's-5': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-6': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-7': {'t-0': [((1,), (2,), (1, 2)), ((4,), (5,), (4, 5)), ((3,), (6,), (3, 6))], 't-1': [((1,), (2,), (1, 2)), ((4,), (5,), (4, 5)), ((3,), (6,), (3, 6))], 't-2': [((10,), (20,), (10, 20)), ((30,), (40,), (30, 40)), ((50,), (60,), (50, 60))], 't-3': [((1,), (2,), (1, 2)), ((4,), (5,), (4, 5))], 't-4': [((1,), (2,), (1, 2)), ((4,), (5,), (4, 5)), ((3,), (6,), (3, 6)), ((7,), (8,), (7, 8))], 't-5': [((1,), (2,), (1, 2)), ((4,), (5,), (4, 5)), ((3,), (6,), (3, 6))], 't-6': [((10,), (20,), (10, 20)), ((30,), (40,), (30, 40))], 't-7': [((1,), (2,), (1, 2)), ((2,), (3,), (2, 3)), ((5,), (6,), (5, 6))], 't-8': [((1,), (2,), (1, 2)), ((4,), (5,), (4, 5)), ((3,), (6,), (3, 6)), ((7,), (8,), (7, 8)), ((9,), (10,), (9, 10))], 't-9': [((1,), (2,), (1, 2))], 't-10': [], 't-49': [((1,), (2,), (1, 2)), ((2,), (3,), (2, 3))]}, 's-8': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': [], 't-10': [], 't-49': None}, 's-9': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-10': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': [], 't-10': [], 't-49': None}, 's-11': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-12': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-13': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': [], 't-10': [], 't-49': None}, 's-14': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': [], 't-10': [], 't-49': None}, 's-15': {'t-0': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-1': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-2': [((10, 20),), ((30, 40),), ((50, 60),), ((10, 20), (30, 40)), ((10, 20), (50, 60)), ((30, 40), (50, 60)), ((10, 20), (30, 40), (50, 60))], 't-3': [((1, 2),), ((4, 5),), ((1, 2), (4, 5))], 't-4': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8)), ((4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (7, 8))], 't-5': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-6': [((10, 20),), ((30, 40),), ((10, 20), (30, 40))], 't-7': [((1, 2),), ((2, 3),), ((5, 6),), ((1, 2), (2, 3)), ((1, 2), (5, 6)), ((2, 3), (5, 6)), ((1, 2), (2, 3), (5, 6))], 't-8': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((9, 10),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((1, 2), (9, 10)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((4, 5), (9, 10)), ((3, 6), (7, 8)), ((3, 6), (9, 10)), ((7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (4, 5), (9, 10)), ((1, 2), (3, 6), (7, 8)), ((1, 2), (3, 6), (9, 10)), ((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8)), ((4, 5), (3, 6), (9, 10)), ((4, 5), (7, 8), (9, 10)), ((3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (9, 10)), ((1, 2), (4, 5), (7, 8), (9, 10)), ((1, 2), (3, 6), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))], 't-9': [((1, 2),)], 't-10': [], 't-49': [((1, 2),), ((2, 3),), ((1, 2), (2, 3))]}, 's-16': {'t-0': [3, 9, 9, 12, 12, 18, 21], 't-1': [3, 9, 9, 12, 12, 18, 21], 't-2': [30, 70, 110, 100, 140, 180, 210], 't-3': [3, 9, 12], 't-4': [3, 9, 9, 15, 12, 12, 18, 18, 24, 24, 21, 27, 27, 33, 36], 't-5': [3, 9, 9, 12, 12, 18, 21], 't-6': [30, 70, 100], 't-7': [3, 5, 11, 8, 14, 16, 19], 't-8': [3, 9, 9, 15, 19, 12, 12, 18, 22, 18, 24, 28, 24, 28, 34, 21, 27, 31, 27, 31, 37, 33, 37, 43, 43, 36, 40, 46, 46, 52, 55], 't-9': [3], 't-10': [], 't-49': [3, 5, 8]}, 's-17': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-18': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-19': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': [], 't-10': [], 't-49': None}, 's-20': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-21': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-22': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-23': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-24': {'t-0': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-1': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-2': [((10, 20),), ((30, 40),), ((50, 60),), ((10, 20), (30, 40)), ((10, 20), (50, 60)), ((30, 40), (50, 60)), ((10, 20), (30, 40), (50, 60))], 't-3': [((1, 2),), ((4, 5),), ((1, 2), (4, 5))], 't-4': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8)), ((4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (7, 8))], 't-5': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-6': [((10, 20),), ((30, 40),), ((10, 20), (30, 40))], 't-7': [((1, 2),), ((2, 3),), ((5, 6),), ((1, 2), (2, 3)), ((1, 2), (5, 6)), ((2, 3), (5, 6)), ((1, 2), (2, 3), (5, 6))], 't-8': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((9, 10),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((1, 2), (9, 10)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((4, 5), (9, 10)), ((3, 6), (7, 8)), ((3, 6), (9, 10)), ((7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (4, 5), (9, 10)), ((1, 2), (3, 6), (7, 8)), ((1, 2), (3, 6), (9, 10)), ((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8)), ((4, 5), (3, 6), (9, 10)), ((4, 5), (7, 8), (9, 10)), ((3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (9, 10)), ((1, 2), (4, 5), (7, 8), (9, 10)), ((1, 2), (3, 6), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))], 't-9': [((1, 2),)], 't-10': [], 't-49': [((1, 2),), ((2, 3),), ((1, 2), (2, 3))]}, 's-25': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-26': {'t-0': [3, 9, 9, 12, 12, 18, 21], 't-1': [3, 9, 9, 12, 12, 18, 21], 't-2': [30, 70, 110, 100, 140, 180, 210], 't-3': [3, 9, 12], 't-4': [3, 9, 9, 15, 12, 12, 18, 18, 24, 24, 21, 27, 27, 33, 36], 't-5': [3, 9, 9, 12, 12, 18, 21], 't-6': [30, 70, 100], 't-7': [3, 5, 11, 8, 14, 16, 19], 't-8': [3, 9, 9, 15, 19, 12, 12, 18, 22, 18, 24, 28, 24, 28, 34, 21, 27, 31, 27, 31, 37, 33, 37, 43, 43, 36, 40, 46, 46, 52, 55], 't-9': [3], 't-10': [], 't-49': [3, 5, 8]}, 's-27': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': [], 't-10': [], 't-49': None}, 's-28': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-29': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-30': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-31': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-32': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-33': {'t-0': [(1, 2, 4, 5), (1, 2, 3, 6), (3, 4, 5, 6), (1, 2, 3, 4, 5, 6)], 't-1': [(1, 2, 4, 5), (1, 2, 3, 6), (3, 4, 5, 6), (1, 2, 3, 4, 5, 6)], 't-2': [(10, 20, 30, 40), (10, 20, 50, 60), (30, 40, 50, 60), (10, 20, 30, 40, 50, 60)], 't-3': [(1, 2, 4, 5)], 't-4': [(1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (3, 4, 5, 6), (4, 5, 7, 8), (3, 6, 7, 8), (1, 2, 3, 4, 5, 6), (1, 2, 4, 5, 7, 8), (1, 2, 3, 6, 7, 8), (3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8)], 't-5': [(1, 2, 4, 5), (1, 2, 3, 6), (3, 4, 5, 6), (1, 2, 3, 4, 5, 6)], 't-6': [(10, 20, 30, 40)], 't-7': [(1, 2, 2, 3), (1, 2, 5, 6), (2, 3, 5, 6), (1, 2, 2, 3, 5, 6)], 't-8': [(1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (1, 2, 9, 10), (3, 4, 5, 6), (4, 5, 7, 8), (4, 5, 9, 10), (3, 6, 7, 8), (3, 6, 9, 10), (7, 8, 9, 10), (1, 2, 3, 4, 5, 6), (1, 2, 4, 5, 7, 8), (1, 2, 4, 5, 9, 10), (1, 2, 3, 6, 7, 8), (1, 2, 3, 6, 9, 10), (1, 2, 7, 8, 9, 10), (3, 4, 5, 6, 7, 8), (3, 4, 5, 6, 9, 10), (4, 5, 7, 8, 9, 10), (3, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 9, 10), (1, 2, 4, 5, 7, 8, 9, 10), (1, 2, 3, 6, 7, 8, 9, 10), (3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], 't-9': [], 't-10': [], 't-49': [(1, 2, 2, 3)]}, 's-34': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-35': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-36': {'t-0': {1: [(1,)], 2: [(2,)], 3: [(1, 2), (3,)], 4: [(4,)], 5: [(5,)], 9: [(4, 5), (3, 6)], 6: [(6,)]}, 't-1': {1: [(1,)], 2: [(2,)], 3: [(1, 2), (3,)], 4: [(4,)], 5: [(5,)], 9: [(4, 5), (3, 6)], 6: [(6,)]}, 't-2': {10: [(10,)], 20: [(20,)], 30: [(10, 20), (30,)], 40: [(40,)], 70: [(30, 40)], 50: [(50,)], 60: [(60,)], 110: [(50, 60)]}, 't-3': {1: [(1,)], 2: [(2,)], 3: [(1, 2)], 4: [(4,)], 5: [(5,)], 9: [(4, 5)]}, 't-4': {1: [(1,)], 2: [(2,)], 3: [(1, 2), (3,)], 4: [(4,)], 5: [(5,)], 9: [(4, 5), (3, 6)], 6: [(6,)], 7: [(7,)], 8: [(8,)], 15: [(7, 8)]}, 't-5': {1: [(1,)], 2: [(2,)], 3: [(1, 2), (3,)], 4: [(4,)], 5: [(5,)], 9: [(4, 5), (3, 6)], 6: [(6,)]}, 't-6': {10: [(10,)], 20: [(20,)], 30: [(10, 20), (30,)], 40: [(40,)], 70: [(30, 40)]}, 't-7': {1: [(1,)], 2: [(2,), (2,)], 3: [(1, 2), (3,)], 5: [(2, 3), (5,)], 6: [(6,)], 11: [(5, 6)]}, 't-8': {1: [(1,)], 2: [(2,)], 3: [(1, 2), (3,)], 4: [(4,)], 5: [(5,)], 9: [(4, 5), (3, 6), (9,)], 6: [(6,)], 7: [(7,)], 8: [(8,)], 15: [(7, 8)], 10: [(10,)], 19: [(9, 10)]}, 't-9': {1: [(1,)], 2: [(2,)], 3: [(1, 2)]}, 't-10': {}, 't-49': {1: [(1,)], 2: [(2,), (2,)], 3: [(1, 2), (3,)], 5: [(2, 3)]}}, 's-37': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-38': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-39': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-40': {'t-0': [3, 9], 't-1': [3, 9], 't-2': [30, 70, 110], 't-3': [3, 9], 't-4': [3, 9, 15], 't-5': [3, 9], 't-6': [30, 70], 't-7': [3, 5, 11], 't-8': [3, 9, 15, 19], 't-9': [3], 't-10': [], 't-49': [3, 5]}, 's-41': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-42': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-43': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-44': {'t-0': [(), ((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-1': [(), ((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-2': [(), ((10, 20),), ((30, 40),), ((50, 60),), ((10, 20), (30, 40)), ((10, 20), (50, 60)), ((30, 40), (50, 60)), ((10, 20), (30, 40), (50, 60))], 't-3': [(), ((1, 2),), ((4, 5),), ((1, 2), (4, 5))], 't-4': [(), ((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8)), ((4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (7, 8))], 't-5': [(), ((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-6': [(), ((10, 20),), ((30, 40),), ((10, 20), (30, 40))], 't-7': [(), ((1, 2),), ((2, 3),), ((5, 6),), ((1, 2), (2, 3)), ((1, 2), (5, 6)), ((2, 3), (5, 6)), ((1, 2), (2, 3), (5, 6))], 't-8': [(), ((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((9, 10),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((1, 2), (9, 10)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((4, 5), (9, 10)), ((3, 6), (7, 8)), ((3, 6), (9, 10)), ((7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (4, 5), (9, 10)), ((1, 2), (3, 6), (7, 8)), ((1, 2), (3, 6), (9, 10)), ((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8)), ((4, 5), (3, 6), (9, 10)), ((4, 5), (7, 8), (9, 10)), ((3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (9, 10)), ((1, 2), (4, 5), (7, 8), (9, 10)), ((1, 2), (3, 6), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))], 't-9': [(), ((1, 2),)], 't-10': [()], 't-49': [(), ((1, 2),), ((2, 3),), ((1, 2), (2, 3))]}, 's-45': {'t-0': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-1': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-2': [((10, 20),), ((30, 40),), ((50, 60),), ((10, 20), (30, 40)), ((10, 20), (50, 60)), ((30, 40), (50, 60)), ((10, 20), (30, 40), (50, 60))], 't-3': [((1, 2),), ((4, 5),), ((1, 2), (4, 5))], 't-4': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8)), ((4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (7, 8))], 't-5': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-6': [((10, 20),), ((30, 40),), ((10, 20), (30, 40))], 't-7': [((1, 2),), ((2, 3),), ((5, 6),), ((1, 2), (2, 3)), ((1, 2), (5, 6)), ((2, 3), (5, 6)), ((1, 2), (2, 3), (5, 6))], 't-8': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((9, 10),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((1, 2), (9, 10)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((4, 5), (9, 10)), ((3, 6), (7, 8)), ((3, 6), (9, 10)), ((7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (4, 5), (9, 10)), ((1, 2), (3, 6), (7, 8)), ((1, 2), (3, 6), (9, 10)), ((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8)), ((4, 5), (3, 6), (9, 10)), ((4, 5), (7, 8), (9, 10)), ((3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (9, 10)), ((1, 2), (4, 5), (7, 8), (9, 10)), ((1, 2), (3, 6), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))], 't-9': [((1, 2),)], 't-10': [], 't-49': [((1, 2),), ((2, 3),), ((1, 2), (2, 3))]}, 's-46': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-47': {'t-0': [(), (1, 2), (4, 5), (3, 6), (1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-1': [(), (1, 2), (4, 5), (3, 6), (1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-2': [(), (10, 20), (30, 40), (50, 60), (10, 20, 30, 40), (10, 20, 50, 60), (30, 40, 50, 60), (10, 20, 30, 40, 50, 60)], 't-3': [(), (1, 2), (4, 5), (1, 2, 4, 5)], 't-4': [(), (1, 2), (4, 5), (3, 6), (7, 8), (1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (4, 5, 3, 6), (4, 5, 7, 8), (3, 6, 7, 8), (1, 2, 4, 5, 3, 6), (1, 2, 4, 5, 7, 8), (1, 2, 3, 6, 7, 8), (4, 5, 3, 6, 7, 8), (1, 2, 4, 5, 3, 6, 7, 8)], 't-5': [(), (1, 2), (4, 5), (3, 6), (1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-6': [(), (10, 20), (30, 40), (10, 20, 30, 40)], 't-7': [(), (1, 2), (2, 3), (5, 6), (1, 2, 2, 3), (1, 2, 5, 6), (2, 3, 5, 6), (1, 2, 2, 3, 5, 6)], 't-8': [(), (1, 2), (4, 5), (3, 6), (7, 8), (9, 10), (1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (1, 2, 9, 10), (4, 5, 3, 6), (4, 5, 7, 8), (4, 5, 9, 10), (3, 6, 7, 8), (3, 6, 9, 10), (7, 8, 9, 10), (1, 2, 4, 5, 3, 6), (1, 2, 4, 5, 7, 8), (1, 2, 4, 5, 9, 10), (1, 2, 3, 6, 7, 8), (1, 2, 3, 6, 9, 10), (1, 2, 7, 8, 9, 10), (4, 5, 3, 6, 7, 8), (4, 5, 3, 6, 9, 10), (4, 5, 7, 8, 9, 10), (3, 6, 7, 8, 9, 10), (1, 2, 4, 5, 3, 6, 7, 8), (1, 2, 4, 5, 3, 6, 9, 10), (1, 2, 4, 5, 7, 8, 9, 10), (1, 2, 3, 6, 7, 8, 9, 10), (4, 5, 3, 6, 7, 8, 9, 10), (1, 2, 4, 5, 3, 6, 7, 8, 9, 10)], 't-9': [(), (1, 2)], 't-10': [()], 't-49': [(), (1, 2), (2, 3), (1, 2, 2, 3)]}, 's-48': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [()], 't-49': None}, 's-49': {'t-0': [(5, 7), (4, 8), (7, 11)], 't-1': [(5, 7), (4, 8), (7, 11)], 't-2': [(40, 60), (60, 80), (80, 100)], 't-3': [(5, 7)], 't-4': [(5, 7), (4, 8), (8, 10), (7, 11), (11, 13), (10, 14)], 't-5': [(5, 7), (4, 8), (7, 11)], 't-6': [(40, 60)], 't-7': [(3, 5), (6, 8), (7, 9)], 't-8': [(5, 7), (4, 8), (8, 10), (10, 12), (7, 11), (11, 13), (13, 15), (10, 14), (12, 16), (16, 18)], 't-9': [], 't-10': [], 't-49': [(3, 5)]}, 's-50': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-51': {'t-0': [((1, 2),), ((4, 5),), ((1, 2), (4, 5)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-1': [((1, 2),), ((4, 5),), ((1, 2), (4, 5)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-2': [((10, 20),), ((30, 40),), ((50, 60),), ((10, 20), (30, 40)), ((10, 20), (50, 60)), ((30, 40), (50, 60)), ((10, 20), (30, 40), (50, 60))], 't-3': [((1, 2),), ((4, 5),), ((1, 2), (4, 5))], 't-4': [((1, 2),), ((4, 5),), ((7, 8),), ((1, 2), (4, 5)), ((1, 2), (7, 8)), ((4, 5), (7, 8)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (7, 8))], 't-5': [((1, 2),), ((4, 5),), ((1, 2), (4, 5)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-6': [((10, 20),), ((30, 40),), ((10, 20), (30, 40))], 't-7': [((1, 2),), ((2, 3),), ((5, 6),), ((1, 2), (2, 3)), ((1, 2), (5, 6)), ((2, 3), (5, 6)), ((1, 2), (2, 3), (5, 6))], 't-8': [((1, 2),), ((4, 5),), ((7, 8),), ((9, 10),), ((1, 2), (4, 5)), ((1, 2), (7, 8)), ((1, 2), (9, 10)), ((4, 5), (7, 8)), ((4, 5), (9, 10)), ((7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (4, 5), (9, 10)), ((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8)), ((4, 5), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (9, 10)), ((1, 2), (4, 5), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))], 't-9': [((1, 2),)], 't-10': [], 't-49': [((1, 2),), ((2, 3),), ((1, 2), (2, 3))]}, 's-52': {'t-0': [(1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-1': [(1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-2': [(10, 20, 30, 40), (10, 20, 50, 60), (30, 40, 50, 60), (10, 20, 30, 40, 50, 60)], 't-3': [(1, 2, 4, 5)], 't-4': [(1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (4, 5, 3, 6), (4, 5, 7, 8), (3, 6, 7, 8), (1, 2, 4, 5, 3, 6), (1, 2, 4, 5, 7, 8), (1, 2, 3, 6, 7, 8), (4, 5, 3, 6, 7, 8), (1, 2, 4, 5, 3, 6, 7, 8)], 't-5': [(1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-6': [(10, 20, 30, 40)], 't-7': [(1, 2, 2, 3), (1, 2, 5, 6), (2, 3, 5, 6), (1, 2, 2, 3, 5, 6)], 't-8': [(1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (1, 2, 9, 10), (4, 5, 3, 6), (4, 5, 7, 8), (4, 5, 9, 10), (3, 6, 7, 8), (3, 6, 9, 10), (7, 8, 9, 10), (1, 2, 4, 5, 3, 6), (1, 2, 4, 5, 7, 8), (1, 2, 4, 5, 9, 10), (1, 2, 3, 6, 7, 8), (1, 2, 3, 6, 9, 10), (1, 2, 7, 8, 9, 10), (4, 5, 3, 6, 7, 8), (4, 5, 3, 6, 9, 10), (4, 5, 7, 8, 9, 10), (3, 6, 7, 8, 9, 10), (1, 2, 4, 5, 3, 6, 7, 8), (1, 2, 4, 5, 3, 6, 9, 10), (1, 2, 4, 5, 7, 8, 9, 10), (1, 2, 3, 6, 7, 8, 9, 10), (4, 5, 3, 6, 7, 8, 9, 10), (1, 2, 4, 5, 3, 6, 7, 8, 9, 10)], 't-9': [], 't-10': [], 't-49': [(1, 2, 2, 3)]}, 's-53': {'t-0': {3: [((1, 2),)], 9: [((4, 5),), ((3, 6),)], 12: [((1, 2), (4, 5)), ((1, 2), (3, 6))], 18: [((4, 5), (3, 6))], 21: [((1, 2), (4, 5), (3, 6))]}, 't-1': {3: [((1, 2),)], 9: [((4, 5),), ((3, 6),)], 12: [((1, 2), (4, 5)), ((1, 2), (3, 6))], 18: [((4, 5), (3, 6))], 21: [((1, 2), (4, 5), (3, 6))]}, 't-2': {30: [((10, 20),)], 70: [((30, 40),)], 110: [((50, 60),)], 100: [((10, 20), (30, 40))], 140: [((10, 20), (50, 60))], 180: [((30, 40), (50, 60))], 210: [((10, 20), (30, 40), (50, 60))]}, 't-3': {3: [((1, 2),)], 9: [((4, 5),)], 12: [((1, 2), (4, 5))]}, 't-4': {3: [((1, 2),)], 9: [((4, 5),), ((3, 6),)], 15: [((7, 8),)], 12: [((1, 2), (4, 5)), ((1, 2), (3, 6))], 18: [((1, 2), (7, 8)), ((4, 5), (3, 6))], 24: [((4, 5), (7, 8)), ((3, 6), (7, 8))], 21: [((1, 2), (4, 5), (3, 6))], 27: [((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8))], 33: [((4, 5), (3, 6), (7, 8))], 36: [((1, 2), (4, 5), (3, 6), (7, 8))]}, 't-5': {3: [((1, 2),)], 9: [((4, 5),), ((3, 6),)], 12: [((1, 2), (4, 5)), ((1, 2), (3, 6))], 18: [((4, 5), (3, 6))], 21: [((1, 2), (4, 5), (3, 6))]}, 't-6': {30: [((10, 20),)], 70: [((30, 40),)], 100: [((10, 20), (30, 40))]}, 't-7': {3: [((1, 2),)], 5: [((2, 3),)], 11: [((5, 6),)], 8: [((1, 2), (2, 3))], 14: [((1, 2), (5, 6))], 16: [((2, 3), (5, 6))], 19: [((1, 2), (2, 3), (5, 6))]}, 't-8': {3: [((1, 2),)], 9: [((4, 5),), ((3, 6),)], 15: [((7, 8),)], 19: [((9, 10),)], 12: [((1, 2), (4, 5)), ((1, 2), (3, 6))], 18: [((1, 2), (7, 8)), ((4, 5), (3, 6))], 22: [((1, 2), (9, 10))], 24: [((4, 5), (7, 8)), ((3, 6), (7, 8))], 28: [((4, 5), (9, 10)), ((3, 6), (9, 10))], 34: [((7, 8), (9, 10))], 21: [((1, 2), (4, 5), (3, 6))], 27: [((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8))], 31: [((1, 2), (4, 5), (9, 10)), ((1, 2), (3, 6), (9, 10))], 37: [((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (9, 10))], 33: [((4, 5), (3, 6), (7, 8))], 43: [((4, 5), (7, 8), (9, 10)), ((3, 6), (7, 8), (9, 10))], 36: [((1, 2), (4, 5), (3, 6), (7, 8))], 40: [((1, 2), (4, 5), (3, 6), (9, 10))], 46: [((1, 2), (4, 5), (7, 8), (9, 10)), ((1, 2), (3, 6), (7, 8), (9, 10))], 52: [((4, 5), (3, 6), (7, 8), (9, 10))], 55: [((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))]}, 't-9': {3: [((1, 2),)]}, 't-10': {}, 't-49': {3: [((1, 2),)], 5: [((2, 3),)], 8: [((1, 2), (2, 3))]}}, 's-54': {'t-0': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-1': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-2': [10, 20, 30, 30, 40, 70, 50, 60, 110], 't-3': [1, 2, 3, 4, 5, 9], 't-4': [1, 2, 3, 4, 5, 9, 3, 6, 9, 7, 8, 15], 't-5': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-6': [10, 20, 30, 30, 40, 70], 't-7': [1, 2, 3, 2, 3, 5, 5, 6, 11], 't-8': [1, 2, 3, 4, 5, 9, 3, 6, 9, 7, 8, 15, 9, 10, 19], 't-9': [1, 2, 3], 't-10': [], 't-49': [1, 2, 3, 2, 3, 5]}, 's-55': {'t-0': [(5, 7), (4, 8), (7, 11)], 't-1': [(5, 7), (4, 8), (7, 11)], 't-2': [(40, 60), (60, 80), (80, 100)], 't-3': [(5, 7)], 't-4': [(5, 7), (4, 8), (8, 10), (7, 11), (11, 13), (10, 14)], 't-5': [(5, 7), (4, 8), (7, 11)], 't-6': [(40, 60)], 't-7': [(3, 5), (6, 8), (7, 9)], 't-8': [(5, 7), (4, 8), (8, 10), (10, 12), (7, 11), (11, 13), (13, 15), (10, 14), (12, 16), (16, 18)], 't-9': [], 't-10': [], 't-49': [(3, 5)]}, 's-56': {'t-0': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-1': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-2': [10, 20, 30, 30, 40, 70, 50, 60, 110], 't-3': [1, 2, 3, 4, 5, 9], 't-4': [1, 2, 3, 4, 5, 9, 3, 6, 9, 7, 8, 15], 't-5': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-6': [10, 20, 30, 30, 40, 70], 't-7': [1, 2, 3, 2, 3, 5, 5, 6, 11], 't-8': [1, 2, 3, 4, 5, 9, 3, 6, 9, 7, 8, 15, 9, 10, 19], 't-9': [1, 2, 3], 't-10': [], 't-49': [1, 2, 3, 2, 3, 5]}, 's-57': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-58': {'t-0': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-1': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-2': [((10, 20),), ((30, 40),), ((50, 60),), ((10, 20), (30, 40)), ((10, 20), (50, 60)), ((30, 40), (50, 60)), ((10, 20), (30, 40), (50, 60))], 't-3': [((1, 2),), ((4, 5),), ((1, 2), (4, 5))], 't-4': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8)), ((4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (7, 8))], 't-5': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-6': [((10, 20),), ((30, 40),), ((10, 20), (30, 40))], 't-7': [((1, 2),), ((2, 3),), ((5, 6),), ((1, 2), (2, 3)), ((1, 2), (5, 6)), ((2, 3), (5, 6)), ((1, 2), (2, 3), (5, 6))], 't-8': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((9, 10),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((1, 2), (9, 10)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((4, 5), (9, 10)), ((3, 6), (7, 8)), ((3, 6), (9, 10)), ((7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (4, 5), (9, 10)), ((1, 2), (3, 6), (7, 8)), ((1, 2), (3, 6), (9, 10)), ((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8)), ((4, 5), (3, 6), (9, 10)), ((4, 5), (7, 8), (9, 10)), ((3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (9, 10)), ((1, 2), (4, 5), (7, 8), (9, 10)), ((1, 2), (3, 6), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))], 't-9': [((1, 2),)], 't-10': [], 't-49': [((1, 2),), ((2, 3),), ((1, 2), (2, 3))]}, 's-59': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-60': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-61': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': set(), 't-49': None}, 's-62': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-63': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-64': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-65': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-66': {'t-0': [(((1, 2),), [3]), (((4, 5),), [9]), (((3, 6),), [9]), (((1, 2), (4, 5)), [3, 9]), (((1, 2), (3, 6)), [3, 9]), (((4, 5), (3, 6)), [9, 9]), (((1, 2), (4, 5), (3, 6)), [3, 9, 9])], 't-1': [(((1, 2),), [3]), (((4, 5),), [9]), (((3, 6),), [9]), (((1, 2), (4, 5)), [3, 9]), (((1, 2), (3, 6)), [3, 9]), (((4, 5), (3, 6)), [9, 9]), (((1, 2), (4, 5), (3, 6)), [3, 9, 9])], 't-2': [(((10, 20),), [30]), (((30, 40),), [70]), (((50, 60),), [110]), (((10, 20), (30, 40)), [30, 70]), (((10, 20), (50, 60)), [30, 110]), (((30, 40), (50, 60)), [70, 110]), (((10, 20), (30, 40), (50, 60)), [30, 70, 110])], 't-3': [(((1, 2),), [3]), (((4, 5),), [9]), (((1, 2), (4, 5)), [3, 9])], 't-4': [(((1, 2),), [3]), (((4, 5),), [9]), (((3, 6),), [9]), (((7, 8),), [15]), (((1, 2), (4, 5)), [3, 9]), (((1, 2), (3, 6)), [3, 9]), (((1, 2), (7, 8)), [3, 15]), (((4, 5), (3, 6)), [9, 9]), (((4, 5), (7, 8)), [9, 15]), (((3, 6), (7, 8)), [9, 15]), (((1, 2), (4, 5), (3, 6)), [3, 9, 9]), (((1, 2), (4, 5), (7, 8)), [3, 9, 15]), (((1, 2), (3, 6), (7, 8)), [3, 9, 15]), (((4, 5), (3, 6), (7, 8)), [9, 9, 15]), (((1, 2), (4, 5), (3, 6), (7, 8)), [3, 9, 9, 15])], 't-5': [(((1, 2),), [3]), (((4, 5),), [9]), (((3, 6),), [9]), (((1, 2), (4, 5)), [3, 9]), (((1, 2), (3, 6)), [3, 9]), (((4, 5), (3, 6)), [9, 9]), (((1, 2), (4, 5), (3, 6)), [3, 9, 9])], 't-6': [(((10, 20),), [30]), (((30, 40),), [70]), (((10, 20), (30, 40)), [30, 70])], 't-7': [(((1, 2),), [3]), (((2, 3),), [5]), (((5, 6),), [11]), (((1, 2), (2, 3)), [3, 5]), (((1, 2), (5, 6)), [3, 11]), (((2, 3), (5, 6)), [5, 11]), (((1, 2), (2, 3), (5, 6)), [3, 5, 11])], 't-8': [(((1, 2),), [3]), (((4, 5),), [9]), (((3, 6),), [9]), (((7, 8),), [15]), (((9, 10),), [19]), (((1, 2), (4, 5)), [3, 9]), (((1, 2), (3, 6)), [3, 9]), (((1, 2), (7, 8)), [3, 15]), (((1, 2), (9, 10)), [3, 19]), (((4, 5), (3, 6)), [9, 9]), (((4, 5), (7, 8)), [9, 15]), (((4, 5), (9, 10)), [9, 19]), (((3, 6), (7, 8)), [9, 15]), (((3, 6), (9, 10)), [9, 19]), (((7, 8), (9, 10)), [15, 19]), (((1, 2), (4, 5), (3, 6)), [3, 9, 9]), (((1, 2), (4, 5), (7, 8)), [3, 9, 15]), (((1, 2), (4, 5), (9, 10)), [3, 9, 19]), (((1, 2), (3, 6), (7, 8)), [3, 9, 15]), (((1, 2), (3, 6), (9, 10)), [3, 9, 19]), (((1, 2), (7, 8), (9, 10)), [3, 15, 19]), (((4, 5), (3, 6), (7, 8)), [9, 9, 15]), (((4, 5), (3, 6), (9, 10)), [9, 9, 19]), (((4, 5), (7, 8), (9, 10)), [9, 15, 19]), (((3, 6), (7, 8), (9, 10)), [9, 15, 19]), (((1, 2), (4, 5), (3, 6), (7, 8)), [3, 9, 9, 15]), (((1, 2), (4, 5), (3, 6), (9, 10)), [3, 9, 9, 19]), (((1, 2), (4, 5), (7, 8), (9, 10)), [3, 9, 15, 19]), (((1, 2), (3, 6), (7, 8), (9, 10)), [3, 9, 15, 19]), (((4, 5), (3, 6), (7, 8), (9, 10)), [9, 9, 15, 19]), (((1, 2), (4, 5), (3, 6), (7, 8), (9, 10)), [3, 9, 9, 15, 19])], 't-9': [(((1, 2),), [3])], 't-10': [], 't-49': [(((1, 2),), [3]), (((2, 3),), [5]), (((1, 2), (2, 3)), [3, 5])]}, 's-67': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-68': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-69': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-70': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [()], 't-49': None}, 's-71': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-72': {'t-0': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((4, 5), (3, 6)), 18), (((1, 2), (4, 5), (3, 6)), 21)], 't-1': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((4, 5), (3, 6)), 18), (((1, 2), (4, 5), (3, 6)), 21)], 't-2': [(((10, 20),), 30), (((30, 40),), 70), (((50, 60),), 110), (((10, 20), (30, 40)), 100), (((10, 20), (50, 60)), 140), (((30, 40), (50, 60)), 180), (((10, 20), (30, 40), (50, 60)), 210)], 't-3': [(((1, 2),), 3), (((4, 5),), 9), (((1, 2), (4, 5)), 12)], 't-4': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((7, 8),), 15), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((1, 2), (7, 8)), 18), (((4, 5), (3, 6)), 18), (((4, 5), (7, 8)), 24), (((3, 6), (7, 8)), 24), (((1, 2), (4, 5), (3, 6)), 21), (((1, 2), (4, 5), (7, 8)), 27), (((1, 2), (3, 6), (7, 8)), 27), (((4, 5), (3, 6), (7, 8)), 33), (((1, 2), (4, 5), (3, 6), (7, 8)), 36)], 't-5': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((4, 5), (3, 6)), 18), (((1, 2), (4, 5), (3, 6)), 21)], 't-6': [(((10, 20),), 30), (((30, 40),), 70), (((10, 20), (30, 40)), 100)], 't-7': [(((1, 2),), 3), (((2, 3),), 5), (((5, 6),), 11), (((1, 2), (2, 3)), 8), (((1, 2), (5, 6)), 14), (((2, 3), (5, 6)), 16), (((1, 2), (2, 3), (5, 6)), 19)], 't-8': [(((1, 2),), 3), (((4, 5),), 9), (((3, 6),), 9), (((7, 8),), 15), (((9, 10),), 19), (((1, 2), (4, 5)), 12), (((1, 2), (3, 6)), 12), (((1, 2), (7, 8)), 18), (((1, 2), (9, 10)), 22), (((4, 5), (3, 6)), 18), (((4, 5), (7, 8)), 24), (((4, 5), (9, 10)), 28), (((3, 6), (7, 8)), 24), (((3, 6), (9, 10)), 28), (((7, 8), (9, 10)), 34), (((1, 2), (4, 5), (3, 6)), 21), (((1, 2), (4, 5), (7, 8)), 27), (((1, 2), (4, 5), (9, 10)), 31), (((1, 2), (3, 6), (7, 8)), 27), (((1, 2), (3, 6), (9, 10)), 31), (((1, 2), (7, 8), (9, 10)), 37), (((4, 5), (3, 6), (7, 8)), 33), (((4, 5), (3, 6), (9, 10)), 37), (((4, 5), (7, 8), (9, 10)), 43), (((3, 6), (7, 8), (9, 10)), 43), (((1, 2), (4, 5), (3, 6), (7, 8)), 36), (((1, 2), (4, 5), (3, 6), (9, 10)), 40), (((1, 2), (4, 5), (7, 8), (9, 10)), 46), (((1, 2), (3, 6), (7, 8), (9, 10)), 46), (((4, 5), (3, 6), (7, 8), (9, 10)), 52), (((1, 2), (4, 5), (3, 6), (7, 8), (9, 10)), 55)], 't-9': [(((1, 2),), 3)], 't-10': [], 't-49': [(((1, 2),), 3), (((2, 3),), 5), (((1, 2), (2, 3)), 8)]}, 's-73': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-74': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-75': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-76': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-77': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-78': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': [], 't-10': [], 't-49': None}, 's-79': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-80': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-81': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [0], 't-49': None}, 's-82': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': set(), 't-49': None}, 's-83': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-84': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-85': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': {}, 't-49': None}, 's-86': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-87': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-88': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': set(), 't-49': None}, 's-89': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-90': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-91': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-92': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [()], 't-49': None}, 's-93': {'t-0': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-1': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-2': [10, 20, 30, 30, 40, 70, 50, 60, 110], 't-3': [1, 2, 3, 4, 5, 9], 't-4': [1, 2, 3, 4, 5, 9, 3, 6, 9, 7, 8, 15], 't-5': [1, 2, 3, 4, 5, 9, 3, 6, 9], 't-6': [10, 20, 30, 30, 40, 70], 't-7': [1, 2, 3, 2, 3, 5, 5, 6, 11], 't-8': [1, 2, 3, 4, 5, 9, 3, 6, 9, 7, 8, 15, 9, 10, 19], 't-9': [1, 2, 3], 't-10': [], 't-49': [1, 2, 3, 2, 3, 5]}, 's-94': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-95': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': [], 't-49': None}, 's-96': {'t-0': [(1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-1': [(1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-2': [(10, 20, 30, 40), (10, 20, 50, 60), (30, 40, 50, 60), (10, 20, 30, 40, 50, 60)], 't-3': [(1, 2, 4, 5)], 't-4': [(1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (4, 5, 3, 6), (4, 5, 7, 8), (3, 6, 7, 8), (1, 2, 4, 5, 3, 6), (1, 2, 4, 5, 7, 8), (1, 2, 3, 6, 7, 8), (4, 5, 3, 6, 7, 8), (1, 2, 4, 5, 3, 6, 7, 8)], 't-5': [(1, 2, 4, 5), (1, 2, 3, 6), (4, 5, 3, 6), (1, 2, 4, 5, 3, 6)], 't-6': [(10, 20, 30, 40)], 't-7': [(1, 2, 2, 3), (1, 2, 5, 6), (2, 3, 5, 6), (1, 2, 2, 3, 5, 6)], 't-8': [(1, 2, 4, 5), (1, 2, 3, 6), (1, 2, 7, 8), (1, 2, 9, 10), (4, 5, 3, 6), (4, 5, 7, 8), (4, 5, 9, 10), (3, 6, 7, 8), (3, 6, 9, 10), (7, 8, 9, 10), (1, 2, 4, 5, 3, 6), (1, 2, 4, 5, 7, 8), (1, 2, 4, 5, 9, 10), (1, 2, 3, 6, 7, 8), (1, 2, 3, 6, 9, 10), (1, 2, 7, 8, 9, 10), (4, 5, 3, 6, 7, 8), (4, 5, 3, 6, 9, 10), (4, 5, 7, 8, 9, 10), (3, 6, 7, 8, 9, 10), (1, 2, 4, 5, 3, 6, 7, 8), (1, 2, 4, 5, 3, 6, 9, 10), (1, 2, 4, 5, 7, 8, 9, 10), (1, 2, 3, 6, 7, 8, 9, 10), (4, 5, 3, 6, 7, 8, 9, 10), (1, 2, 4, 5, 3, 6, 7, 8, 9, 10)], 't-9': [], 't-10': [], 't-49': [(1, 2, 2, 3)]}, 's-97': {'t-0': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-1': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-2': [((10, 20),), ((30, 40),), ((50, 60),), ((10, 20), (30, 40)), ((10, 20), (50, 60)), ((30, 40), (50, 60)), ((10, 20), (30, 40), (50, 60))], 't-3': [((1, 2),), ((4, 5),), ((1, 2), (4, 5))], 't-4': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (3, 6), (7, 8)), ((4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (7, 8))], 't-5': [((1, 2),), ((4, 5),), ((3, 6),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((4, 5), (3, 6)), ((1, 2), (4, 5), (3, 6))], 't-6': [((10, 20),), ((30, 40),), ((10, 20), (30, 40))], 't-7': [((1, 2),), ((2, 3),), ((5, 6),), ((1, 2), (2, 3)), ((1, 2), (5, 6)), ((2, 3), (5, 6)), ((1, 2), (2, 3), (5, 6))], 't-8': [((1, 2),), ((4, 5),), ((3, 6),), ((7, 8),), ((9, 10),), ((1, 2), (4, 5)), ((1, 2), (3, 6)), ((1, 2), (7, 8)), ((1, 2), (9, 10)), ((4, 5), (3, 6)), ((4, 5), (7, 8)), ((4, 5), (9, 10)), ((3, 6), (7, 8)), ((3, 6), (9, 10)), ((7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6)), ((1, 2), (4, 5), (7, 8)), ((1, 2), (4, 5), (9, 10)), ((1, 2), (3, 6), (7, 8)), ((1, 2), (3, 6), (9, 10)), ((1, 2), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8)), ((4, 5), (3, 6), (9, 10)), ((4, 5), (7, 8), (9, 10)), ((3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8)), ((1, 2), (4, 5), (3, 6), (9, 10)), ((1, 2), (4, 5), (7, 8), (9, 10)), ((1, 2), (3, 6), (7, 8), (9, 10)), ((4, 5), (3, 6), (7, 8), (9, 10)), ((1, 2), (4, 5), (3, 6), (7, 8), (9, 10))], 't-9': [((1, 2),)], 't-10': [], 't-49': [((1, 2),), ((2, 3),), ((1, 2), (2, 3))]}, 's-98': {'t-0': [((4, 5), (3, 6))], 't-1': [((4, 5), (3, 6))], 't-2': [], 't-3': [], 't-4': [((4, 5), (3, 6))], 't-5': [((4, 5), (3, 6))], 't-6': [], 't-7': [], 't-8': [((4, 5), (3, 6))], 't-9': [], 't-10': [], 't-49': []}, 's-99': {'t-0': [], 't-1': [], 't-2': [], 't-3': [], 't-4': [], 't-5': [], 't-6': [], 't-7': [], 't-8': [], 't-9': [], 't-10': [], 't-49': []}}, 'code_test_res': {'s-0': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-1': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-2': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-3': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-4': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-5': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-6': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-7': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-8': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-9': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-10': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-11': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-12': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-13': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-14': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-15': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-16': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-17': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-18': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-19': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-20': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-21': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-22': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-23': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-24': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-25': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-26': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-27': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-28': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-29': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-30': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-31': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-32': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-33': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-34': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-35': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-36': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-37': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-38': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-39': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-40': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-41': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-42': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-43': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-44': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-45': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-46': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-47': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-48': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-49': {'t-0': True, 't-1': True, 't-2': True, 't-3': True, 't-4': True, 't-5': True, 't-6': True, 't-7': True, 't-8': True, 't-9': True, 't-10': True, 't-49': True}, 's-50': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-51': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-52': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-53': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-54': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-55': {'t-0': True, 't-1': True, 't-2': True, 't-3': True, 't-4': True, 't-5': True, 't-6': True, 't-7': True, 't-8': True, 't-9': True, 't-10': True, 't-49': True}, 's-56': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-57': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-58': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-59': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-60': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-61': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-62': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-63': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-64': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-65': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-66': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-67': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-68': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-69': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-70': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-71': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-72': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-73': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-74': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-75': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-76': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-77': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-78': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-79': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-80': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-81': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-82': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-83': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-84': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-85': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-86': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-87': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-88': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-89': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-90': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-91': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-92': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-49': False}, 's-93': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-94': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-95': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-96': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-97': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': True, 't-49': False}, 's-98': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}, 's-99': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': True, 't-49': False}}, 'solution_dict': {'s-0': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for element in combinations(test_list, i):\n            res.append(sum(element))\n    return res\n", 's-1': '\n    res = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        for j in comb:\n            res.append(sum(j))\n    return res\n', 's-2': '\n    # Empty list to store the results\n    result = []\n\n    # Loop through all possible combinations of tuples in the list\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            # Calculate the sum of the tuples in the combination\n            s = sum(sum(k) for k in j)\n            # Append the combination and its sum to the result list\n            result.append((j, s))\n\n    # Return the result list\n    return result\n', 's-3': '\n    res = []\n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for c in comb:\n            res.append(sum(c))\n    return res\n', 's-4': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        for j in comb:\n            temp = sum([x[0] for x in j]), tuple([x[1] for x in j])\n            result.append(temp)\n    return result\n", 's-5': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        for c in combinations(test_list, i):\n            res.append(sum(c))\n    return res\n", 's-6': '\n    # List to store the sum of all possible combinations\n    sums = []\n\n    # Loop through all possible tuple combinations in the list\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            # Append the sum of the tuple to the list of sums\n            sums.append(sum(j))\n\n    # Return the list of all possible sums\n    return sums\n', 's-7': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for sub in test_list:\n        temp = []\n        for j in range(1, len(sub) + 1):\n            temp.extend(list(combinations(sub, j)))\n        res.append(tuple(temp))\n    return res\n", 's-8': '\n    res = []\n    for l in range(2, len(test_list)+1):\n        for subset in combinations(test_list, l):\n            res.append(sum(subset))\n    return res\n', 's-9': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            result.append(sum(j))\n    return result\n", 's-10': '\n    # Get all possible combinations of length 2 from the test_list\n    combs = combinations(test_list, 2)\n    \n    # Create an empty list to store the resulting tuples\n    result = []\n    \n    # Loop through each combination of tuples\n    for comb in combs:\n        # Get the sum of the two tuples\n        s = sum(comb)\n        \n        # Create a new tuple with the original tuples and their sum\n        new_tuple = comb + (s,)\n        \n        # Append the new tuple to the result list\n        result.append(new_tuple)\n    \n    # Return the list of resulting tuples\n    return result\n', 's-11': '\n    res = []\n    # loop to find all combinations of length i\n    for i in range(1, len(test_list) + 1):\n        # loop to find all combinations of length i\n        for j in combinations(test_list, i):\n            # append the sum of tuple j to result\n            res.append(sum(j))\n    # return the result\n    return res\n', 's-12': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            res.append(sum(j))\n    return res\n", 's-13': '\n    res = []\n    for i in range(2, len(test_list)+1):\n        for val in combinations(test_list, i):\n            res.append(sum(val))\n    return res\n', 's-14': '\n    res = []\n    for l in range(2, len(test_list) + 1):\n        for subset in combinations(test_list, l):\n            res.append(sum(subset))\n    return res\n', 's-15': '\n    return [comb for i in range(1, len(test_list)+1) for comb in combinations(test_list, i)]\n', 's-16': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            temp = sum([ele for tpl in comb for ele in tpl])\n            res.append(temp)\n    return res\n", 's-17': '\n    res = []\n    for i in range(1, len(test_list)+1):\n        temp = [tuple(combinations(test_list, i))[j] for j in range(len(list(combinations(test_list, i))))]\n        for ele in temp:\n            res.append(sum(ele))\n    return res\n', 's-18': '\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combination in combinations(test_list, i):\n            result.append(sum(combination))\n    return result\n', 's-19': '\n    # using combinations() to compute all possible combinations of elements in test_list\n    # filter the combinations that sum to 0\n    return list(filter(lambda x: sum(x) == 0, list(combinations(test_list, 2))))\n', 's-20': '\n    n = len(test_list)\n    res = []\n    for i in range(1, n+1):\n        comb = combinations(test_list, i)\n        for item in comb:\n            res.append(sum(item))\n    return res\n', 's-21': '\n    res = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            res.append(sum(subset))\n    return res\n', 's-22': '\n    res = []\n    n = len(test_list)\n    for i in range(1, n+1):\n        comb = list(combinations(test_list, i))\n        for j in comb:\n            res.append(sum(j))\n    return res\n', 's-23': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            result.append(sum(comb))\n    return result\n", 's-24': '\n    return [comb for i in range(1,len(test_list)+1) for comb in combinations(test_list,i)]\n', 's-25': '\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            res.append(sum(j))\n    return res\n', 's-26': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for size in range(1, len(test_list) + 1):\n        for combination in combinations(test_list, size):\n            temp = sum([sum(x) for x in combination])\n            res.append(temp)\n    return res\n", 's-27': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for l in range(2, len(test_list)+1):\n        for subset in combinations(test_list, l):\n            res.append(sum(subset))\n    return res\n", 's-28': '\n    """\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    """\n    res = []\n    for length in range(1, len(test_list) + 1):\n        for subset in combinations(test_list, length):\n            res.append(sum(subset))\n    return res\n', 's-29': '\n    res = []\n    for i in range(1, len(test_list)+1):\n        temp = [ele for ele in combinations(test_list, i)]\n        for ele in temp:\n            res.append(sum(ele))\n    return res\n', 's-30': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            temp = sum(list(zip(*j)))\n            res.append(temp)\n    return res\n", 's-31': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for j in comb:\n            res.append(sum(j))\n    return res\n", 's-32': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for j in comb:\n            res.append(sum(j))\n    return res\n", 's-33': '\n    """\n    Find the combinations of sums with tuples in the given tuple list.\n\n    Args:\n    test_list (list): A list of tuples\n\n    Returns:\n    result (list): A list containing tuples of combinations of sums\n\n    Example:\n    >>> find_combinations([(1, 2), (2, 3), (3, 4)])\n    [(1, 2, 2, 3), (1, 2, 3, 4), (2, 3, 3, 4), (1, 2, 3, 4, 3, 4)]\n    """\n\n    result = []\n\n    for i in range(2, len(test_list)+1):\n        for j in combinations(test_list, i):\n            temp = []\n            for k in j:\n                temp.extend(k)\n            result.append(tuple(sorted(temp)))\n\n    return result\n', 's-34': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            result.append(sum(j))\n    return result\n", 's-35': '\n    res = []\n    for i in range(1, len(test_list)+1):\n        temp = [comb for comb in combinations(test_list, i)]\n        for tup in temp:\n            res.append((sum(tup), tup))\n    return res\n', 's-36': '\n    # empty dictionary to store the results\n    res = {}\n  \n    # loop through each tuple in the list\n    for ele in test_list:\n        # loop through each combination of the tuple\n        for i in range(1, len(ele)+1):\n            for comb in combinations(ele, i):\n                # calculate the sum of the current combination\n                s = sum(comb)\n                if s in res:\n                    # if the sum already exists in the dictionary, append the current combination to its list of tuples\n                    res[s].append(comb)\n                else:\n                    # if the sum is not already in the dictionary, create a new key with the current sum and a list containing the current combination\n                    res[s] = [comb]\n  \n    # return the resulting dictionary\n    return res\n', 's-37': '\n    result = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            result.append(sum(subset))\n    return result\n', 's-38': '\n    res = []\n    for i in range(1, len(test_list)+1):\n        combos = combinations(test_list, i)\n        for j in combos:\n            res.append(sum(j))\n    return res\n', 's-39': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            res.append(sum(subset))\n    return res\n", 's-40': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for tup in test_list:\n        for i in range(2, len(tup) + 1):\n            for sum_tuple in combinations(tup, i):\n                if sum(sum_tuple) not in res:\n                    res.append(sum(sum_tuple))\n    return sorted(res)\n", 's-41': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            res.append(sum(j))\n    return res\n", 's-42': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        for c in comb:\n            res.append(sum(c))\n    return res\n", 's-43': '\n    return [sum(comb) for L in range(0, len(test_list)+1) for comb in combinations(test_list, L)]\n', 's-44': '\n    return [comb for L in range(0, len(test_list)+1) for comb in combinations(test_list, L)]\n', 's-45': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [comb for i in range(1, len(test_list) + 1) for comb in combinations(test_list, i)]\n", 's-46': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # generating all possible combinations of tuples\n    res = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        for j in list(comb):\n            res.append(j)\n    \n    # generating all possible combinations of sums\n    sums = []\n    for r in res:\n        for i in range(len(r)+1):\n            comb = combinations(r, i)\n            for j in list(comb):\n                if sum(j) not in sums:\n                    sums.append(sum(j))\n    \n    # sorting the results\n    sums.sort()\n    \n    return sums\n", 's-47': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for sub in test_list:\n        temp = []\n        for ele in sub:\n            temp.append(ele)\n        res.append(temp)\n    ans = []\n    for L in range(0, len(res)+1):\n        for subset in combinations(res, L):\n            ans.append(subset)\n    result = []\n    for val in ans:\n        temp = []\n        for ele in val:\n            temp += ele\n        result.append(tuple(temp))\n    return result\n", 's-48': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            if sum(subset) == 0:\n                res.append(subset)\n    return res\n", 's-49': '\nfrom itertools import combinations \n\ndef find_combinations(test_list):\n    comb = combinations(test_list, 2)\n    result = []\n\n    for c in comb:\n        result.append((c[0][0] + c[1][0], c[0][1] + c[1][1]))\n    \n    return result', 's-50': '\n    result = []\n    for i in range(1, len(test_list)+1):\n        combos = combinations(test_list, i)\n        for combo in combos:\n            result.append(sum(combo))\n    return result\n', 's-51': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the result\n    res = []\n\n    # Loop through all possible combination of tuples in the given list\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            # Calculate the sum of all tuples in the current combination\n            sum_tup = sum(sum(tup) for tup in j)\n            \n            # Append the current combination to the result if its sum is unique\n            if sum_tup not in [sum(sum(x) for x in r) for r in res]:\n                res.append(j)\n\n    # Return the result\n    return res\n", 's-52': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for l in range(2, len(test_list) + 1):\n        for subset in combinations(test_list, l):\n            temp = []\n            for tup in subset:\n                temp.extend(tup)\n            res.append(tuple(temp))\n    return res\n", 's-53': '\n    # empty dictionary to store the result\n    res = {}\n    # loop through all possible combinations of the tuples in the list\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            # sum the tuples in the combination\n            s = sum([sum(x) for x in j])\n            # add the combination and its sum to the dictionary\n            if s in res:\n                res[s].append(j)\n            else:\n                res[s] = [j]\n    # return the dictionary\n    return res\n', 's-54': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = [] \n    for sub in test_list: \n        temp = [] \n        for ele in sub: \n            temp.append(ele) \n            for ele in combinations(sub, len(temp)): \n                res.append(sum(ele)) \n    return res\n", 's-55': '\nfrom itertools import combinations \n\ndef find_combinations(test_list):\n    comb = combinations(test_list, 2)\n    res = []\n    for val in comb:\n        res.append(tuple(map(sum, zip(*val))))\n    return res\n', 's-56': '\n    # empty result list to store the combinations\n    res = []\n    \n    # loop over the tuple list and get all possible combinations of sums\n    for tup in test_list:\n        for i in range(1, len(tup) + 1):\n            comb = combinations(tup, i)\n            for c in comb:\n                res.append(sum(c))\n    \n    # return the result list\n    return res\n', 's-57': '\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            res.append(sum(j))\n    return res\n', 's-58': '\n    return [comb for i in range(1, len(test_list)+1) for comb in combinations(test_list, i)]\n', 's-59': '\n    res = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            res.append(sum(subset))\n    return res\n', 's-60': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for j in list(comb):\n            res.append(sum(j))\n    return res\n", 's-61': '\n    res = set()\n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for j in comb:\n            res.add(sum(j))\n    return res\n', 's-62': '\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combination in combinations(test_list, i):\n            result.append(sum(combination))\n    return result\n', 's-63': '\n    # using map() + sum()\n    # to compute all sums\n    res = set(sum(i) for j in range(1, len(test_list)+1) for i in combinations(test_list, j))\n \n    # returning result\n    return list(res)\n', 's-64': '\n    result = set()\n    \n    for i in range(1, len(test_list)+1):\n        combos = combinations(test_list, i)\n        for combo in combos:\n            sum_tuple = sum(combo)\n            result.add(sum_tuple)\n    \n    return sorted(result)\n', 's-65': '\n    res = []\n    for i in range(1, len(test_list) + 1):\n        combs = combinations(test_list, i)\n        for c in combs:\n            res.append(sum(c))\n    return res\n', 's-66': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list to store the results\n    result = []\n    \n    # loop through all combinations of tuples in the input list\n    for i in range(1, len(test_list)+1):\n        for combination in combinations(test_list, i):\n            # calculate the sum of each tuple in the combination\n            sums = [sum(tup) for tup in combination]\n            \n            # add the combination and its sums to the result list\n            result.append((combination, sums))\n    \n    # return the list of combinations and their sums\n    return result\n", 's-67': '\n    res = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            res.append(sum(subset))\n    return res\n', 's-68': '\n    res = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            res.append(sum(j))\n    return res\n', 's-69': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for j in list(comb):\n            res.append(sum(j))\n    return res\n", 's-70': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            if sum(subset) == 0:\n                res.append(subset)\n    return res\n", 's-71': '\n    # empty result list to store the combinations\n    res = []\n    \n    # loop through all possible lengths of combinations\n    for i in range(1, len(test_list)+1):\n        \n        # loop through all possible combinations with current length\n        for comb in combinations(test_list, i):\n            \n            # append the sum of current combination to the result list\n            res.append(sum(comb))\n    \n    # return the result list\n    return res\n', 's-72': '\n    """\n    Find the combinations of sums with tuples in the given tuple list.\n\n    Args:\n    test_list (list): a list of tuples\n\n    Returns:\n    list: a list of tuples containing all possible combinations of sums\n    """\n\n    # Initialize an empty list to store the combinations\n    res = []\n\n    # Loop through all possible combinations of tuples in the input list\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            # Compute the sum of tuples in the current combination\n            s = sum([sum(x) for x in j])\n            # Append the current combination and its sum to the result list\n            res.append((j, s))\n\n    # Return the result list\n    return res\n', 's-73': '\n    res = []\n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for c in comb:\n            res.append(sum(c))\n    return res\n', 's-74': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for L in range(0, len(test_list)+1):\n        for subset in combinations(test_list, L):\n            res.append(sum(subset))\n    return res\n", 's-75': '\n    """\n    Find the combinations of sums with tuples in the given tuple list.\n    """\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            result.append(sum(j))\n    return result\n', 's-76': '\n    # Creating an empty list to store the results\n    result = []\n\n    # Looping through each element of the input list\n    for i in range(1, len(test_list)+1):\n        # Generating all possible combinations of tuples of length i\n        comb = combinations(test_list, i)\n        # Looping through each combination\n        for c in comb:\n            # Adding the sum of the tuple to the result list\n            result.append(sum(c))\n\n    # Returning the list of combinations\n    return result\n', 's-77': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for sub in range(1, len(test_list)+1):\n        for ele in combinations(test_list, sub):\n            res.append(sum(ele))\n    return res\n", 's-78': '\n    # Creating an empty result list to store the final output\n    result = []\n    \n    # Iterate through all possible combinations of length 2 or more\n    for i in range(2, len(test_list)+1):\n        for j in combinations(test_list, i):\n            # If the sum of the tuple is 0, add it to the result list\n            if sum(j) == 0:\n                result.append(j)\n    \n    # Return the result list\n    return result\n', 's-79': '\n    res = []\n    for l in range(0, len(test_list) + 1):\n        for subset in combinations(test_list, l):\n            res.append(sum(subset))\n    return res\n', 's-80': '\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combination in combinations(test_list, i):\n            result.append(sum(combination))\n    return result\n', 's-81': '\n    res = []\n    for l in range(0, len(test_list) + 1):\n        for subset in combinations(test_list, l):\n            res.append(sum(subset))\n    return res\n', 's-82': '\n    return set(sum(comb) for L in range(1, len(test_list)+1) for comb in combinations(test_list, L))\n', 's-83': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [comb for i in range(1,len(test_list)+1) for comb in combinations(test_list, i) if sum(comb) == 0]\n", 's-84': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        temp = [sum(j) for j in combinations(test_list, i)]\n        res.extend(temp)\n    return res\n", 's-85': '\n    # initializing empty dictionary res\n    res = {}\n  \n    # iteration for all subsets\n    for i in range(1, len(test_list) + 1):\n        temp = set(combinations(test_list, i))\n        for elem in temp:\n            # checking if sum already exists or not\n            if sum(elem) in res:\n                res[sum(elem)].append(elem)\n            else:\n                res[sum(elem)] = [elem]\n  \n    # returning result\n    return dict(sorted(res.items()))\n', 's-86': '\n    res = []\n    for i in range(1, len(test_list) + 1):\n        combs = combinations(test_list, i)\n        for c in combs:\n            res.append(sum(c))\n    return res\n', 's-87': '\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            temp = sum(j)\n            result.append(temp)\n    return result\n', 's-88': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = set()\n    for i in range(1, len(test_list) + 1):\n        for sub in combinations(test_list, i):\n            res.add(sum(sub))\n    return res\n", 's-89': '\n    res = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            res.append(sum(j))\n    return res\n', 's-90': '\n    res = []\n    for length in range(1, len(test_list)+1):\n        for combination in combinations(test_list, length):\n            res.append(sum(combination))\n    return res\n', 's-91': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        for j in comb:\n            res.append(sum(j))\n    return res\n", 's-92': '\n    res = []\n    for l in range(0, len(test_list)+1):\n        for subset in combinations(test_list, l):\n            if sum(subset) == 0:\n                res.append(subset)\n    return res\n', 's-93': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for sub in test_list:\n        temp = []\n        for j in range(1, len(sub)+1):\n            temp += list(combinations(sub, j))\n        res.append(temp)\n    result = []\n    for sub in res:\n        for ele in sub:\n            result.append(sum(ele))\n    return result\n", 's-94': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for i in range(1, len(test_list)+1):\n        comb = combinations(test_list, i)\n        for j in comb:\n            res.append(sum(j))\n    return res\n", 's-95': '\n    # initializing an empty list to store the result\n    res = []\n  \n    # loop to find all the combinations\n    for i in range(1, len(test_list) + 1):\n        res.extend(list(set(combinations(test_list, i))))\n  \n    # calculating the sum of each tuple and returning the result\n    return [sum(i) for i in res]\n', 's-96': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for l in range(2, len(test_list) + 1):\n        for subset in combinations(test_list, l):\n            temp = []\n            for tup in subset:\n                temp += tup\n            res.append(tuple(temp))\n    return res\n", 's-97': '\n    return [comb for i in range(1, len(test_list)+1) for comb in combinations(test_list, i)]\n', 's-98': '\n    return [(x, y) for x, y in combinations(test_list, 2) if sum(x) == sum(y)]\n', 's-99': "\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = []\n    for l in range(2, len(test_list)+1):\n        for subset in combinations(test_list, l):\n            temp = []\n            for tup in subset:\n                temp += [tup[i] for i in range(len(tup))]\n            if sum(temp) == 0:\n                res.append(subset)\n    return res\n"}}