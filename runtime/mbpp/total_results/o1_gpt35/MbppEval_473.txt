{'task_id': 'MbppEval/473', 'iter_num': 32, 'already_test_oracle_gt': {'t-37': [(1, 2, 3), (4, 5, 6)]}, 'pass_num_dict': {'s-5': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-6': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-10': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-11': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-31': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-35': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-39': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-51': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-52': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-55': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-64': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-84': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-98': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34', 't-37'], 's-1': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-2': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-9': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-13': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-16': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-20': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-23': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-25': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-29': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-32': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-33': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-38': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-40': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-42': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34'], 's-43': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-44': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-50': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-53': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-57': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-74': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34'], 's-77': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34'], 's-78': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-81': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-83': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34'], 's-87': ['t-2', 't-3', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-32', 't-34'], 's-93': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-96': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-24': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-65': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-34', 't-37'], 's-62': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-34'], 's-80': ['t-2', 't-6', 't-10', 't-11', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-28', 't-29', 't-30', 't-31', 't-34'], 's-3': ['t-6', 't-13', 't-14', 't-15', 't-16', 't-18', 't-28', 't-29', 't-30', 't-31'], 's-30': ['t-6', 't-13', 't-14', 't-15', 't-16', 't-18', 't-28', 't-29', 't-30', 't-31'], 's-58': ['t-6', 't-13', 't-14', 't-15', 't-16', 't-18', 't-28', 't-29', 't-30', 't-31'], 's-92': ['t-6', 't-13', 't-14', 't-15', 't-16', 't-18', 't-28', 't-29', 't-30', 't-31'], 's-27': ['t-13', 't-14', 't-15', 't-17', 't-28', 't-29', 't-30', 't-31', 't-37'], 's-41': ['t-13', 't-14', 't-15', 't-17', 't-28', 't-29', 't-30', 't-31', 't-37'], 's-75': ['t-14', 't-15', 't-17', 't-19', 't-29', 't-30', 't-32'], 's-0': [], 's-4': [], 's-7': [], 's-8': [], 's-12': [], 's-14': [], 's-15': [], 's-17': [], 's-18': [], 's-19': [], 's-21': [], 's-22': [], 's-26': [], 's-28': [], 's-34': [], 's-36': [], 's-37': [], 's-45': [], 's-46': [], 's-47': [], 's-48': [], 's-49': [], 's-54': [], 's-56': [], 's-59': [], 's-60': [], 's-61': [], 's-63': [], 's-66': [], 's-67': [], 's-68': [], 's-69': [], 's-70': [], 's-71': [], 's-72': [], 's-73': [], 's-76': [], 's-79': [], 's-82': [], 's-85': [], 's-86': [], 's-88': [], 's-89': [], 's-90': [], 's-91': [], 's-94': [], 's-95': [], 's-97': [], 's-99': []}, 'code_test_output': {'s-0': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-1': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-2': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-3': {'t-2': [((3, 4),)], 't-3': [((1, 2, 3),), ((3, 1, 2),)], 't-6': [], 't-10': [((3, 5),)], 't-11': [((3, 5),)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [((3, 5),)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [((1, 2),), ((2, 1),)], 't-34': [((1, 2),)], 't-37': []}, 's-4': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-5': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-6': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-7': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-8': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-9': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-10': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-11': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-12': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-13': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-14': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-15': {'t-2': (), 't-3': (((1, 2, 3), (3, 1, 2)), ((3, 1, 2), (1, 2, 3))), 't-6': (), 't-10': (), 't-11': (), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': (), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': (((1, 2), (2, 1)), ((2, 1), (1, 2))), 't-34': (), 't-37': ()}, 's-16': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-17': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-18': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-19': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-20': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-21': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-22': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-23': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-24': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(3, 4), (1, 2)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-25': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-26': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-27': {'t-2': [(), ()], 't-3': [(1, 2, 3), (2, 3)], 't-6': [(1, 2)], 't-10': [(2,), ()], 't-11': [()], 't-13': [], 't-14': [], 't-15': [], 't-16': [()], 't-17': [(3, 5)], 't-18': [(1,)], 't-19': [(), ()], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (1, 2)], 't-34': [(), (2,)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-28': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-29': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-30': {'t-2': [], 't-3': [((1, 2, 3), (3, 1, 2)), ((3, 1, 2), (1, 2, 3))], 't-6': [], 't-10': [], 't-11': [], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [((1, 2), (2, 1)), ((2, 1), (1, 2))], 't-34': [], 't-37': []}, 's-31': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-32': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-33': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-34': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-35': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-36': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-37': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-38': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-39': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-40': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-41': {'t-2': [(), ()], 't-3': [(1, 2, 3), (2, 3)], 't-6': [(1, 2)], 't-10': [(2,), ()], 't-11': [()], 't-13': [], 't-14': [], 't-15': [], 't-16': [()], 't-17': [(3, 5)], 't-18': [(1,)], 't-19': [(), ()], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (1, 2)], 't-34': [(), (2,)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-42': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': []}, 's-43': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-44': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-45': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-46': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-47': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-48': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-49': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-50': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-51': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-52': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-53': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-54': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-55': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-56': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-57': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-58': {'t-2': [], 't-3': [], 't-6': [], 't-10': [], 't-11': [], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [], 't-34': [], 't-37': []}, 's-59': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-60': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-61': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-62': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': []}, 's-63': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-64': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-65': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(3, 4), (1, 2)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-66': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-67': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-68': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2)}, 't-34': {(1, 2)}, 't-37': set()}, 's-69': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-70': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-71': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-72': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-73': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-74': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': []}, 's-75': {'t-2': None, 't-3': None, 't-6': None, 't-10': None, 't-11': None, 't-13': None, 't-14': [], 't-15': [], 't-16': None, 't-17': [(3, 5)], 't-18': None, 't-19': [(1, 2), (3, 4)], 't-28': None, 't-29': [], 't-30': [], 't-31': None, 't-32': [(1, 2), (2, 1)], 't-34': None, 't-37': None}, 's-76': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3), (3, 1, 2)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2), (2, 1)}, 't-34': {(1, 2)}, 't-37': set()}, 's-77': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': []}, 's-78': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-79': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-80': {'t-2': [(3, 4)], 't-3': [(3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(2, 1)], 't-34': [(1, 2)], 't-37': []}, 's-81': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-82': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-83': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': []}, 's-84': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-85': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-86': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-87': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': []}, 's-88': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-89': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-90': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-91': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-92': {'t-2': [[3, 4]], 't-3': [[1, 2, 3], [3, 1, 2]], 't-6': [], 't-10': [[3, 5]], 't-11': [[3, 5]], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [[3, 5]], 't-18': [], 't-19': [], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [[1, 2], [2, 1]], 't-34': [[1, 2]], 't-37': []}, 's-93': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-94': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-95': {'t-2': {(3, 4)}, 't-3': {(1, 2, 3)}, 't-6': set(), 't-10': {(3, 5)}, 't-11': {(3, 5)}, 't-13': set(), 't-14': set(), 't-15': set(), 't-16': set(), 't-17': {(3, 5)}, 't-18': set(), 't-19': set(), 't-28': set(), 't-29': set(), 't-30': set(), 't-31': set(), 't-32': {(1, 2)}, 't-34': {(1, 2)}, 't-37': set()}, 's-96': {'t-2': [(3, 4)], 't-3': [(1, 2, 3)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-97': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}, 's-98': {'t-2': [(3, 4)], 't-3': [(1, 2, 3), (3, 1, 2)], 't-6': [], 't-10': [(3, 5)], 't-11': [(3, 5)], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [(3, 5)], 't-18': [], 't-19': [(1, 2), (3, 4)], 't-28': [], 't-29': [], 't-30': [], 't-31': [], 't-32': [(1, 2), (2, 1)], 't-34': [(1, 2)], 't-37': [(1, 2, 3), (4, 5, 6)]}, 's-99': {'t-2': ((3, 4),), 't-3': ((1, 2, 3), (3, 1, 2)), 't-6': (), 't-10': ((3, 5),), 't-11': ((3, 5),), 't-13': (), 't-14': (), 't-15': (), 't-16': (), 't-17': ((3, 5),), 't-18': (), 't-19': (), 't-28': (), 't-29': (), 't-30': (), 't-31': (), 't-32': ((1, 2), (2, 1)), 't-34': ((1, 2),), 't-37': ()}}, 'code_test_res': {'s-0': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-1': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-2': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-3': {'t-2': False, 't-3': False, 't-6': True, 't-10': False, 't-11': False, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': False, 't-37': False}, 's-4': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-5': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-6': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-7': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-8': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-9': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-10': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-11': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-12': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-13': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-14': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-15': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-16': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-17': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-18': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-19': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-20': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-21': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-22': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-23': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-24': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-25': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-26': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-27': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': True, 't-14': True, 't-15': True, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': False, 't-37': True}, 's-28': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-29': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-30': {'t-2': False, 't-3': False, 't-6': True, 't-10': False, 't-11': False, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': False, 't-37': False}, 's-31': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-32': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-33': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-34': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-35': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-36': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-37': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-38': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-39': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-40': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-41': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': True, 't-14': True, 't-15': True, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': False, 't-37': True}, 's-42': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': False}, 's-43': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-44': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-45': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-46': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-47': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-48': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-49': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-50': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-51': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-52': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-53': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-54': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-55': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-56': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-57': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-58': {'t-2': False, 't-3': False, 't-6': True, 't-10': False, 't-11': False, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': False, 't-37': False}, 's-59': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-60': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-61': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-62': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': False}, 's-63': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-64': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-65': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-66': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-67': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-68': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-69': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-70': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-71': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-72': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-73': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-74': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': False}, 's-75': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': True, 't-15': True, 't-16': False, 't-17': True, 't-18': False, 't-19': True, 't-28': False, 't-29': True, 't-30': True, 't-31': False, 't-32': True, 't-34': False, 't-37': False}, 's-76': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-77': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': False}, 's-78': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-79': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-80': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': False}, 's-81': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-82': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-83': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': False}, 's-84': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-85': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-86': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-87': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': False}, 's-88': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-89': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-90': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-91': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-92': {'t-2': False, 't-3': False, 't-6': True, 't-10': False, 't-11': False, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': False, 't-37': False}, 's-93': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-94': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-95': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-96': {'t-2': True, 't-3': False, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': False, 't-34': True, 't-37': True}, 's-97': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}, 's-98': {'t-2': True, 't-3': True, 't-6': True, 't-10': True, 't-11': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-34': True, 't-37': True}, 's-99': {'t-2': False, 't-3': False, 't-6': False, 't-10': False, 't-11': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-34': False, 't-37': False}}, 'solution_dict': {'s-0': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert both lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the common elements in both sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the common elements to a tuple\n    result = tuple(common_elements)\n    \n    # Return the tuple\n    return result\n", 's-1': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    def sort_tuple(t):\n        return tuple(sorted(t))\n\n    set1 = set(map(sort_tuple, test_list1))\n    set2 = set(map(sort_tuple, test_list2))\n    intersection = set1 & set2\n    return sorted(list(intersection), key=lambda t: test_list1.index(sort_tuple(t)))", 's-2': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    def sort_tuple(t):\n        return tuple(sorted(t))\n\n    set1 = set(map(sort_tuple, test_list1))\n    set2 = set(map(sort_tuple, test_list2))\n    \n    intersection = set1.intersection(set2)\n    \n    return sorted(list(intersection), key=lambda x: test_list1.index(x))", 's-3': '\n    # Convert the lists into sets to perform set intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Perform set intersection to get common elements\n    intersection = set1 & set2\n\n    # Convert the common elements set into list of tuples\n    result = [tuple([elem]) for elem in intersection]\n\n    # Return the list of tuples\n    return result\n', 's-4': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-5': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set()\n\n    for tup1 in set1:\n        for tup2 in set2:\n            if sorted(tup1) == sorted(tup2):\n                intersection.add(tup1)\n                break\n\n    return list(intersection)', 's-6': '\ndef tuple_intersection(test_list1, test_list2):\n    \'\'\'\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \'\'\'\n\n    """\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    """\n    result = []\n    # Loop through each tuple in test_list1\n    for tup in test_list1:\n        # If the tuple is also in test_list2, append it to the result list\n        if set(tup) in [set(t) for t in test_list2] and tup not in result:\n            result.append(tup)\n    return result\n', 's-7': '\ndef tuple_intersection(test_list1, test_list2):\n    res = []\n    for tup in test_list1:\n        if tup in test_list2:\n            res.append(tup)\n            test_list2.remove(tup)\n    return tuple(res)', 's-8': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-9': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\ndef tuple_intersection(test_list1, test_list2):\n    return [tuple(sorted(set(t1))) for t1 in test_list1 if tuple(sorted(set(t1))) in [tuple(sorted(set(t2))) for t2 in test_list2]]\n", 's-10': '\ndef tuple_intersection(test_list1, test_list2):\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection.append(tup1)\n                break\n    return intersection', 's-11': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Converting the lists to set to perform set intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Performing set intersection on both the sets\n    intersection_set = set()\n    for tuple1 in set1:\n        for tuple2 in set2:\n            if set(tuple1) == set(tuple2):\n                intersection_set.add(tuple1)\n    \n    # Converting the set to a list\n    intersection_list = list(intersection_set)\n    \n    # Returning the intersection list\n    return intersection_list\n", 's-12': '\ndef tuple_intersection(test_list1, test_list2):\n    common_set = set(test_list1).intersection(set(test_list2))\n    common_list = list(common_set)\n    return tuple(common_list)', 's-13': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists into sets of tuples\n    set1 = set([tuple(sorted(x)) for x in test_list1])\n    set2 = set([tuple(sorted(x)) for x in test_list2])\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back into a list of tuples\n    result = [tuple(sorted(x)) for x in intersection]\n    \n    return result\n", 's-14': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-15': '\n    # using set intersection to find the common elements between the two lists\n    common_elements = set(test_list1).intersection(set(test_list2))\n    \n    # using tuple comprehension to create tuples from the common elements\n    tuple_intersection = tuple((i,j) for i in common_elements for j in common_elements if i != j)\n    \n    # returning the tuple intersection\n    return tuple_intersection\n', 's-16': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n    intersection_set = set1.intersection(set2)\n    intersection_list = [tuple(sorted(t)) for t in intersection_set]\n    return intersection_list', 's-17': '\n    # using set intersection to find common elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    result_set = set1 & set2\n    # converting set to tuple\n    result_tuple = tuple(result_set)\n    return result_tuple\n', 's-18': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-19': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)', 's-20': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    def sort_tuple(t):\n        # helper function to sort the elements in a tuple\n        return tuple(sorted(t))\n\n    # sort the tuples in the input lists\n    sorted_list1 = [sort_tuple(t) for t in test_list1]\n    sorted_list2 = [sort_tuple(t) for t in test_list2]\n\n    # convert lists to sets to eliminate duplicates and perform set intersection\n    set1 = set(sorted_list1)\n    set2 = set(sorted_list2)\n\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # sort the tuples in the intersection\n    sorted_intersection = [sort_tuple(t) for t in intersection]\n\n    # return the sorted intersection as a list of tuples\n    return sorted_intersection", 's-21': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1) & set(test_list2)))", 's-22': '\n    """\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        test_list1 (list): First list of tuples\n        test_list2 (list): Second list of tuples\n\n    Returns:\n        set: Intersection of tuples\n    """\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)\n', 's-23': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    def sort_tuple(t):\n        return tuple(sorted(t))\n    \n    set1 = set(map(sort_tuple, test_list1))\n    set2 = set(map(sort_tuple, test_list2))\n    intersection = list(set1.intersection(set2))\n    return intersection", 's-24': '\ndef tuple_intersection(test_list1, test_list2):\n    def convert_to_set_of_frozensets(lst):\n        return set(frozenset(t) for t in lst)\n\n    set1 = convert_to_set_of_frozensets(test_list1)\n    set2 = convert_to_set_of_frozensets(test_list2)\n\n    intersection_set = set1.intersection(set2)\n\n    return [tuple(sorted(t)) for t in intersection_set]', 's-25': '\n    # sort the tuples to disregard order when comparing\n    sorted_test_list1 = [tuple(sorted(t)) for t in test_list1]\n    sorted_test_list2 = [tuple(sorted(t)) for t in test_list2]\n\n    # create set from the sorted lists for faster comparison\n    set1 = set(sorted_test_list1)\n    set2 = set(sorted_test_list2)\n\n    # find common tuples in both sets\n    common_set = set1.intersection(set2)\n\n    # convert the common set back to list of tuples\n    result_list = [tuple(t) for t in common_set]\n\n    # return the list of common tuples\n    return result_list\n', 's-26': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)', 's-27': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    return [tuple(sorted(set(t1) & set(t2))) for t1, t2 in zip(test_list1, test_list2)]", 's-28': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-29': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    return [tuple(sorted(set(t1))) for t1 in test_list1 if set(t1) in [set(t2) for t2 in test_list2]]", 's-30': '\n    # Convert the tuple lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the common elements between the sets\n    common_elements = set1.intersection(set2)\n\n    # Create a list of tuples by pairing up the common elements\n    result = [(elem1, elem2) for elem1 in common_elements for elem2 in common_elements if elem1 != elem2]\n\n    return result\n', 's-31': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create sets of the lists to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set()\n    for tuple1 in set1:\n        for tuple2 in set2:\n            if sorted(tuple1) == sorted(tuple2):\n                intersection_set.add(tuple1)\n    \n    # Convert the intersection set to a list\n    intersection_list = list(intersection_set)\n    \n    # Return the intersection list\n    return intersection_list\n", 's-32': '\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                result.append(tuple(sorted(tup1)))\n    return list(set(result))\n', 's-33': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    def sort_tuple(t):\n        return tuple(sorted(t))\n\n    def remove_duplicates(lst):\n        return list(set(lst))\n\n    def tuple_intersection(test_list1, test_list2):\n        set1 = set(map(sort_tuple, test_list1))\n        set2 = set(map(sort_tuple, test_list2))\n        intersection = set1.intersection(set2)\n        result = remove_duplicates(list(intersection))\n        return result\n\n    return tuple_intersection(test_list1, test_list2)", 's-34': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    return tuple(sorted(set(test_list1) & set(test_list2), key=test_list1.index))", 's-35': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    result = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):\n                result.append(tuple1)\n                break\n    \n    return result", 's-36': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    intersect_set = set1.intersection(set2)\n    \n    return tuple(intersect_set)", 's-37': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Using set intersection to find common elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)\n", 's-38': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the input lists to sets of tuples\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list of tuples\n    result = [tuple(sorted(t)) for t in intersection]\n    \n    # Return the final result\n    return result\n", 's-39': '\ndef tuple_intersection(test_list1, test_list2):\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                result.append(tup1)\n                break\n    return result', 's-40': '\ndef tuple_intersection(test_list1, test_list2):\n    \'\'\'\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \'\'\'\n\n    # Convert each list of tuples to a set of tuples for easier intersection calculation\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Use the "&" operator to get the intersection of the two sets\n    intersect_set = set1 & set2\n\n    # Convert the intersection set back to a list of tuples\n    intersect_list = list(intersect_set)\n\n    # Sort the tuples in the list to ensure consistent order\n    intersect_list.sort()\n\n    return intersect_list\n\n# Fixed code:\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(tuple(sorted(t)) for t in test_list1)\n    set2 = set(tuple(sorted(t)) for t in test_list2)\n    intersect_set = set1 & set2\n    intersect_list = list(intersect_set)\n    intersect_list.sort()\n    return intersect_list', 's-41': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\ndef tuple_intersection(test_list1, test_list2):\n    return [tuple(sorted(set(t1) & set(t2))) for t1, t2 in zip(test_list1, test_list2)]", 's-42': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the input lists to sets of tuples to remove duplicates\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back to a list of tuples\n    result = list(map(tuple, intersection))\n    \n    # Return the result\n    return result\n", 's-43': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    def sort_tuple(t):\n        return tuple(sorted(t))\n\n    set1 = set(map(sort_tuple, test_list1))\n    set2 = set(map(sort_tuple, test_list2))\n    intersect = set1.intersection(set2)\n    return list(intersect)", 's-44': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set([tuple(sorted(item)) for item in test_list1])\n    set2 = set([tuple(sorted(item)) for item in test_list2])\n    intersection = set1.intersection(set2)\n    result = [tuple(item) for item in intersection]\n    return result', 's-45': '\n    # Using set intersection to find common elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n\n    # Converting sets to tuples\n    tuple_intersection = tuple(intersection)\n    return tuple_intersection\n', 's-46': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets for faster intersection operation\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersect = set1.intersection(set2)\n    \n    # Return the tuple\n    return tuple(intersect)", 's-47': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    return tuple(intersection_set)', 's-48': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    result = tuple(sorted(intersection))\n    return result', 's-49': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    common_elements = set1.intersection(set2)\n    sorted_tuples = sorted(common_elements)\n    return tuple(sorted_tuples)', 's-50': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    result = []\n    for tup in test_list1:\n        if sorted(tup) in map(sorted, test_list2) and sorted(tup) not in map(sorted, result):\n            result.append(tup)\n    return result", 's-51': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    result = set()\n    for t1 in set1:\n        for t2 in set2:\n            if set(t1) == set(t2):\n                result.add(t1)\n    return list(result)', 's-52': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    return [t for t in test_list1 if sorted(t) in [sorted(x) for x in test_list2]]", 's-53': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set([tuple(sorted(i)) for i in test_list1])\n    set2 = set([tuple(sorted(i)) for i in test_list2])\n    \n    return list(set1 & set2)\n", 's-54': '\n    # convert each tuple to a set and find their intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set back to a tuple\n    return tuple(intersection)\n', 's-55': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set()\n    for tuple1 in set1:\n        for tuple2 in set2:\n            if sorted(tuple1) == sorted(tuple2):\n                intersection_set.add(tuple1)\n    intersection_list = list(intersection_set)\n    return intersection_list', 's-56': '\n    # convert the input lists to sets to eliminate duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the resulting set back to a tuple\n    result = tuple(intersection)\n    \n    return result\n', 's-57': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n\n    intersection_set = set1.intersection(set2)\n    intersection_list = [tuple(sorted(i)) for i in intersection_set]\n\n    return intersection_list", 's-58': '\n    # using set() + intersection()\n    # to find intersection of lists\n    temp_set = set(test_list2)\n    res_set = set()\n    for sub in test_list1:\n        if set(sub).intersection(temp_set):\n            res_set.add(sub)\n    return list(map(list, res_set))\n', 's-59': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)', 's-60': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-61': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-62': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Use set intersection to find common elements between the two input lists\n    common_elements = set(test_list1) & set(test_list2)\n    \n    # Sort each tuple so that order is not a factor in comparing tuples\n    sorted_common_elements = [tuple(sorted(element)) for element in common_elements]\n    \n    # Remove duplicates by converting to set and back to list\n    sorted_common_elements = list(set(sorted_common_elements))\n    \n    return sorted_common_elements\n", 's-63': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Find the set of tuples for each list\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Return the tuple from the intersection set\n    return tuple(intersection)", 's-64': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set()\n\n    for tuple_1 in set1:\n        for tuple_2 in set2:\n            if sorted(tuple_1) == sorted(tuple_2):\n                intersection_set.add(tuple_1)\n                break\n\n    return list(intersection_set)', 's-65': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the given lists to sets for fast intersection\n    set1 = set(map(lambda x: frozenset(x), test_list1))\n    set2 = set(map(lambda x: frozenset(x), test_list2))\n    \n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back to a list of tuples\n    result = list(map(lambda x: tuple(x), intersection))\n    \n    return result\n", 's-66': '\n    # Convert the tuples to sets and find intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a tuple\n    intersection_tuple = tuple(intersection)\n    \n    return intersection_tuple\n', 's-67': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)", 's-68': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1 & set2\n    result = []\n    for tpl in intersection:\n        result.append(tuple(sorted(tpl)))\n    return set(result)\n", 's-69': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create sets from the input lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set to a tuple\n    result = tuple(intersection)\n    \n    # return the result\n    return result\n", 's-70': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets so that we can easily find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection back to a tuple and return it\n    return tuple(intersection)\n", 's-71': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n", 's-72': '\n    # Convert the input lists to sets to remove duplicates and enable set intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the resulting set back to a tuple and return it\n    return tuple(intersection)\n', 's-73': '\n    # convert both lists to sets to remove any duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # take the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection back to a list and sort it\n    intersection_list = sorted(list(intersection))\n\n    # return the result as a tuple\n    return tuple(intersection_list)\n', 's-74': '\n    # convert both lists into sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # compute the intersection of sets\n    intersection = set1 & set2\n    \n    # convert the intersection set back into a list of tuples\n    result = [tuple(x) for x in intersection]\n    \n    return result\n', 's-75': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\ndef tuple_intersection(test_list1, test_list2):\n    return [t for t in test_list1 if set(t) == set(test_list2[0])]\n\ndef tuple_intersection(test_list1, test_list2):\n    return [t for t in test_list1 if set(t) == set(test_list2[0]) or set(t) == set(test_list2[1])]\n\ndef tuple_intersection(test_list1, test_list2):\n    return [t for t in test_list1 if set(t) == set(test_list2[0]) or set(t) == set(test_list2[1]) or set(t) == set(test_list2[2])]", 's-76': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(set(test_list2))\n", 's-77': '\n    """\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    """\n    # Converting the given lists to sets to remove duplicates.\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Performing intersection on sets to find the common elements.\n    common_elements = set1.intersection(set2)\n\n    # Converting the common elements back to a list of tuples.\n    result = [tuple(elem) for elem in common_elements]\n    \n    # Returning the resulting list of tuples\n    return result\n', 's-78': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the input lists to sets of tuples to remove any duplicates.\n    set1 = set([tuple(sorted(item)) for item in test_list1])\n    set2 = set([tuple(sorted(item)) for item in test_list2])\n\n    # Compute the intersection of the two sets.\n    intersection_set = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples and return it.\n    return [tuple(item) for item in intersection_set]\n", 's-79': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(sorted(set1 & set2))', 's-80': '\n    # Find the set intersection of the two input lists\n    set_intersection = set(test_list1).intersection(set(test_list2))\n\n    # Convert each element of the intersection set into a tuple\n    tuple_intersection = [tuple([elem]) if type(elem) != tuple else elem for elem in set_intersection]\n\n    # Loop through the set intersection and check for tuples with the same elements\n    for elem in set_intersection:\n        if type(elem) == tuple:\n            for t in tuple_intersection:\n                if t != elem and sorted(t) == sorted(elem):\n                    tuple_intersection.remove(elem)\n                    break\n\n    # Return the final tuple intersection\n    return tuple_intersection\n', 's-81': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set([tuple(sorted(item)) for item in test_list1])\n    set2 = set([tuple(sorted(item)) for item in test_list2])\n    intersection_set = set1 & set2\n    intersection_list = [tuple(sorted(item)) for item in intersection_set]\n    return sorted(intersection_list)', 's-82': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Find the set of tuples in both test_list1 and test_list2\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Return the sorted list of tuples in the intersection\n    return tuple(sorted(list(intersection)))\n", 's-83': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets of tuples\n    set1 = set(tuple(x) for x in test_list1)\n    set2 = set(tuple(x) for x in test_list2)\n\n    # Calculate the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list of tuples\n    return [tuple(x) for x in intersection]\n", 's-84': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2) and tup1 not in result:\n                result.append(tup1)\n    return result\n", 's-85': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    return tuple(sorted(set(test_list1).intersection(set(test_list2))))\n", 's-86': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)', 's-87': '\n    # Convert each tuple in the lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of sets\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list of tuples\n    result_list = [tuple(elem) for elem in intersection_set]\n    \n    return result_list\n', 's-88': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(sorted(intersection))", 's-89': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert the input lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set back to a list and sort it\n    result = tuple(sorted(list(intersection)))\n    \n    # return the sorted tuple of intersection elements\n    return result\n", 's-90': '\n    # Convert the lists to sets to eliminate duplicates and make the intersection calculation faster\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Calculate the intersection of the two sets and return it as a sorted tuple\n    return tuple(sorted(set1 & set2))\n', 's-91': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert the lists to sets to find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set to tuple and return\n    return tuple(intersection)", 's-92': '\n    # Using list comprehension to convert elements of list to tuples\n    test_list1 = [tuple(i) for i in test_list1]\n    test_list2 = [tuple(i) for i in test_list2]\n    # Using set intersection to find common tuples\n    common_tuples = set(test_list1) & set(test_list2)\n    # Converting set back to list\n    common_tuples = list(common_tuples)\n    # Converting tuples back to list\n    common_tuples = [list(i) for i in common_tuples]\n    return common_tuples\n', 's-93': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert each element of test_list1 and test_list2 to sets\n    set1 = set([tuple(sorted(element)) for element in test_list1])\n    set2 = set([tuple(sorted(element)) for element in test_list2])\n\n    # find the intersection of set1 and set2\n    intersection = set1.intersection(set2)\n\n    # convert intersection back to a list of tuples\n    result = [tuple(element) for element in intersection]\n\n    # return the list of tuples\n    return result\n", 's-94': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the tuple lists into sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set into a tuple\n    result = tuple(intersection)\n    \n    # Return the result\n    return result\n", 's-95': "\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1 & set2\n    result = []\n    for t in intersection:\n        result.append(tuple(sorted(t)))\n    return set(result)\n", 's-96': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert each list into a set of tuples\n    set1 = set([tuple(sorted(elem)) for elem in test_list1])\n    set2 = set([tuple(sorted(elem)) for elem in test_list2])\n    \n    # Find the intersection of the two sets\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list of tuples\n    result = [tuple(elem) for elem in intersection_set]\n    \n    return result\n", 's-97': "\ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    return tuple(sorted(list(set(test_list1) & set(test_list2))))\n", 's-98': '\n    result = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):\n                result.append(tuple1)\n                break\n    return result\n', 's-99': '\ndef tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))'}}