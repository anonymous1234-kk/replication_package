{
    "task_id": "MbppEval/603",
    "iter_num": 44,
    "already_test_oracle_gt": {
        "t-0": [
            1
        ],
        "t-1": [
            1,
            2
        ],
        "t-31": [
            1
        ],
        "t-32": [
            1,
            2
        ],
        "t-11": []
    },
    "pass_num_dict": {
        "s-0": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-3": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-6": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-7": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-9": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-12": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-16": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-23": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-24": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-26": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-28": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-29": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-30": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-31": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-37": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-39": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-41": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-42": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-43": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-46": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-48": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-49": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-50": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-51": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-55": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-56": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-58": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-61": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-62": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-63": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-64": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-65": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-67": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-70": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-71": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-75": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-76": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-77": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-79": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-80": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-83": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-85": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-87": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-88": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-93": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-94": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-96": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-97": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-98": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-99": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-14",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-4": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-14": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-19": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-25": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-47": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-52": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-91": [
            "t-0",
            "t-1",
            "t-11",
            "t-12",
            "t-13",
            "t-18",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-11": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-13": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-18": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-21": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-27": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-35": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-36": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-45": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-53": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-54": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-69": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-82": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-14",
            "t-20",
            "t-31",
            "t-32"
        ],
        "s-22": [
            "t-0",
            "t-1",
            "t-12",
            "t-13",
            "t-20",
            "t-31",
            "t-32"
        ]
    },
    "code_test_output": {
        "s-0": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-1": {
            "t-0": null,
            "t-1": null,
            "t-11": [
                1
            ],
            "t-12": null,
            "t-13": null,
            "t-14": null,
            "t-18": [
                1
            ],
            "t-20": null,
            "t-31": null,
            "t-32": null
        },
        "s-2": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-3": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-4": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-5": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-6": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-7": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-8": {
            "t-0": [],
            "t-1": [],
            "t-11": [],
            "t-12": [],
            "t-13": [],
            "t-14": [
                2
            ],
            "t-18": [],
            "t-20": [],
            "t-31": [],
            "t-32": []
        },
        "s-9": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-10": {
            "t-0": [
                1
            ],
            "t-1": [
                1
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1
            ],
            "t-14": [
                1
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1
            ]
        },
        "s-11": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-12": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-13": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-14": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                2
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-15": {
            "t-0": [
                1,
                2
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1,
                2
            ],
            "t-12": [
                1,
                2
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2
            ],
            "t-18": [
                1,
                2
            ],
            "t-20": [
                1,
                2
            ],
            "t-31": [
                1,
                2
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-16": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-17": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                1,
                2
            ],
            "t-11": [
                1,
                0
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                1,
                2
            ],
            "t-14": [
                1,
                1,
                3
            ],
            "t-18": [
                1,
                -20
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                1,
                2
            ]
        },
        "s-18": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-19": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                4
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-20": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-21": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-22": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                4
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-23": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-24": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-25": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-26": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-27": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-28": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-29": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-30": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-31": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-32": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-33": {
            "t-0": [],
            "t-1": [
                2
            ],
            "t-11": [],
            "t-12": [],
            "t-13": [
                2
            ],
            "t-14": [
                2,
                3
            ],
            "t-18": [],
            "t-20": [],
            "t-31": [],
            "t-32": [
                2
            ]
        },
        "s-34": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-35": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-36": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-37": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-38": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-39": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-40": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-41": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-42": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-43": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-44": {
            "t-0": [
                1
            ],
            "t-1": [
                1
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1
            ],
            "t-14": [
                1
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1
            ]
        },
        "s-45": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": null,
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": null,
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-46": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-47": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                4
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-48": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-49": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-50": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-51": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-52": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                6
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-53": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-54": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-55": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-56": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-57": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-58": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-59": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                1
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                1
            ],
            "t-14": [
                1,
                1,
                1
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                1
            ]
        },
        "s-60": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-61": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-62": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-63": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-64": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-65": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-66": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                10
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                10
            ],
            "t-14": [
                1,
                10,
                10
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                10
            ]
        },
        "s-67": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-68": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-69": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": null,
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": null,
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-70": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-71": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-72": {
            "t-0": [
                1
            ],
            "t-1": [
                1
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1
            ],
            "t-14": [
                1,
                2
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1
            ]
        },
        "s-73": {
            "t-0": [
                1
            ],
            "t-1": [
                1
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1
            ],
            "t-14": [
                1
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1
            ]
        },
        "s-74": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2,
                2
            ],
            "t-14": [
                1,
                2,
                2
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2,
                2
            ]
        },
        "s-75": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-76": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-77": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-78": {
            "t-0": [],
            "t-1": [
                2
            ],
            "t-11": [],
            "t-12": [],
            "t-13": [
                2
            ],
            "t-14": [
                2,
                3
            ],
            "t-18": [],
            "t-20": [],
            "t-31": [],
            "t-32": [
                2
            ]
        },
        "s-79": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-80": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-81": {
            "t-0": [
                1
            ],
            "t-1": [
                1
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1
            ],
            "t-14": null,
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1
            ]
        },
        "s-82": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-83": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-84": {
            "t-0": [],
            "t-1": [
                2
            ],
            "t-11": [],
            "t-12": [],
            "t-13": [
                2
            ],
            "t-14": [
                2,
                3
            ],
            "t-18": [],
            "t-20": [],
            "t-31": [],
            "t-32": [
                2
            ]
        },
        "s-85": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-86": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2,
                2
            ],
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2,
                2
            ],
            "t-14": [
                1,
                2,
                2,
                3
            ],
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2,
                2
            ]
        },
        "s-87": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-88": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-89": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-90": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [
                1
            ],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [
                1
            ],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-91": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                10
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-92": {
            "t-0": [],
            "t-1": null,
            "t-11": [],
            "t-12": [],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [],
            "t-31": [],
            "t-32": null
        },
        "s-93": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-94": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-95": {
            "t-0": [
                1
            ],
            "t-1": null,
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": null,
            "t-14": null,
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": null
        },
        "s-96": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-97": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-98": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        },
        "s-99": {
            "t-0": [
                1
            ],
            "t-1": [
                1,
                2
            ],
            "t-11": [],
            "t-12": [
                1
            ],
            "t-13": [
                1,
                2
            ],
            "t-14": [
                1,
                2,
                3
            ],
            "t-18": [],
            "t-20": [
                1
            ],
            "t-31": [
                1
            ],
            "t-32": [
                1,
                2
            ]
        }
    },
    "code_test_res": {
        "s-0": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-1": {
            "t-0": false,
            "t-1": false,
            "t-11": false,
            "t-12": false,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": false,
            "t-31": false,
            "t-32": false
        },
        "s-2": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-3": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-4": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-5": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-6": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-7": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-8": {
            "t-0": false,
            "t-1": false,
            "t-11": true,
            "t-12": false,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": false,
            "t-31": false,
            "t-32": false
        },
        "s-9": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-10": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-11": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-12": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-13": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-14": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-15": {
            "t-0": false,
            "t-1": false,
            "t-11": false,
            "t-12": false,
            "t-13": true,
            "t-14": false,
            "t-18": false,
            "t-20": false,
            "t-31": false,
            "t-32": false
        },
        "s-16": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-17": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-18": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-19": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-20": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-21": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-22": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-23": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-24": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-25": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-26": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-27": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-28": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-29": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-30": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-31": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-32": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-33": {
            "t-0": false,
            "t-1": false,
            "t-11": true,
            "t-12": false,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": false,
            "t-31": false,
            "t-32": false
        },
        "s-34": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-35": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-36": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-37": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-38": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-39": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-40": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-41": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-42": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-43": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-44": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-45": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-46": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-47": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-48": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-49": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-50": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-51": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-52": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-53": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-54": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-55": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-56": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-57": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-58": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-59": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-60": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-61": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-62": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-63": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-64": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-65": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-66": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-67": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-68": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-69": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-70": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-71": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-72": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-73": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-74": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-75": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-76": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-77": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-78": {
            "t-0": false,
            "t-1": false,
            "t-11": true,
            "t-12": false,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": false,
            "t-31": false,
            "t-32": false
        },
        "s-79": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-80": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-81": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-82": {
            "t-0": true,
            "t-1": true,
            "t-11": false,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": false,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-83": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-84": {
            "t-0": false,
            "t-1": false,
            "t-11": true,
            "t-12": false,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": false,
            "t-31": false,
            "t-32": false
        },
        "s-85": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-86": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-87": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-88": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-89": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-90": {
            "t-0": true,
            "t-1": false,
            "t-11": false,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": false,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-91": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-92": {
            "t-0": false,
            "t-1": false,
            "t-11": true,
            "t-12": false,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": false,
            "t-31": false,
            "t-32": false
        },
        "s-93": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-94": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-95": {
            "t-0": true,
            "t-1": false,
            "t-11": true,
            "t-12": true,
            "t-13": false,
            "t-14": false,
            "t-18": true,
            "t-20": true,
            "t-31": false,
            "t-32": false
        },
        "s-96": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-97": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-98": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        },
        "s-99": {
            "t-0": true,
            "t-1": true,
            "t-11": true,
            "t-12": true,
            "t-13": true,
            "t-14": true,
            "t-18": true,
            "t-20": true,
            "t-31": true,
            "t-32": true
        }
    },
    "solution_dict": {
        "s-0": "\n    res = [1]\n    i, j, k = 0, 0, 0\n    while len(res) < n:\n        next_num = min(res[i] * 2, res[j] * 3, res[k] * 5)\n        res.append(next_num)\n        if next_num == res[i] * 2:\n            i += 1\n        if next_num == res[j] * 3:\n            j += 1\n        if next_num == res[k] * 5:\n            k += 1\n    return res[:n]\n",
        "s-1": "\n    \"\"\"\n    Returns all ludic numbers smaller than or equal to n.\n\n    A ludic number is a positive integer that appears in the Ludic sequence,\n    which starts with [1]. The Ludic sequence is obtained by removing each\n    k-th element from the sequence of natural numbers [1, 2, 3, ...], where\n    k takes on the successive values of the sequence itself, starting from 2.\n\n    Example:\n    get_ludic(20) => [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20]\n\n    :param n: an integer\n    :return: a list of ludic numbers\n    \"\"\"\n    # Create a list of natural numbers [1, 2, 3, ...]\n    nums = list(range(1, n+1))\n\n    # Initialize the Ludic sequence with the first element\n    ludic = [1]\n\n    # While there are still elements in the sequence, remove the k-th element\n    # from the list and add it to the Ludic sequence, where k takes on the\n    # successive values of the Ludic sequence itself, starting from 2.\n    k = 2\n    while nums:\n        # Remove the k-th element from the list of natural numbers\n        nums = [num for i, num in enumerate(nums) if (i+1) % k != 0]\n\n        # If there are still elements in the list, add the k-th element to the\n        # Ludic sequence and increment k.\n        if nums:\n            ludic.append(nums[k-2])\n            k += 1\n\n    return ludic\n",
        "s-2": "\n    ludic = [1]\n    k = 1\n    while len(ludic) < n:\n        k += 1\n        if all(k % p != 0 for p in ludic):\n            ludic.append(k)\n    return ludic\n",
        "s-3": "\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic_list = []\n    num = 1\n    while num <= n:\n        if is_ludic(num):\n            ludic_list.append(num)\n        num += 1\n    return ludic_list\n\ndef is_ludic(num):\n    if num == 1:\n        return True\n    for i in [2, 3, 5]:\n        if num % i == 0:\n            if num % (i*i) == 0:\n                return False\n            return is_ludic(num // i)\n    return False\n",
        "s-4": "\ndef get_ludic(n):\n    lucid_numbers = [1]\n    current_number = 2\n\n    while len(lucid_numbers) < n:\n        if all(current_number % ln != 0 for ln in lucid_numbers) or current_number == 2:\n            lucid_numbers.append(current_number)\n        current_number += 1\n\n    return lucid_numbers[:n]",
        "s-5": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while i < n-1:\n        i += 1\n        if i == ludic[j]:\n            j += 1\n        if i == ludic[k]:\n            k += 1\n        ludic.append(ludic[j] + ludic[k])\n    return ludic[:n]\n",
        "s-6": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [1]\n    i, j, k = 0, 0, 0\n    while len(lucid_numbers) < n:\n        next_num = lucid_numbers[i] * 2\n        if next_num not in lucid_numbers:\n            lucid_numbers.append(next_num)\n        i += 1\n        next_num = lucid_numbers[j] * 3\n        if next_num not in lucid_numbers:\n            lucid_numbers.append(next_num)\n        j += 1\n        next_num = lucid_numbers[k] * 5\n        if next_num not in lucid_numbers:\n            lucid_numbers.append(next_num)\n        k += 1\n    return [num for num in lucid_numbers if num <= n]\n",
        "s-7": "\n    # Initialize the sequence with the first lucid number\n    ludic_seq = [1]\n    \n    # Initialize the factors to be used to generate lucid numbers\n    factors = [2, 3, 4, 5, 6, 7]\n    \n    # Iterate until we have enough lucid numbers\n    while len(ludic_seq) < n:\n        # Find the smallest factor that has not been used yet\n        smallest_factor = None\n        for factor in factors:\n            if factor not in ludic_seq:\n                smallest_factor = factor\n                break\n        \n        # Generate the next lucid number using the smallest unused factor\n        next_lucid = smallest_factor\n        \n        # Remove all multiples of the smallest unused factor from the factors list\n        for factor in factors:\n            if factor % smallest_factor == 0:\n                factors.remove(factor)\n        \n        # Add the next lucid number to the sequence\n        ludic_seq.append(next_lucid)\n    \n    # Return the sequence of ludic numbers up to the given limit\n    return ludic_seq[:n]\n",
        "s-8": "\n    primes = [True] * n\n    ludic_nums = []\n    for i in range(2, n):\n        if primes[i]:\n            ludic_nums.append(i)\n            for j in range(i, n, i):\n                primes[j] = False\n    return ludic_nums\n",
        "s-9": "\n    lucid_nums = [1]\n    index2, index3, index5 = 0, 0, 0\n    next2, next3, next5 = 2, 3, 5\n    for i in range(1, n):\n        lucid_nums.append(min(next2, next3, next5))\n        if lucid_nums[i] == next2:\n            index2 += 1\n            next2 = lucid_nums[index2] * 2\n        if lucid_nums[i] == next3:\n            index3 += 1\n            next3 = lucid_nums[index3] * 3\n        if lucid_nums[i] == next5:\n            index5 += 1\n            next5 = lucid_nums[index5] * 5\n    return lucid_nums[:n]\n",
        "s-10": "\n    lucid = []\n    i = 1\n    while i <= n:\n        if all(i % x != 0 for x in lucid):\n            lucid.append(i)\n        i += 1\n    return lucid\n",
        "s-11": "\n    primes = []\n    lucid_nums = [1]\n    for num in range(2, n + 1):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n            if num <= 2 or (num - 1) in lucid_nums or (num - 2) in lucid_nums:\n                lucid_nums.append(num)\n    return lucid_nums\n",
        "s-12": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [1]\n    i, j, k = 0, 0, 0\n    while len(lucid) < n:\n        next_lucid = min(lucid[i]*2, lucid[j]*3, lucid[k]*5)\n        lucid.append(next_lucid)\n        if next_lucid == lucid[i]*2:\n            i += 1\n        if next_lucid == lucid[j]*3:\n            j += 1\n        if next_lucid == lucid[k]*5:\n            k += 1\n    return lucid[:n]\n",
        "s-13": "\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    if n == 1:\n        return [1]\n    ludic_nums = [1]\n    primes = []\n    composites = []\n    for i in range(2, n + 1):\n        if i not in composites:\n            if i <= n // 2:\n                primes.append(i)\n            ludic_nums.append(i)\n            for j in range(i * i, n + 1, i):\n                composites.append(j)\n    return ludic_nums\n",
        "s-14": "\n    ludic_numbers = [1]\n    p, q = 2, 3\n    while len(ludic_numbers) < n:\n        ludic_numbers.append(p)\n        p, q = ludic_numbers[q-2], q+1\n    return ludic_numbers[:n]\n",
        "s-15": "\n    # Initialize the list with first two lucid numbers\n    ludic = [1, 2]\n    \n    # Loop to generate all lucid numbers less than or equal to n\n    for i in range(3, n+1):\n        if all(i % p != 0 for p in ludic):\n            ludic.append(i)\n            \n    return ludic\n",
        "s-16": "\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    p2, p3, p5 = 0, 0, 0\n    for i in range(1, n+1):\n        while ludic[p2]*2 <= ludic[-1]:\n            p2 += 1\n        while ludic[p3]*3 <= ludic[-1]:\n            p3 += 1\n        while ludic[p5]*5 <= ludic[-1]:\n            p5 += 1\n        ludic.append(min(ludic[p2]*2, ludic[p3]*3, ludic[p5]*5))\n    return ludic[:-1]\n",
        "s-17": "\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    primes = [2, 3, 5, 7]\n    ludic = [1]\n    for i in range(1, n):\n        if i == primes[0]:\n            primes.pop(0)\n        else:\n            ludic.append(i)\n            if len(primes) == 0:\n                continue\n            for p in primes:\n                if i % p == 0:\n                    break\n                if p * p > i:\n                    primes.append(i)\n                    break\n    if n != 1:\n        ludic.append(n)\n    return ludic\n",
        "s-18": "\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [1]\n    for i in range(2, n+1):\n        if len(ludic_nums) >= n:\n            break\n        factors = [j for j in range(2, i) if i % j == 0]\n        if len(factors) <= 1:\n            ludic_nums.append(i)\n    return ludic_nums\n",
        "s-19": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while len(ludic_numbers) < n:\n        if all(i % x == 0 for x in ludic_numbers):\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers\n",
        "s-20": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while len(ludic) < n:\n        if all(i % x != 0 for x in ludic):\n            ludic.append(i)\n        i += 1\n    return ludic\n",
        "s-21": "\ndef get_ludic(n):\n    ludic_nums = [1]\n    i, j, k = 1, 0, 0\n    while i < n:\n        i += 1\n        if i == ludic_nums[j]:\n            j += 1\n        if i == ludic_nums[k]:\n            k += 1\n        if i != ludic_nums[-1]:\n            ludic_nums.append(i)\n    return ludic_nums",
        "s-22": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = [1]\n    curr_num = 2\n    while len(lucid_nums) < n:\n        if all(curr_num % num == 0 for num in lucid_nums):\n            lucid_nums.append(curr_num)\n        curr_num += 1\n    return lucid_nums\n",
        "s-23": "\n    ludic = [1]\n    if n == 1:\n        return ludic\n\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = min(ludic[i] * 2, ludic[j] * 3, ludic[k] * 5)\n        ludic.append(next_ludic)\n\n        if next_ludic == ludic[i] * 2:\n            i += 1\n        if next_ludic == ludic[j] * 3:\n            j += 1\n        if next_ludic == ludic[k] * 5:\n            k += 1\n\n    return ludic[:n]\n",
        "s-24": "\n    ludic_numbers = [1]\n    multiple_2, multiple_3, multiple_5 = 2, 3, 5\n    index_2, index_3, index_5 = 0, 0, 0\n\n    for i in range(n):\n        next_ludic = min(multiple_2, multiple_3, multiple_5)\n        ludic_numbers.append(next_ludic)\n\n        if next_ludic == multiple_2:\n            index_2 += 1\n            multiple_2 = ludic_numbers[index_2] * 2\n\n        if next_ludic == multiple_3:\n            index_3 += 1\n            multiple_3 = ludic_numbers[index_3] * 3\n\n        if next_ludic == multiple_5:\n            index_5 += 1\n            multiple_5 = ludic_numbers[index_5] * 5\n\n    return ludic_numbers[:n]\n",
        "s-25": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1] * n\n    i, j = 0, 0\n    for k in range(1, n):\n        i += 1\n        while ludic[i] == 0:\n            i += 1\n        j += 1\n        if j == 2:\n            ludic[i] = 0\n            j = 0\n    return [x+1 for x in range(n) if ludic[x] == 1]\n",
        "s-26": "\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_nums = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2 or i == 3:\n            lucid_nums.append(i)\n        else:\n            count = 0\n            for j in lucid_nums:\n                if i % j == 0:\n                    count += 1\n                if count == 2:\n                    break\n            if count == 1:\n                lucid_nums.append(i)\n    return lucid_nums",
        "s-27": "\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    primes = []\n    composites = set()\n    ludics = [1]\n    for i in range(2, n+1):\n        if i not in composites:\n            primes.append(i)\n            for j in range(i*i, n+1, i):\n                composites.add(j)\n            if i in primes[1:]:\n                ludics.append(i)\n            elif all(i % prime != 0 for prime in primes[1:]):\n                ludics.append(i)\n    return ludics",
        "s-28": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while len(lucid_numbers) < n:\n        if i == 1:\n            lucid_numbers.append(i)\n            i += 1\n        else:\n            factors = [j for j in range(2, i) if i % j == 0]\n            if sum(factors) + 1 in lucid_numbers:\n                lucid_numbers.append(i)\n            i += 1\n    return lucid_numbers\n",
        "s-29": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize list with first lucid number\n    ludic_nums = [1]\n    \n    # initialize variables\n    curr_num = 2\n    divisor = 2\n    \n    # loop until desired number of ludic numbers is reached\n    while len(ludic_nums) < n:\n        # if current number is prime or has only 2 or 3 as factors, add to ludic_nums\n        if all(curr_num % i != 0 for i in range(2, int(curr_num ** 0.5) + 1)) or all(curr_num % i not in [2,3] for i in range(2, int(curr_num ** 0.5) + 1)):\n            ludic_nums.append(curr_num)\n        # increment current number and reset divisor to 2\n        curr_num += 1\n        divisor = 2\n        # divide by smallest possible divisor until no longer divisible\n        while curr_num % divisor != 0:\n            divisor += 1\n    \n    # return list of ludic numbers\n    return ludic_nums[:n]\n",
        "s-30": "\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if i == 1:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            if lucid_numbers[(i//2) - 1] % 2 == 0:\n                lucid_numbers.append(i)\n            else:\n                lucid_numbers.append(i)\n        else:\n            if lucid_numbers[(i//2)] % 2 != 0:\n                lucid_numbers.append(i)\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers\n",
        "s-31": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = [1]\n    multiple_of_2 = []\n    multiple_of_3 = []\n    multiple_of_5 = []\n    i = 1\n    while i <= n:\n        if i in lucid_nums:\n            lucid_nums.append(i * 2)\n            lucid_nums.append(i * 3)\n            lucid_nums.append(i * 5)\n        else:\n            if i not in multiple_of_2 and i not in multiple_of_3 and i not in multiple_of_5:\n                lucid_nums.append(i)\n            multiple_of_2.append(i * 2)\n            multiple_of_3.append(i * 3)\n            multiple_of_5.append(i * 5)\n        i += 1\n    return lucid_nums[:n]\n",
        "s-32": "\n    ludic_nums = [1]\n    p = 2\n    while len(ludic_nums) < n:\n        if all(p % num != 0 for num in ludic_nums):\n            ludic_nums.append(p)\n        p += 1\n    return ludic_nums[:n]\n",
        "s-33": "\n    ludic = [1] * n\n    result = []\n    for i in range(2, n + 1):\n        if ludic[i - 1] == 1:\n            result.append(i)\n            for j in range(i, n + 1, i):\n                ludic[j - 1] = 0 if j // i % 2 == 0 else 1\n    return result\n",
        "s-34": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n\n    ludic_numbers = [1]\n    current_number = 2\n\n    while len(ludic_numbers) < n:\n        if all(current_number % p != 0 for p in ludic_numbers):\n            ludic_numbers.append(current_number)\n        current_number += 1\n\n    return ludic_numbers\n",
        "s-35": "\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_primes(n):\n        primes = []\n        for i in range(2, n + 1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n\n    primes = get_primes(n)\n    ludic = [1]\n    for num in primes:\n        if num <= n:\n            ludic.append(num)\n    return ludic",
        "s-36": "\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n\n    A lucid number is a positive integer that can be represented as the sum of distinct powers of 2.\n    For example, 10 is a lucid number because it can be represented as 2^1 + 2^3. \n\n    Args:\n    n -- the maximum integer to check for lucid numbers\n\n    Returns:\n    A list of all lucid numbers smaller than or equal to n.\n    \"\"\"\n\n    lucid_numbers = [1]\n    current_number = 2\n\n    while current_number <= n:\n        count = 0\n        temp = current_number\n\n        while temp % 2 == 0:\n            temp //= 2\n            count += 1\n\n        if count <= len(lucid_numbers):\n            lucid_numbers.append(current_number)\n\n        current_number += 1\n\n    return lucid_numbers\n",
        "s-37": "\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = min(ludic[i] * 2, ludic[j] * 3, ludic[k] * 5)\n        ludic.append(next_ludic)\n        if next_ludic == ludic[i] * 2:\n            i += 1\n        if next_ludic == ludic[j] * 3:\n            j += 1\n        if next_ludic == ludic[k] * 5:\n            k += 1\n    return ludic[:n]\n",
        "s-38": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        ludics = [1]\n        counter = 1\n        while len(ludics) < n:\n            counter += 1\n            if all(counter % ludic != 0 for ludic in ludics):\n                ludics.append(counter)\n        return ludics\n",
        "s-39": "\n    nums = [1]\n    i2, i3, i5 = 0, 0, 0\n    while len(nums) < n:\n        num2, num3, num5 = nums[i2] * 2, nums[i3] * 3, nums[i5] * 5\n        next_num = min(num2, num3, num5)\n        if next_num == num2:\n            i2 += 1\n        if next_num == num3:\n            i3 += 1\n        if next_num == num5:\n            i5 += 1\n        nums.append(next_num)\n    return nums[:n]\n",
        "s-40": "\n    ludic_numbers = [1]\n    potential_ludic = 2\n    while len(ludic_numbers) < n:\n        if all(potential_ludic % p != 0 for p in ludic_numbers):\n            ludic_numbers.append(potential_ludic)\n        potential_ludic += 1\n    return ludic_numbers[:n]\n",
        "s-41": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    nums = [1]\n    i2, i3, i5 = 0, 0, 0\n    while len(nums) < n:\n        next_num = min(2 * nums[i2], 3 * nums[i3], 5 * nums[i5])\n        nums.append(next_num)\n        if next_num == 2 * nums[i2]:\n            i2 += 1\n        if next_num == 3 * nums[i3]:\n            i3 += 1\n        if next_num == 5 * nums[i5]:\n            i5 += 1\n    return nums[:n]\n",
        "s-42": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    current = 1\n    while len(ludic) < n:\n        if current == 1 or current % 2 == 0 or current % 3 == 0:\n            ludic.append(current)\n        current += 1\n    return ludic[:n]\n",
        "s-43": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = ludic[i]*2\n        if next_ludic not in ludic:\n            ludic.append(next_ludic)\n        next_ludic = ludic[j]*3\n        if next_ludic not in ludic:\n            ludic.append(next_ludic)\n        next_ludic = ludic[k]*5\n        if next_ludic not in ludic:\n            ludic.append(next_ludic)\n        i += 1\n        j += 1\n        k += 1\n    return ludic[:n]\n",
        "s-44": "\n    ludic_numbers = []\n    possible_ludic_numbers = list(range(1, n+1))\n    while possible_ludic_numbers:\n        ludic_numbers.append(possible_ludic_numbers[0])\n        possible_ludic_numbers = [num for i, num in enumerate(possible_ludic_numbers) if (i+1) % ludic_numbers[-1] != 0]\n    return ludic_numbers\n",
        "s-45": "\n    \"\"\"\n    Get all ludic numbers smaller than or equal to a given integer.\n\n    A ludic number is a number that can be obtained by adding or multiplying\n    other ludic numbers. The first ludic number is 1.\n\n    Args:\n        n (int): The integer upper bound for the list of ludic numbers.\n\n    Returns:\n        list: A list containing all ludic numbers smaller than or equal to `n`.\n\n    Raises:\n        ValueError: If `n` is not a positive integer.\n\n    Examples:\n        >>> get_ludic(20)\n        [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20]\n        >>> get_ludic(50)\n        [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 45, 48, 50]\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while True:\n        if ludic[i] * 2 <= ludic[j] * 3 and ludic[i] * 2 <= ludic[k] * 5:\n            ludic.append(ludic[i] * 2)\n            i += 1\n        elif ludic[j] * 3 <= ludic[i] * 2 and ludic[j] * 3 <= ludic[k] * 5:\n            ludic.append(ludic[j] * 3)\n            j += 1\n        elif ludic[k] * 5 <= ludic[i] * 2 and ludic[k] * 5 <= ludic[j] * 3:\n            ludic.append(ludic[k] * 5)\n            k += 1\n        if ludic[-1] >= n:\n            break\n    return ludic[:-1] if ludic[-1] > n else ludic\n",
        "s-46": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic_list) < n:\n        next_ludic = ludic_list[i]*2\n        if next_ludic not in ludic_list:\n            ludic_list.append(next_ludic)\n        i += 1\n        next_ludic = ludic_list[j]*3\n        if next_ludic not in ludic_list:\n            ludic_list.append(next_ludic)\n        j += 1\n        next_ludic = ludic_list[k]*5\n        if next_ludic not in ludic_list:\n            ludic_list.append(next_ludic)\n        k += 1\n    return ludic_list[:n]\n",
        "s-47": "\ndef get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    i = 1\n    while len(lucid_numbers) < n:\n        if i == 1:\n            lucid_numbers.append(i)\n            i += 1\n        else:\n            count = 0\n            for j in lucid_numbers:\n                if i % j == 0:\n                    count += 1\n                if count > 2:\n                    break\n            if count == 2 or i == 2:\n                lucid_numbers.append(i)\n            i += 1\n    return lucid_numbers\n",
        "s-48": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 1\n    \n    while len(lucid_numbers) < n:\n        if is_lucid(current_number):\n            lucid_numbers.append(current_number)\n        current_number += 1\n    \n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Helper function to check if a given number is a lucid number.\n    '''\n    if num == 1:\n        return True\n    for i in [2, 3, 5]:\n        if num % i == 0 and is_lucid(num // i):\n            return True\n    return False\n",
        "s-49": "\n    ludics = [1]\n    primes = []\n    composites = []\n    current = 2\n    while len(ludics) < n:\n        if all(current % p != 0 for p in primes):\n            primes.append(current)\n            ludics.append(current)\n        else:\n            composites.append(current)\n            if len(composites) == primes[0]:\n                current = composites.pop(0)\n                primes.pop(0)\n        current += 1\n    return ludics[:n]\n",
        "s-50": "\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = min(ludic[i]*2, ludic[j]*3, ludic[k]*5)\n        ludic.append(next_ludic)\n        if next_ludic == ludic[i]*2:\n            i += 1\n        if next_ludic == ludic[j]*3:\n            j += 1\n        if next_ludic == ludic[k]*5:\n            k += 1\n    return ludic[:n]\n",
        "s-51": "\n    result = []\n    ludic = [1]\n    while len(result) < n:\n        result.append(ludic[0])\n        ludic = ludic[1:] + [ludic[0] * 2, ludic[0] * 3]\n    return result\n",
        "s-52": "\n    primes = [2, 3, 5]\n    ludics = [1]\n    i, j, k = 0, 0, 0\n\n    while len(ludics) < n:\n        next_ludic = min(primes[i] * ludics[j], primes[k] * ludics[k])\n        ludics.append(next_ludic)\n\n        if next_ludic == primes[i] * ludics[j]:\n            i += 1\n        if next_ludic == primes[k] * ludics[k]:\n            k += 1\n            if primes[j + 1] == primes[k]:\n                j += 1\n\n    return ludics[:n]\n",
        "s-53": "\n    lucid_nums = [1]\n    i2, i3, i5 = 0, 0, 0\n    next_2, next_3, next_5 = 2, 3, 5\n\n    for i in range(1, n):\n        next_lucid = min(next_2, next_3, next_5)\n        lucid_nums.append(next_lucid)\n\n        if next_lucid == next_2:\n            i2 += 1\n            next_2 = lucid_nums[i2] * 2\n\n        if next_lucid == next_3:\n            i3 += 1\n            next_3 = lucid_nums[i3] * 3\n\n        if next_lucid == next_5:\n            i5 += 1\n            next_5 = lucid_nums[i5] * 5\n\n    return lucid_nums\n",
        "s-54": "\ndef get_ludic(n):\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_ludic_numbers(limit):\n        primes = []\n        ludic_numbers = [1]\n        for i in range(2, limit + 1):\n            if is_prime(i):\n                primes.append(i)\n        for prime in primes:\n            for ludic in ludic_numbers[:]:\n                if ludic * prime <= limit and ludic * prime not in ludic_numbers:\n                    ludic_numbers.append(ludic * prime)\n        return sorted(ludic_numbers)\n\n    return get_ludic_numbers(n)",
        "s-55": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = [1]\n    i, j, k = 0, 0, 0\n\n    while len(lucid_numbers) < n:\n        next_lucid = min(lucid_numbers[i] * 2, lucid_numbers[j] * 3, lucid_numbers[k] * 5)\n\n        lucid_numbers.append(next_lucid)\n\n        if next_lucid == lucid_numbers[i] * 2:\n            i += 1\n        if next_lucid == lucid_numbers[j] * 3:\n            j += 1\n        if next_lucid == lucid_numbers[k] * 5:\n            k += 1\n\n    return lucid_numbers[:n]\n",
        "s-56": "\n    lucid_numbers = [1]\n    i, j, k = 0, 0, 0\n    while len(lucid_numbers) < n:\n        next_lucid = min(lucid_numbers[i] * 2, lucid_numbers[j] * 3, lucid_numbers[k] * 5)\n        lucid_numbers.append(next_lucid)\n        if next_lucid == lucid_numbers[i] * 2:\n            i += 1\n        if next_lucid == lucid_numbers[j] * 3:\n            j += 1\n        if next_lucid == lucid_numbers[k] * 5:\n            k += 1\n    return lucid_numbers[:n]\n",
        "s-57": "\n    ludic_list = [1]\n    num = 2\n    \n    while len(ludic_list) < n:\n        for i in ludic_list:\n            if num % i == 0:\n                break\n        else:\n            ludic_list.append(num)\n        num += 1\n        \n    return ludic_list[:n]\n",
        "s-58": "\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = min(ludic[i]*2, ludic[j]*3, ludic[k]*5)\n        ludic.append(next_ludic)\n        if next_ludic == ludic[i]*2:\n            i += 1\n        if next_ludic == ludic[j]*3:\n            j += 1\n        if next_ludic == ludic[k]*5:\n            k += 1\n    return ludic[:n]\n",
        "s-59": "\n    primes = []  # to hold prime numbers\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in primes):\n            primes.append(num)\n    ludic = [1]\n    for i in range(len(primes)):\n        temp = []\n        for j in range(i, len(primes), primes[i]):\n            temp += ludic[j:]\n        ludic += temp\n    return ludic[:n]\n",
        "s-60": "\n    ludic_nums = []\n    i = 1\n    while len(ludic_nums) < n:\n        if i == 1:\n            ludic_nums.append(i)\n        elif all(i % num != 0 for num in ludic_nums):\n            ludic_nums.append(i)\n        i += 1\n    return ludic_nums\n",
        "s-61": "\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = min(ludic[i]*2, ludic[j]*3, ludic[k]*5)\n        ludic.append(next_ludic)\n        if next_ludic == ludic[i]*2:\n            i += 1\n        if next_ludic == ludic[j]*3:\n            j += 1\n        if next_ludic == ludic[k]*5:\n            k += 1\n    return ludic[:n]\n",
        "s-62": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = [1]\n    mults = []\n    for i in range(2, n+1):\n        if i not in mults:\n            lucids.append(i)\n            for j in range(i*i, n+1, i):\n                mults.append(j)\n    return lucids[:n]\n",
        "s-63": "\n    # A list to store all ludic numbers\n    ludic_numbers = []\n    # The first ludic number is 1\n    ludic_numbers.append(1)\n    # A list to store multiples of 2, 3, and 5\n    multiples = [[2, 0], [3, 0], [5, 0]]\n    # Loop until we have n ludic numbers\n    while len(ludic_numbers) < n:\n        # Find the minimum multiple\n        min_multiple = min([m[0] * ludic_numbers[m[1]] for m in multiples])\n        # Add the minimum multiple to the list of ludic numbers\n        ludic_numbers.append(min_multiple)\n        # Update the index of the multiple we used\n        for m in multiples:\n            if m[0] * ludic_numbers[m[1]] == min_multiple:\n                m[1] += 1\n    # Return the list of ludic numbers\n    return ludic_numbers[:n]\n",
        "s-64": "\n    ludic_numbers = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic_numbers) < n:\n        next_ludic = ludic_numbers[i] * 2\n        if next_ludic not in ludic_numbers:\n            ludic_numbers.append(next_ludic)\n        i += 1\n        next_ludic = ludic_numbers[j] * 3\n        if next_ludic not in ludic_numbers:\n            ludic_numbers.append(next_ludic)\n        j += 1\n        next_ludic = ludic_numbers[k] * 5\n        if next_ludic not in ludic_numbers:\n            ludic_numbers.append(next_ludic)\n        k += 1\n    return ludic_numbers[:n]\n",
        "s-65": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [1]\n    i2, i3, i5 = 0, 0, 0\n    next_i2, next_i3, next_i5 = 2, 3, 5\n    for i in range(1, n):\n        next_lucid = min(next_i2, next_i3, next_i5)\n        lucid.append(next_lucid)\n        if next_lucid == next_i2:\n            i2 += 1\n            next_i2 = lucid[i2] * 2\n        if next_lucid == next_i3:\n            i3 += 1\n            next_i3 = lucid[i3] * 3\n        if next_lucid == next_i5:\n            i5 += 1\n            next_i5 = lucid[i5] * 5\n    return lucid[:n]\n",
        "s-66": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = ludic[i] * 2\n        next_ludic += ludic[j] * 3\n        next_ludic += ludic[k] * 5\n        ludic.append(next_ludic)\n        if ludic[-1] == ludic[i] * 2:\n            i += 1\n        if ludic[-1] == ludic[j] * 3:\n            j += 1\n        if ludic[-1] == ludic[k] * 5:\n            k += 1\n    return ludic[:n]\n",
        "s-67": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = min(ludic[i] * 2, ludic[j] * 3, ludic[k] * 5)\n        ludic.append(next_ludic)\n        if next_ludic == ludic[i] * 2:\n            i += 1\n        if next_ludic == ludic[j] * 3:\n            j += 1\n        if next_ludic == ludic[k] * 5:\n            k += 1\n    return ludic[:n]\n",
        "s-68": "\n    ludic_numbers = [1]\n    counter = 2\n    \n    while len(ludic_numbers) < n:\n        if all(counter % num != 0 for num in ludic_numbers):\n            ludic_numbers.append(counter)\n        counter += 1\n    \n    return ludic_numbers\n",
        "s-69": "\n    primes = []\n    is_lucid = [False] * (n+1)\n    is_lucid[0] = True\n    is_lucid[1] = True\n\n    for i in range(2, n+1):\n        if not is_lucid[i]:\n            primes.append(i)\n            for j in range(i*i, n+1, i):\n                is_lucid[j] = True\n\n    ludic = []\n    for i in range(len(primes)):\n        for j in range(primes[i], n+1, primes[i]):\n            is_lucid[j] = True\n\n        if i == len(primes) - 1:\n            break\n\n        for j in range(primes[i+1], primes[i]*2):\n            is_lucid[j] = False\n\n    for i in range(1, n+1):\n        if is_lucid[i]:\n            ludic.append(i)\n\n    return ludic\n",
        "s-70": "\n    # Initialize a list with first two lucid numbers\n    ludic_numbers = [1, 2]\n    \n    # Initialize a list with all numbers from 3 to n\n    all_numbers = list(range(3, n+1))\n    \n    # Loop through all the numbers in the all_numbers list\n    for num in all_numbers:\n        for ludic_num in ludic_numbers[1:]:\n            if num % ludic_num == 0:\n                # If the number is divisible by any lucid number other than 1, break the loop and move on to the next number\n                break\n        else:\n            # If the loop completes without any breaks, that means the number is not divisible by any lucid number other than 1, so it is a lucid number. Append it to the list of ludic numbers.\n            ludic_numbers.append(num)\n            \n    return ludic_numbers[:n]\n",
        "s-71": "\n    lucid_nums = [1]\n    i, j, k = 0, 0, 0\n    while len(lucid_nums) < n:\n        num = lucid_nums[i] * 2\n        if num not in lucid_nums:\n            lucid_nums.append(num)\n        num = lucid_nums[j] * 3\n        if num not in lucid_nums:\n            lucid_nums.append(num)\n        num = lucid_nums[k] * 5\n        if num not in lucid_nums:\n            lucid_nums.append(num)\n        i += 1\n        j += 1\n        k += 1\n    return lucid_nums[:n]\n",
        "s-72": "\n    \"\"\"\n    Returns a list of all Ludic numbers smaller than or equal to n.\n\n    A Ludic number is a positive integer that can be expressed as the sum of a unique subset of the\n    prime numbers {2, 3, 5}.\n\n    Args:\n        n: An integer\n\n    Returns:\n        A list of Ludic numbers less than or equal to n\n\n    \"\"\"\n    primes = [2, 3, 5]  # list of prime numbers\n    ludics = [1]  # list of Ludic numbers\n    for i in range(1, n):\n        if i in ludics:\n            continue\n        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n            for j in primes:\n                if i < j:\n                    break\n                if i % j == 0 and (i // j) in ludics:\n                    ludics.append(i)\n                    break\n    return ludics\n",
        "s-73": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    i = 1\n    while i <= n:\n        if i == 1:\n            result.append(1)\n        else:\n            is_ludic = True\n            for j in result:\n                if i % j == 0:\n                    is_ludic = False\n                    break\n            if is_ludic:\n                result.append(i)\n        i += 1\n    return result\n",
        "s-74": "\n    ludics = [1]\n    i2, i3, i5 = 0, 0, 0\n    next_ludic = 2\n    \n    while next_ludic <= n:\n        ludics.append(next_ludic)\n        next_ludic = ludics[i2] * 2\n        \n        if next_ludic == ludics[i3] * 3:\n            i3 += 1\n            next_ludic = ludics[i3] * 3\n        \n        if next_ludic == ludics[i5] * 5:\n            i5 += 1\n            next_ludic = ludics[i5] * 5\n        \n        i2 += 1\n    \n    return ludics\n",
        "s-75": "\n    primes = [2, 3, 5]\n    lucid = [1]\n    i = 1\n    p = 0\n    q = 0\n    r = 0\n    \n    while i < n:\n        i += 1\n        \n        if i == primes[p]:\n            p += 1\n            lucid.append(i)\n        \n        elif i == lucid[q]*2:\n            q += 1\n            lucid.append(i)\n        \n        elif i == lucid[r]*3:\n            r += 1\n            lucid.append(i)\n    \n    return lucid[:n]\n",
        "s-76": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [1]\n    current_number = 2\n    \n    while len(lucid_numbers) < n:\n        is_lucid = True\n        \n        for num in lucid_numbers[1:]:\n            if current_number % num == 0:\n                is_lucid = False\n                break\n        \n        if is_lucid:\n            lucid_numbers.append(current_number)\n        \n        current_number += 1\n    \n    return lucid_numbers[:n]\n",
        "s-77": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [1]\n    i, j, k = 0, 0, 0\n\n    while len(ludic_nums) < n:\n        next_num = ludic_nums[i] * 2\n        if next_num not in ludic_nums:\n            ludic_nums.append(next_num)\n        i += 1\n\n        next_num = ludic_nums[j] * 3\n        if next_num not in ludic_nums:\n            ludic_nums.append(next_num)\n        j += 1\n\n        next_num = ludic_nums[k] * 5\n        if next_num not in ludic_nums:\n            ludic_nums.append(next_num)\n        k += 1\n\n    return ludic_nums[:n]\n",
        "s-78": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [1] * n\n    result = []\n    for i in range(2, n+1):\n        if ludic_numbers[i-1] == 1:\n            result.append(i)\n            for j in range(i, n+1, i):\n                ludic_numbers[j-1] = 0\n    return result\n",
        "s-79": "\n    ludic = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic) < n:\n        next_ludic = min(ludic[i] * 2, ludic[j] * 3, ludic[k] * 5)\n        ludic.append(next_ludic)\n        if next_ludic == ludic[i] * 2:\n            i += 1\n        if next_ludic == ludic[j] * 3:\n            j += 1\n        if next_ludic == ludic[k] * 5:\n            k += 1\n    return ludic[:n]\n",
        "s-80": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = [1]\n    i2, i3, i5 = 0, 0, 0\n    for i in range(n):\n        next_lucid = min(lucids[i2] * 2, lucids[i3] * 3, lucids[i5] * 5)\n        lucids.append(next_lucid)\n        if next_lucid == lucids[i2] * 2:\n            i2 += 1\n        if next_lucid == lucids[i3] * 3:\n            i3 += 1\n        if next_lucid == lucids[i5] * 5:\n            i5 += 1\n    return [l for l in lucids if l <= n]\n",
        "s-81": "\n    \"\"\"\n    This function returns all ludic numbers smaller than or equal to n.\n    A ludic number is a number that can be formed by iterating over a sequence of numbers,\n    where the first number is 1 and each subsequent number is the next prime number greater than\n    the previous number in the sequence.\n    \"\"\"\n    primes = [2]\n    ludic = [1]\n    i = 2\n    while i <= n:\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n            if i <= n:\n                ludic.append(i)\n        i += 1\n    i = 1\n    while i < len(ludic):\n        j = ludic[i] - 1\n        while j >= i:\n            ludic.pop(j)\n            j -= i\n        i += 1\n    return ludic\n",
        "s-82": "\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [1]\n    curr_num = 2\n    \n    while curr_num <= n:\n        is_ludic = True\n        for num in ludic_nums[1:]:\n            if curr_num % num == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludic_nums.append(curr_num)\n        curr_num += 1\n    \n    return ludic_nums\n",
        "s-83": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [1]\n    i, j, k = 0, 0, 0\n    while i < n:\n        next_lucid = lucid_numbers[i] * 2\n        if next_lucid not in lucid_numbers:\n            lucid_numbers.append(next_lucid)\n        if j == k:\n            next_lucid = lucid_numbers[i] * 3\n            if next_lucid not in lucid_numbers:\n                lucid_numbers.append(next_lucid)\n            j += 1\n        if k < j:\n            next_lucid = lucid_numbers[i] * 5\n            if next_lucid not in lucid_numbers:\n                lucid_numbers.append(next_lucid)\n            k += 1\n        i += 1\n    return lucid_numbers[:n]\n",
        "s-84": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = [1] * (n+1)\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if lucids[i]:\n            ludic_numbers.append(i)\n            for j in range(i, n+1, i):\n                lucids[j] = 0 if j != i else 1\n    return ludic_numbers\n",
        "s-85": "\n    ludic_nums = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic_nums) < n:\n        next_num = min(ludic_nums[i]*2, ludic_nums[j]*3, ludic_nums[k]*5)\n        ludic_nums.append(next_num)\n        if next_num == ludic_nums[i]*2:\n            i += 1\n        if next_num == ludic_nums[j]*3:\n            j += 1\n        if next_num == ludic_nums[k]*5:\n            k += 1\n    return ludic_nums[:n]\n",
        "s-86": "\n    \"\"\"\n    Get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = [1]\n    i2, i3, i5 = 0, 0, 0\n    next_lucid = 2\n    while next_lucid <= n:\n        lucid_numbers.append(next_lucid)\n        next_lucid = min(2*lucid_numbers[i2], 3*lucid_numbers[i3], 5*lucid_numbers[i5])\n        if next_lucid == 2*lucid_numbers[i2]:\n            i2 += 1\n        if next_lucid == 3*lucid_numbers[i3]:\n            i3 += 1\n        if next_lucid == 5*lucid_numbers[i5]:\n            i5 += 1\n    return lucid_numbers\n",
        "s-87": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return []\n    lucids = [1]\n    p2, p3, p5 = 0, 0, 0\n    for i in range(1, n):\n        lucid = min(lucids[p2]*2, lucids[p3]*3, lucids[p5]*5)\n        lucids.append(lucid)\n        if lucid == lucids[p2]*2:\n            p2 += 1\n        if lucid == lucids[p3]*3:\n            p3 += 1\n        if lucid == lucids[p5]*5:\n            p5 += 1\n    return lucids\n",
        "s-88": "\ndef get_ludic(n):\n    primes = []\n    candidates = list(range(2, n+1))\n    while candidates:\n        next_prime = candidates[0]\n        primes.append(next_prime)\n        candidates = [c for c in candidates if c % next_prime != 0]\n    ludic = []\n    for i in range(1, n+1):\n        if i in primes[:len(primes)//2+1] or i == 1:\n            ludic.append(i)\n        elif i % 2 != 0 and i % 3 != 0:\n            ludic.append(i)\n    return ludic",
        "s-89": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = [1]\n    num = 2\n    while len(ludic_list) < n:\n        if all(num % i != 0 for i in ludic_list):\n            ludic_list.append(num)\n        num += 1\n    return ludic_list\n",
        "s-90": "\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    ludics = [1]\n    i = 2\n    while len(ludics) < n:\n        if all(i % p != 0 for p in ludics):\n            ludics.append(i)\n        i += 1\n    return ludics\n",
        "s-91": "\n    ludic_numbers = [1]\n    i, j, k = 0, 0, 0\n    while len(ludic_numbers) < n:\n        next_ludic = ludic_numbers[i]*2\n        if next_ludic > ludic_numbers[j]*3:\n            j += 1\n            next_ludic = ludic_numbers[j]*3\n        if next_ludic > ludic_numbers[k]*5:\n            k += 1\n            next_ludic = ludic_numbers[k]*5\n        i += 1\n        ludic_numbers.append(next_ludic)\n    return ludic_numbers[:n]\n",
        "s-92": "\n    primes = [2, 3, 5]\n    ludic = [1]\n    index = 0\n    p = primes[index]\n\n    while ludic[-1] < n:\n        if p <= ludic[-1]:\n            index += 1\n            p = primes[index]\n        else:\n            ludic.append(p)\n            for prime in primes:\n                next_num = p * prime\n                if next_num > ludic[-1]:\n                    primes.append(next_num)\n            primes.sort()\n            index += 1\n            p = primes[index]\n\n    return ludic[:-1]\n",
        "s-93": "\n    lucid = [1]\n    i, j, k = 0, 0, 0\n    while len(lucid) < n:\n        next_lucid = min(lucid[i] * 2, lucid[j] * 3, lucid[k] * 5)\n        lucid.append(next_lucid)\n        if next_lucid == lucid[i] * 2:\n            i += 1\n        if next_lucid == lucid[j] * 3:\n            j += 1\n        if next_lucid == lucid[k] * 5:\n            k += 1\n    return lucid[:n]\n",
        "s-94": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    i = 1\n    while len(ludic_nums) < n:\n        if i == 1:\n            ludic_nums.append(i)\n            i += 1\n        else:\n            factors = [num for num in range(2, i) if i % num == 0]\n            if len(factors) <= 1:\n                ludic_nums.append(i)\n            i += 1\n    return ludic_nums\n",
        "s-95": "\n    ludic_numbers = [1]\n    p = 2\n    while len(ludic_numbers) < n:\n        if all(p % num != 0 for num in ludic_numbers):\n            ludic_numbers.append(p)\n        p += 1\n    return ludic_numbers[:n]\n",
        "s-96": "\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        return []\n    \n    ludic_nums = [1]\n    if n == 1:\n        return ludic_nums\n    \n    multiples_of_two = [2 * i for i in range(1, n // 2 + 1)]\n    multiples_of_three = [3 * i for i in range(1, n // 3 + 1)]\n    multiples_of_five = [5 * i for i in range(1, n // 5 + 1)]\n    \n    merged_multiples = sorted(set(multiples_of_two + multiples_of_three + multiples_of_five))\n\n    while len(ludic_nums) < n:\n        ludic_nums.append(merged_multiples[0])\n        merged_multiples = [num for num in merged_multiples[1:] if num % ludic_nums[-1] != 0]\n    \n    return ludic_nums\n",
        "s-97": "\n    lucid_numbers = [1]\n    i, j, k = 0, 0, 0\n    while len(lucid_numbers) < n:\n        next_lucid = min(lucid_numbers[i] * 2, lucid_numbers[j] * 3, lucid_numbers[k] * 5)\n        lucid_numbers.append(next_lucid)\n        if next_lucid == lucid_numbers[i] * 2:\n            i += 1\n        if next_lucid == lucid_numbers[j] * 3:\n            j += 1\n        if next_lucid == lucid_numbers[k] * 5:\n            k += 1\n    return lucid_numbers[:n]\n",
        "s-98": "\n    ludic_numbers = [1]\n    i, j, k = 0, 0, 0\n    \n    while len(ludic_numbers) < n:\n        next_ludic = ludic_numbers[i] * 2\n        if next_ludic not in ludic_numbers:\n            ludic_numbers.append(next_ludic)\n        i += 1\n        \n        next_ludic = ludic_numbers[j] * 3\n        if next_ludic not in ludic_numbers:\n            ludic_numbers.append(next_ludic)\n        j += 1\n        \n        next_ludic = ludic_numbers[k] * 5\n        if next_ludic not in ludic_numbers:\n            ludic_numbers.append(next_ludic)\n        k += 1\n    \n    return [x for x in ludic_numbers if x <= n]\n",
        "s-99": "\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = [1]\n    i2, i3, i5 = 0, 0, 0\n    for i in range(1, n):\n        next_ludic = min(ludic_nums[i2]*2, ludic_nums[i3]*3, ludic_nums[i5]*5)\n        ludic_nums.append(next_ludic)\n        if next_ludic == ludic_nums[i2]*2:\n            i2 += 1\n        if next_ludic == ludic_nums[i3]*3:\n            i3 += 1\n        if next_ludic == ludic_nums[i5]*5:\n            i5 += 1\n    return [num for num in ludic_nums if num <= n]\n"
    }
}