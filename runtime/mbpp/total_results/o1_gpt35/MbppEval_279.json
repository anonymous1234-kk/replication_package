{
    "task_id": "MbppEval/279",
    "iter_num": 48,
    "already_test_oracle_gt": {
        "t-41": 1
    },
    "pass_num_dict": {
        "s-0": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-1": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-2": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-3": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-4": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-5": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-9": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-10": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-15": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-18": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-21": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-22": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-24": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-31": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-34": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-37": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-38": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-42": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-44": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-45": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-50": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-54": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-56": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-58": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-59": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-61": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-62": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-63": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-65": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-66": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-67": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-68": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-69": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-73": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-75": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-76": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-80": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-82": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-87": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-89": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-90": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-93": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-94": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-95": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-96": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-99": [
            "t-21",
            "t-31",
            "t-41"
        ],
        "s-6": [
            "t-21",
            "t-31"
        ],
        "s-8": [
            "t-21",
            "t-31"
        ],
        "s-11": [
            "t-21",
            "t-31"
        ],
        "s-12": [
            "t-21",
            "t-31"
        ],
        "s-13": [
            "t-21",
            "t-31"
        ],
        "s-14": [
            "t-21",
            "t-31"
        ],
        "s-17": [
            "t-21",
            "t-31"
        ],
        "s-20": [
            "t-21",
            "t-31"
        ],
        "s-23": [
            "t-21",
            "t-31"
        ],
        "s-26": [
            "t-21",
            "t-31"
        ],
        "s-29": [
            "t-21",
            "t-31"
        ],
        "s-32": [
            "t-21",
            "t-31"
        ],
        "s-33": [
            "t-21",
            "t-31"
        ],
        "s-35": [
            "t-21",
            "t-31"
        ],
        "s-36": [
            "t-21",
            "t-31"
        ],
        "s-39": [
            "t-21",
            "t-31"
        ],
        "s-41": [
            "t-21",
            "t-31"
        ],
        "s-43": [
            "t-21",
            "t-31"
        ],
        "s-46": [
            "t-21",
            "t-31"
        ],
        "s-47": [
            "t-21",
            "t-31"
        ],
        "s-48": [
            "t-21",
            "t-31"
        ],
        "s-49": [
            "t-21",
            "t-31"
        ],
        "s-51": [
            "t-21",
            "t-31"
        ],
        "s-52": [
            "t-21",
            "t-31"
        ],
        "s-53": [
            "t-21",
            "t-31"
        ],
        "s-55": [
            "t-21",
            "t-31"
        ],
        "s-57": [
            "t-21",
            "t-31"
        ],
        "s-60": [
            "t-21",
            "t-31"
        ],
        "s-70": [
            "t-21",
            "t-31"
        ],
        "s-71": [
            "t-21",
            "t-31"
        ],
        "s-77": [
            "t-21",
            "t-31"
        ],
        "s-78": [
            "t-21",
            "t-31"
        ],
        "s-79": [
            "t-21",
            "t-31"
        ],
        "s-81": [
            "t-21",
            "t-31"
        ],
        "s-84": [
            "t-21",
            "t-31"
        ],
        "s-88": [
            "t-21",
            "t-31"
        ],
        "s-91": [
            "t-21",
            "t-31"
        ],
        "s-92": [
            "t-21",
            "t-31"
        ],
        "s-97": [
            "t-21",
            "t-31"
        ],
        "s-7": [
            "t-41"
        ],
        "s-16": [
            "t-41"
        ],
        "s-19": [
            "t-41"
        ],
        "s-25": [
            "t-41"
        ],
        "s-28": [
            "t-41"
        ],
        "s-30": [
            "t-41"
        ],
        "s-40": [
            "t-41"
        ],
        "s-64": [
            "t-41"
        ],
        "s-72": [
            "t-41"
        ],
        "s-74": [
            "t-41"
        ],
        "s-83": [
            "t-41"
        ],
        "s-85": [
            "t-41"
        ],
        "s-98": [
            "t-41"
        ],
        "s-27": [],
        "s-86": []
    },
    "code_test_output": {
        "s-0": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-1": {
            "t-21": false,
            "t-31": false,
            "t-41": 1
        },
        "s-2": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-3": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-4": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-5": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-6": {
            "t-21": false,
            "t-31": false,
            "t-41": 10
        },
        "s-7": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-8": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-9": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-10": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-11": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-12": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-13": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-14": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-15": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-16": {
            "t-21": null,
            "t-31": null,
            "t-41": 1
        },
        "s-17": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-18": {
            "t-21": false,
            "t-31": false,
            "t-41": 1
        },
        "s-19": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-20": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 2
        },
        "s-21": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-22": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-23": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 2
        },
        "s-24": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-25": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-26": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-27": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-28": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-29": {
            "t-21": -0.0,
            "t-31": -0.0,
            "t-41": 7.0
        },
        "s-30": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-31": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-32": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-33": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-34": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-35": {
            "t-21": false,
            "t-31": false,
            "t-41": false
        },
        "s-36": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-37": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-38": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-39": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 2
        },
        "s-40": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-41": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-42": {
            "t-21": false,
            "t-31": false,
            "t-41": 1
        },
        "s-43": {
            "t-21": -0.0,
            "t-31": -0.0,
            "t-41": 7.0
        },
        "s-44": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-45": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-46": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-47": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-48": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-49": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-50": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-51": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 2
        },
        "s-52": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-53": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-54": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-55": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-56": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-57": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-58": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-59": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-60": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-61": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-62": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-63": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-64": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-65": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-66": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-67": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-68": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-69": {
            "t-21": false,
            "t-31": false,
            "t-41": 1
        },
        "s-70": {
            "t-21": false,
            "t-31": false,
            "t-41": false
        },
        "s-71": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-72": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-73": {
            "t-21": false,
            "t-31": false,
            "t-41": 1
        },
        "s-74": {
            "t-21": 1,
            "t-31": 1,
            "t-41": 1
        },
        "s-75": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-76": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-77": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-78": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 2
        },
        "s-79": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 2
        },
        "s-80": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-81": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-82": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-83": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-84": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-85": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-86": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-87": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-88": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-89": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-90": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-91": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-92": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 10
        },
        "s-93": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-94": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-95": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 1.0
        },
        "s-96": {
            "t-21": 0,
            "t-31": 0,
            "t-41": 1
        },
        "s-97": {
            "t-21": 0.0,
            "t-31": 0.0,
            "t-41": 10.0
        },
        "s-98": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-99": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        }
    },
    "code_test_res": {
        "s-0": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-1": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-2": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-3": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-4": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-5": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-6": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-7": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-8": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-9": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-10": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-11": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-12": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-13": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-14": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-15": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-16": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-17": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-18": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-19": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-20": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-21": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-22": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-23": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-24": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-25": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-26": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-27": {
            "t-21": false,
            "t-31": false,
            "t-41": false
        },
        "s-28": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-29": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-30": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-31": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-32": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-33": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-34": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-35": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-36": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-37": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-38": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-39": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-40": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-41": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-42": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-43": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-44": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-45": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-46": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-47": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-48": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-49": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-50": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-51": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-52": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-53": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-54": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-55": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-56": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-57": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-58": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-59": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-60": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-61": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-62": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-63": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-64": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-65": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-66": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-67": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-68": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-69": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-70": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-71": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-72": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-73": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-74": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-75": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-76": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-77": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-78": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-79": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-80": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-81": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-82": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-83": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-84": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-85": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-86": {
            "t-21": false,
            "t-31": false,
            "t-41": false
        },
        "s-87": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-88": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-89": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-90": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-91": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-92": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-93": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-94": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-95": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-96": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        },
        "s-97": {
            "t-21": true,
            "t-31": true,
            "t-41": false
        },
        "s-98": {
            "t-21": false,
            "t-31": false,
            "t-41": true
        },
        "s-99": {
            "t-21": true,
            "t-31": true,
            "t-41": true
        }
    },
    "solution_dict": {
        "s-0": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = (3 * n * n - n) // 2   # formula for calculating nth decagonal number\n    return decagonal_num\n",
        "s-1": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    else:\n        decagonal_num = n*(3*n - 1)//2\n        return decagonal_num\n",
        "s-2": " \n    decagonal_num = (3*n**2 - n) // 2\n    return decagonal_num\n",
        "s-3": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n \n    return n * (4 * n - 3)",
        "s-4": "\n    decagonal_num = (3 * n * n - n) / 2\n    return decagonal_num\n",
        "s-5": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return 3 * n * n - 2 * n\n",
        "s-6": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    else:\n        return n*(3*n-1)//2*10\n",
        "s-7": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = 3 * n * (n - 1) + 1\n    return decagonal_number\n",
        "s-8": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)/2*10\n",
        "s-9": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n**2 - 2 * n)",
        "s-10": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - n) / 2\n",
        "s-11": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-12": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3*n - 1) // 2 * 10\n",
        "s-13": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-14": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)/2*10\n",
        "s-15": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return (3*n*n - 2*n)",
        "s-16": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - n) // 2 if n >= 1 else None",
        "s-17": "\n    return n*(3*n-1)//2*10\n",
        "s-18": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n <= 0:\n        return False\n    else:\n        return (7 * n * n - 5 * n) // 2",
        "s-19": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n \n    return 5 * n * (n - 1) // 2 + 1",
        "s-20": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (9 * n - 7)\n",
        "s-21": "\ndef is_num_decagonal(n): \n    return n * (4 * n - 3)",
        "s-22": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - n) / 2\n",
        "s-23": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    \"\"\"\n    Returns the nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 1)\n",
        "s-24": "\n    decagonal_num = (3 * n**2 - n) // 2\n    return decagonal_num\n",
        "s-25": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return 3 * n * (n - 1) + 1\n",
        "s-26": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n - 1)//2 * 10\n",
        "s-27": "\n    return ((3 * n - 2) * n) == int(((3 * n - 2) * n) / 10) * 10\n",
        "s-28": "\n    decagonal_number = 3 * n * (n - 1) + 1\n    return decagonal_number\n",
        "s-29": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3*n - 1) / 2 * (10*n - 3)\n",
        "s-30": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return 3 * n * (n - 1) + 1",
        "s-31": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3*n - 1) // 2\n",
        "s-32": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-2)*10\n",
        "s-33": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n - 1)//2 * 10\n",
        "s-34": "\n    decagonal_num = (3 * n ** 2 - n) / 2\n    return decagonal_num\n",
        "s-35": "\n    return (3 * n ** 2 - 2 * n) == 10 * (n - 1)\n",
        "s-36": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3*n - 1) / 2 * 10\n",
        "s-37": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "s-38": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n \n    return n * (3 * n - 2)",
        "s-39": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (9*n - 7)\n",
        "s-40": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3*n*(n-1))+1\n",
        "s-41": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2*10\n",
        "s-42": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    return 5 * n * (n - 1) + 1",
        "s-43": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * (10 * n - 3)\n",
        "s-44": "\n    decagonal_num = (3 * n**2 - n) // 2\n    return decagonal_num\n",
        "s-45": "\n    decagonal_number = (3 * n ** 2 - n) // 2\n    return decagonal_number\n",
        "s-46": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-47": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-48": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2*10\n",
        "s-49": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) // 2 * 10\n",
        "s-50": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "s-51": "\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 2 * n + 1)\n",
        "s-52": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-53": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2*10\n",
        "s-54": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return n * (7 * n - 5) // 2",
        "s-55": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-56": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(4*n-3)",
        "s-57": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-58": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3*n*n - n)/2\n",
        "s-59": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n \n    if n < 1:\n        return False\n    else:\n        return n * (7 * n - 5) == 2",
        "s-60": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2*10\n",
        "s-61": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Formula for nth decagonal number is: 3n^2 - 2n\n    decagonal_num = 3 * n**2 - 2 * n\n    return decagonal_num",
        "s-62": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n - 2) * n\n",
        "s-63": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - n) / 2\n",
        "s-64": "\n    decagonal_num = 3 * n * (n - 1) + 1\n    return decagonal_num\n",
        "s-65": "\n    decagonal_num = (3 * n * n - n) // 2\n    return decagonal_num\n",
        "s-66": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (7*n - 5) / 2",
        "s-67": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return n*(3*n-1)//2",
        "s-68": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return n * (3 * n - 2)",
        "s-69": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n <= 0:\n        return False\n    else:\n        decagonal_num = n * (3*n - 2)\n        return decagonal_num",
        "s-70": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 2) == 10 * n - 7\n",
        "s-71": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2 * 10\n",
        "s-72": "\n    '''\n    Returns True if n is a decagonal number, else returns False.\n    '''\n    decagonal = (3 * n * n - n) // 2   # formula to calculate decagonal number\n    i = 1\n    while True:\n        num = i * decagonal\n        if num == n:\n            return True\n        elif num > n:\n            return False\n        i += 1\n",
        "s-73": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return n * (3 * n - 2) if n > 0 else False\n",
        "s-74": "\n    decagonal = (3 * n * (n - 1)) + 1\n    return decagonal\n",
        "s-75": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 2) if n > 0 else 0\n",
        "s-76": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n \n    return n*(3*n-2)",
        "s-77": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-78": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (9 * n - 7)\n",
        "s-79": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return (3 * n - 1) * n\n",
        "s-80": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - n) / 2\n",
        "s-81": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)/2*10\n",
        "s-82": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 2)",
        "s-83": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 == n * (7 * n - 5) / 2\n",
        "s-84": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) // 2 * 10\n",
        "s-85": "\n    decagonal = (3 * n * n - n) / 2\n    if decagonal.is_integer():\n        return True\n    else:\n        return False\n",
        "s-86": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n ** 2 - 2 * n) == n * (7 * n - 5)\n",
        "s-87": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * (n**2) - n) / 2\n",
        "s-88": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2*10\n",
        "s-89": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - 2 * n)\n",
        "s-90": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return n * (3 * n - 2)\n",
        "s-91": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)/2*10\n",
        "s-92": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)//2*10\n",
        "s-93": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - n) // 2\n",
        "s-94": " \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "s-95": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (3 * n * n - n) / 2\n",
        "s-96": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return n * (3 * n - 1) // 2",
        "s-97": "\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2 * 10\n",
        "s-98": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return (3 * n ** 2 - 2 * n) == n\n",
        "s-99": "\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    return ((3 * n - 1) * n) == (5 * n - 3)"
    }
}