{
    "task_id": "MbppEval/765",
    "iter_num": 44,
    "already_test_oracle_gt": {
        "t-32": 6
    },
    "pass_num_dict": {
        "s-29": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31",
            "t-32"
        ],
        "s-2": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-7": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-8": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-12": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-32": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-33": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-34": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-36": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-39": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-44": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-45": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-47": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-56": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-58": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-60": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-68": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-70": [
            "t-0",
            "t-1",
            "t-10",
            "t-11",
            "t-30",
            "t-31"
        ],
        "s-20": [
            "t-1",
            "t-11",
            "t-31",
            "t-32"
        ],
        "s-3": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-4": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-10": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-11": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-13": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-14": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-18": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-19": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-22": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-26": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-28": [
            "t-1",
            "t-11",
            "t-31"
        ],
        "s-30": [
            "t-1",
            "t-11",
            "t-31"
        ],
        "s-37": [
            "t-1",
            "t-11",
            "t-31"
        ],
        "s-41": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-42": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-49": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-59": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-62": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-67": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-69": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-71": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-72": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-74": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-75": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-76": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-77": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-78": [
            "t-1",
            "t-11",
            "t-31"
        ],
        "s-79": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-80": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-82": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-83": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-87": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-88": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-91": [
            "t-1",
            "t-11",
            "t-31"
        ],
        "s-95": [
            "t-0",
            "t-10",
            "t-30"
        ],
        "s-6": [
            "t-32"
        ],
        "s-17": [
            "t-32"
        ],
        "s-25": [
            "t-32"
        ],
        "s-27": [
            "t-32"
        ],
        "s-53": [
            "t-32"
        ],
        "s-93": [
            "t-32"
        ],
        "s-0": [],
        "s-1": [],
        "s-5": [],
        "s-9": [],
        "s-15": [],
        "s-16": [],
        "s-21": [],
        "s-23": [],
        "s-24": [],
        "s-31": [],
        "s-35": [],
        "s-38": [],
        "s-40": [],
        "s-43": [],
        "s-46": [],
        "s-48": [],
        "s-50": [],
        "s-51": [],
        "s-52": [],
        "s-54": [],
        "s-55": [],
        "s-57": [],
        "s-61": [],
        "s-63": [],
        "s-64": [],
        "s-65": [],
        "s-66": [],
        "s-73": [],
        "s-81": [],
        "s-84": [],
        "s-85": [],
        "s-86": [],
        "s-89": [],
        "s-90": [],
        "s-92": [],
        "s-94": [],
        "s-96": [],
        "s-97": [],
        "s-98": [],
        "s-99": []
    },
    "code_test_output": {
        "s-0": {
            "t-0": 3,
            "t-1": false,
            "t-10": 3,
            "t-11": false,
            "t-30": 3,
            "t-31": false,
            "t-32": false
        },
        "s-1": {
            "t-0": 2,
            "t-1": 3,
            "t-10": 2,
            "t-11": 3,
            "t-30": 2,
            "t-31": 3,
            "t-32": 4
        },
        "s-2": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 5
        },
        "s-3": {
            "t-0": 1,
            "t-1": null,
            "t-10": 1,
            "t-11": null,
            "t-30": 1,
            "t-31": null,
            "t-32": 11
        },
        "s-4": {
            "t-0": 1,
            "t-1": 1,
            "t-10": 1,
            "t-11": 1,
            "t-30": 1,
            "t-31": 1,
            "t-32": 1
        },
        "s-5": {
            "t-0": 2,
            "t-1": 3,
            "t-10": 2,
            "t-11": 3,
            "t-30": 2,
            "t-31": 3,
            "t-32": 5
        },
        "s-6": {
            "t-0": 3,
            "t-1": 5,
            "t-10": 3,
            "t-11": 5,
            "t-30": 3,
            "t-31": 5,
            "t-32": 6
        },
        "s-7": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-8": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-9": {
            "t-0": null,
            "t-1": true,
            "t-10": null,
            "t-11": true,
            "t-30": null,
            "t-31": true,
            "t-32": true
        },
        "s-10": {
            "t-0": 1,
            "t-1": null,
            "t-10": 1,
            "t-11": null,
            "t-30": 1,
            "t-31": null,
            "t-32": null
        },
        "s-11": {
            "t-0": 1,
            "t-1": 4,
            "t-10": 1,
            "t-11": 4,
            "t-30": 1,
            "t-31": 4,
            "t-32": 4
        },
        "s-12": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 2
        },
        "s-13": {
            "t-0": 1,
            "t-1": -1,
            "t-10": 1,
            "t-11": -1,
            "t-30": 1,
            "t-31": -1,
            "t-32": 2
        },
        "s-14": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": true
        },
        "s-15": {
            "t-0": 6,
            "t-1": 8,
            "t-10": 6,
            "t-11": 8,
            "t-30": 6,
            "t-31": 8,
            "t-32": 10
        },
        "s-16": {
            "t-0": 6,
            "t-1": 10,
            "t-10": 6,
            "t-11": 10,
            "t-30": 6,
            "t-31": 10,
            "t-32": 12
        },
        "s-17": {
            "t-0": 2,
            "t-1": 4,
            "t-10": 2,
            "t-11": 4,
            "t-30": 2,
            "t-31": 4,
            "t-32": 6
        },
        "s-18": {
            "t-0": 1,
            "t-1": 3,
            "t-10": 1,
            "t-11": 3,
            "t-30": 1,
            "t-31": 3,
            "t-32": 4
        },
        "s-19": {
            "t-0": 1,
            "t-1": null,
            "t-10": 1,
            "t-11": null,
            "t-30": 1,
            "t-31": null,
            "t-32": null
        },
        "s-20": {
            "t-0": 0,
            "t-1": 2,
            "t-10": 0,
            "t-11": 2,
            "t-30": 0,
            "t-31": 2,
            "t-32": 6
        },
        "s-21": {
            "t-0": 2,
            "t-1": 3,
            "t-10": 2,
            "t-11": 3,
            "t-30": 2,
            "t-31": 3,
            "t-32": 4
        },
        "s-22": {
            "t-0": 1,
            "t-1": 1,
            "t-10": 1,
            "t-11": 1,
            "t-30": 1,
            "t-31": 1,
            "t-32": 1
        },
        "s-23": {
            "t-0": 2,
            "t-1": 3,
            "t-10": 2,
            "t-11": 3,
            "t-30": 2,
            "t-31": 3,
            "t-32": 5
        },
        "s-24": {
            "t-0": null,
            "t-1": null,
            "t-10": null,
            "t-11": null,
            "t-30": null,
            "t-31": null,
            "t-32": null
        },
        "s-25": {
            "t-0": 3,
            "t-1": 5,
            "t-10": 3,
            "t-11": 5,
            "t-30": 3,
            "t-31": 5,
            "t-32": 6
        },
        "s-26": {
            "t-0": 1,
            "t-1": null,
            "t-10": 1,
            "t-11": null,
            "t-30": 1,
            "t-31": null,
            "t-32": null
        },
        "s-27": {
            "t-0": 3,
            "t-1": 4,
            "t-10": 3,
            "t-11": 4,
            "t-30": 3,
            "t-31": 4,
            "t-32": 6
        },
        "s-28": {
            "t-0": 0,
            "t-1": 2,
            "t-10": 0,
            "t-11": 2,
            "t-30": 0,
            "t-31": 2,
            "t-32": 0
        },
        "s-29": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 6
        },
        "s-30": {
            "t-0": 2,
            "t-1": 2,
            "t-10": 2,
            "t-11": 2,
            "t-30": 2,
            "t-31": 2,
            "t-32": 1
        },
        "s-31": {
            "t-0": 2,
            "t-1": 4,
            "t-10": 2,
            "t-11": 4,
            "t-30": 2,
            "t-31": 4,
            "t-32": 5
        },
        "s-32": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-33": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-34": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 4
        },
        "s-35": {
            "t-0": 2,
            "t-1": 3,
            "t-10": 2,
            "t-11": 3,
            "t-30": 2,
            "t-31": 3,
            "t-32": 4
        },
        "s-36": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 4
        },
        "s-37": {
            "t-0": 3,
            "t-1": 2,
            "t-10": 3,
            "t-11": 2,
            "t-30": 3,
            "t-31": 2,
            "t-32": null
        },
        "s-38": {
            "t-0": null,
            "t-1": null,
            "t-10": null,
            "t-11": null,
            "t-30": null,
            "t-31": null,
            "t-32": null
        },
        "s-39": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-40": {
            "t-0": 0.5,
            "t-1": 3,
            "t-10": 0.5,
            "t-11": 3,
            "t-30": 0.5,
            "t-31": 3,
            "t-32": 9
        },
        "s-41": {
            "t-0": 1,
            "t-1": 1,
            "t-10": 1,
            "t-11": 1,
            "t-30": 1,
            "t-31": 1,
            "t-32": 2
        },
        "s-42": {
            "t-0": 1,
            "t-1": 3,
            "t-10": 1,
            "t-11": 3,
            "t-30": 1,
            "t-31": 3,
            "t-32": 5
        },
        "s-43": {
            "t-0": null,
            "t-1": null,
            "t-10": null,
            "t-11": null,
            "t-30": null,
            "t-31": null,
            "t-32": null
        },
        "s-44": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-45": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 4
        },
        "s-46": {
            "t-0": null,
            "t-1": null,
            "t-10": null,
            "t-11": null,
            "t-30": null,
            "t-31": null,
            "t-32": null
        },
        "s-47": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-48": {
            "t-0": 0,
            "t-1": 1,
            "t-10": 0,
            "t-11": 1,
            "t-30": 0,
            "t-31": 1,
            "t-32": 3
        },
        "s-49": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-50": {
            "t-0": 30,
            "t-1": 42,
            "t-10": 30,
            "t-11": 42,
            "t-30": 30,
            "t-31": 42,
            "t-32": 60
        },
        "s-51": {
            "t-0": false,
            "t-1": true,
            "t-10": false,
            "t-11": true,
            "t-30": false,
            "t-31": true,
            "t-32": true
        },
        "s-52": {
            "t-0": -1,
            "t-1": 1,
            "t-10": -1,
            "t-11": 1,
            "t-30": -1,
            "t-31": 1,
            "t-32": 2
        },
        "s-53": {
            "t-0": 3,
            "t-1": 4,
            "t-10": 3,
            "t-11": 4,
            "t-30": 3,
            "t-31": 4,
            "t-32": 6
        },
        "s-54": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-55": {
            "t-0": 3,
            "t-1": 3,
            "t-10": 3,
            "t-11": 3,
            "t-30": 3,
            "t-31": 3,
            "t-32": 4
        },
        "s-56": {
            "t-0": 1.0,
            "t-1": 2,
            "t-10": 1.0,
            "t-11": 2,
            "t-30": 1.0,
            "t-31": 2,
            "t-32": 3
        },
        "s-57": {
            "t-0": 3,
            "t-1": 3,
            "t-10": 3,
            "t-11": 3,
            "t-30": 3,
            "t-31": 3,
            "t-32": 9
        },
        "s-58": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 2
        },
        "s-59": {
            "t-0": 1,
            "t-1": 1,
            "t-10": 1,
            "t-11": 1,
            "t-30": 1,
            "t-31": 1,
            "t-32": null
        },
        "s-60": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-61": {
            "t-0": 2,
            "t-1": 3,
            "t-10": 2,
            "t-11": 3,
            "t-30": 2,
            "t-31": 3,
            "t-32": 5
        },
        "s-62": {
            "t-0": 1,
            "t-1": -1,
            "t-10": 1,
            "t-11": -1,
            "t-30": 1,
            "t-31": -1,
            "t-32": 2
        },
        "s-63": {
            "t-0": 2,
            "t-1": 4,
            "t-10": 2,
            "t-11": 4,
            "t-30": 2,
            "t-31": 4,
            "t-32": 8
        },
        "s-64": {
            "t-0": null,
            "t-1": null,
            "t-10": null,
            "t-11": null,
            "t-30": null,
            "t-31": null,
            "t-32": null
        },
        "s-65": {
            "t-0": 5,
            "t-1": null,
            "t-10": 5,
            "t-11": null,
            "t-30": 5,
            "t-31": null,
            "t-32": null
        },
        "s-66": {
            "t-0": 3,
            "t-1": 4,
            "t-10": 3,
            "t-11": 4,
            "t-30": 3,
            "t-31": 4,
            "t-32": 5
        },
        "s-67": {
            "t-0": 1,
            "t-1": 0,
            "t-10": 1,
            "t-11": 0,
            "t-30": 1,
            "t-31": 0,
            "t-32": 0
        },
        "s-68": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-69": {
            "t-0": 1,
            "t-1": null,
            "t-10": 1,
            "t-11": null,
            "t-30": 1,
            "t-31": null,
            "t-32": 2
        },
        "s-70": {
            "t-0": 1,
            "t-1": 2,
            "t-10": 1,
            "t-11": 2,
            "t-30": 1,
            "t-31": 2,
            "t-32": 3
        },
        "s-71": {
            "t-0": 1,
            "t-1": 5,
            "t-10": 1,
            "t-11": 5,
            "t-30": 1,
            "t-31": 5,
            "t-32": 3
        },
        "s-72": {
            "t-0": 1,
            "t-1": 4,
            "t-10": 1,
            "t-11": 4,
            "t-30": 1,
            "t-31": 4,
            "t-32": 10
        },
        "s-73": {
            "t-0": 3,
            "t-1": 5,
            "t-10": 3,
            "t-11": 5,
            "t-30": 3,
            "t-31": 5,
            "t-32": 7
        },
        "s-74": {
            "t-0": 1,
            "t-1": 3,
            "t-10": 1,
            "t-11": 3,
            "t-30": 1,
            "t-31": 3,
            "t-32": 4
        },
        "s-75": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": true
        },
        "s-76": {
            "t-0": 1,
            "t-1": 1,
            "t-10": 1,
            "t-11": 1,
            "t-30": 1,
            "t-31": 1,
            "t-32": 1
        },
        "s-77": {
            "t-0": 1,
            "t-1": 3,
            "t-10": 1,
            "t-11": 3,
            "t-30": 1,
            "t-31": 3,
            "t-32": 5
        },
        "s-78": {
            "t-0": 3,
            "t-1": 2,
            "t-10": 3,
            "t-11": 2,
            "t-30": 3,
            "t-31": 2,
            "t-32": 11
        },
        "s-79": {
            "t-0": 1,
            "t-1": 3,
            "t-10": 1,
            "t-11": 3,
            "t-30": 1,
            "t-31": 3,
            "t-32": 4
        },
        "s-80": {
            "t-0": 1,
            "t-1": 4,
            "t-10": 1,
            "t-11": 4,
            "t-30": 1,
            "t-31": 4,
            "t-32": 7
        },
        "s-81": {
            "t-0": 2,
            "t-1": 194,
            "t-10": 2,
            "t-11": 194,
            "t-30": 2,
            "t-31": 194,
            "t-32": 18818
        },
        "s-82": {
            "t-0": 1,
            "t-1": 4,
            "t-10": 1,
            "t-11": 4,
            "t-30": 1,
            "t-31": 4,
            "t-32": 8
        },
        "s-83": {
            "t-0": true,
            "t-1": null,
            "t-10": true,
            "t-11": null,
            "t-30": true,
            "t-31": null,
            "t-32": null
        },
        "s-84": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-85": {
            "t-0": 2,
            "t-1": 10,
            "t-10": 2,
            "t-11": 10,
            "t-30": 2,
            "t-31": 10,
            "t-32": 13
        },
        "s-86": {
            "t-0": 2,
            "t-1": 3,
            "t-10": 2,
            "t-11": 3,
            "t-30": 2,
            "t-31": 3,
            "t-32": 5
        },
        "s-87": {
            "t-0": 1,
            "t-1": 1,
            "t-10": 1,
            "t-11": 1,
            "t-30": 1,
            "t-31": 1,
            "t-32": 2
        },
        "s-88": {
            "t-0": 1,
            "t-1": null,
            "t-10": 1,
            "t-11": null,
            "t-30": 1,
            "t-31": null,
            "t-32": null
        },
        "s-89": {
            "t-0": 3,
            "t-1": 6,
            "t-10": 3,
            "t-11": 6,
            "t-30": 3,
            "t-31": 6,
            "t-32": 10
        },
        "s-90": {
            "t-0": 0,
            "t-1": 0,
            "t-10": 0,
            "t-11": 0,
            "t-30": 0,
            "t-31": 0,
            "t-32": null
        },
        "s-91": {
            "t-0": 2,
            "t-1": 2,
            "t-10": 2,
            "t-11": 2,
            "t-30": 2,
            "t-31": 2,
            "t-32": 2
        },
        "s-92": {
            "t-0": 3,
            "t-1": 5,
            "t-10": 3,
            "t-11": 5,
            "t-30": 3,
            "t-31": 5,
            "t-32": 3
        },
        "s-93": {
            "t-0": 3,
            "t-1": null,
            "t-10": 3,
            "t-11": null,
            "t-30": 3,
            "t-31": null,
            "t-32": 6
        },
        "s-94": {
            "t-0": "1/1",
            "t-1": "1/2",
            "t-10": "1/1",
            "t-11": "1/2",
            "t-30": "1/1",
            "t-31": "1/2",
            "t-32": "2/1"
        },
        "s-95": {
            "t-0": 1,
            "t-1": 4,
            "t-10": 1,
            "t-11": 4,
            "t-30": 1,
            "t-31": 4,
            "t-32": 9
        },
        "s-96": {
            "t-0": 3,
            "t-1": 6,
            "t-10": 3,
            "t-11": 6,
            "t-30": 3,
            "t-31": 6,
            "t-32": 9
        },
        "s-97": {
            "t-0": 2,
            "t-1": 4,
            "t-10": 2,
            "t-11": 4,
            "t-30": 2,
            "t-31": 4,
            "t-32": 3
        },
        "s-98": {
            "t-0": null,
            "t-1": null,
            "t-10": null,
            "t-11": null,
            "t-30": null,
            "t-31": null,
            "t-32": null
        },
        "s-99": {
            "t-0": 3,
            "t-1": 4,
            "t-10": 3,
            "t-11": 4,
            "t-30": 3,
            "t-31": 4,
            "t-32": 5
        }
    },
    "code_test_res": {
        "s-0": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-1": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-2": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-3": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-4": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-5": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-6": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-7": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-8": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-9": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-10": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-11": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-12": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-13": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-14": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-15": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-16": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-17": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-18": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-19": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-20": {
            "t-0": false,
            "t-1": true,
            "t-10": false,
            "t-11": true,
            "t-30": false,
            "t-31": true,
            "t-32": true
        },
        "s-21": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-22": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-23": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-24": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-25": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-26": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-27": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-28": {
            "t-0": false,
            "t-1": true,
            "t-10": false,
            "t-11": true,
            "t-30": false,
            "t-31": true,
            "t-32": false
        },
        "s-29": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": true
        },
        "s-30": {
            "t-0": false,
            "t-1": true,
            "t-10": false,
            "t-11": true,
            "t-30": false,
            "t-31": true,
            "t-32": false
        },
        "s-31": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-32": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-33": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-34": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-35": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-36": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-37": {
            "t-0": false,
            "t-1": true,
            "t-10": false,
            "t-11": true,
            "t-30": false,
            "t-31": true,
            "t-32": false
        },
        "s-38": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-39": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-40": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-41": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-42": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-43": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-44": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-45": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-46": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-47": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-48": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-49": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-50": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-51": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-52": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-53": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-54": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-55": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-56": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-57": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-58": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-59": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-60": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-61": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-62": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-63": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-64": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-65": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-66": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-67": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-68": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-69": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-70": {
            "t-0": true,
            "t-1": true,
            "t-10": true,
            "t-11": true,
            "t-30": true,
            "t-31": true,
            "t-32": false
        },
        "s-71": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-72": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-73": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-74": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-75": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-76": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-77": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-78": {
            "t-0": false,
            "t-1": true,
            "t-10": false,
            "t-11": true,
            "t-30": false,
            "t-31": true,
            "t-32": false
        },
        "s-79": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-80": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-81": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-82": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-83": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-84": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-85": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-86": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-87": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-88": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-89": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-90": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-91": {
            "t-0": false,
            "t-1": true,
            "t-10": false,
            "t-11": true,
            "t-30": false,
            "t-31": true,
            "t-32": false
        },
        "s-92": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-93": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": true
        },
        "s-94": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-95": {
            "t-0": true,
            "t-1": false,
            "t-10": true,
            "t-11": false,
            "t-30": true,
            "t-31": false,
            "t-32": false
        },
        "s-96": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-97": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-98": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        },
        "s-99": {
            "t-0": false,
            "t-1": false,
            "t-10": false,
            "t-11": false,
            "t-30": false,
            "t-31": false,
            "t-32": false
        }
    },
    "solution_dict": {
        "s-0": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    if n < 1: \n        return False \n    if n == 1: \n        return 3 \n\n    # Find the largest power of 2 <= n \n    p = int(math.log2(n)) \n\n    # Check if n is sum of p-th powers of  \n    # first p odd numbers \n    for i in range(1, p+1): \n        sum = 0\n        for j in range(1, 2*i, 2): \n            sum += j**i \n\n        if sum == n: \n            return True \n\n    return False ",
        "s-1": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    primes = [2, 3, 5, 7] # Initialize list of prime numbers\n    factors = [] # Initialize list of factors\n    curr_num = 1 # Initialize current number to be 1\n    while len(factors) < n: # Keep running the loop until we find the nth polite number\n        temp_num = curr_num # Create a temporary variable to store the current number\n        for prime in primes: # Iterate through all prime numbers\n            while temp_num % prime == 0: # If the number is divisible by the prime number\n                temp_num = temp_num // prime # Divide the number by the prime number\n                factors.append(prime) # Append the prime number to the list of factors\n        if temp_num == 1: # If the temporary variable is 1\n            curr_num += 1 # Increment the current number\n        else: # Else\n            factors = [] # Re-initialize the list of factors\n            curr_num += 1 # Increment the current number\n    return curr_num-1 # Return the nth polite number\n",
        "s-2": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the count of factors to 0\n    count = 0\n    # Starting from 1, iterate through all numbers until we find the nth polite number\n    i = 1\n    while True:\n        # Calculate the power of 2\n        power_of_2 = int(math.log2(i))\n        # Check if the number of factors is equal to n\n        if count == n:\n            # Return the nth polite number\n            return i - 1\n        # Check if the number of factors is less than or equal to the power of 2\n        if count <= power_of_2:\n            # Increment the count of factors and move to the next number\n            count += 1\n            i += 1\n        else:\n            # Decrement the count of factors and move to the next number\n            count -= power_of_2\n            i += 1\n",
        "s-3": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = int(math.log(n, 2)) \n    if k <= 0: \n        return n \n    q = n - 2**k \n    return 10 * is_polite(q) + k \n",
        "s-4": " \n    a = [0]*(n+1) \n    a[0] = a[1] = 1\n    for i in range(2, n+1): \n        k = math.floor(i/2) \n        for j in range(k, 0, -1): \n            if j == 1: \n                a[i] = a[i]+1\n            else: \n                a[i] = a[i]+a[j-2] \n    return a[n] \n",
        "s-5": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def count_divisors(num): \n        cnt = 0\n        for i in range(1, (int)(math.sqrt(num)) + 1): \n            if (num % i == 0) : \n                if (num / i == i) : \n                    cnt = cnt + 1\n                else : \n                    cnt = cnt + 2\n        return cnt \n    def nth_polite(n): \n        i = 1; count = 0 \n        while (count < n):  \n            i += 1\n            if (count_divisors(i) % 2 == 0): \n                count += 1 \n        return i \n    return nth_polite(n) \n",
        "s-6": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Polite numbers are defined as positive integers that are not powers of two.\n    polite_numbers = []\n    num = 1\n    \n    while len(polite_numbers) < n:\n        if num & (num - 1) != 0:  # Check if num is not a power of 2\n            polite_numbers.append(num)\n        num += 1\n    \n    return polite_numbers[n - 1]",
        "s-7": " \n    # base case \n    if n == 0: \n        return 1\n\n    # calculate x and y using floor division and modulo operations \n    x = math.floor(n / 2) \n    y = n % 2\n\n    # recursively calculate previous polite number using x \n    # if y is 0, add x to the previous polite number \n    # if y is 1, add 2*x to the previous polite number \n    prev_polite = is_polite(x) \n    if y == 0: \n        return prev_polite + x \n    else: \n        return prev_polite + 2*x \n",
        "s-8": " \n    # Given a positive integer n, the nth polite number is the smallest positive integer that can be written as \n    # the sum of at least n powers of 2, where the powers are allowed to be negative or zero. \n    # For example, the first polite number is 1 because it can be written as 2^0, \n    # the second polite number is 2 because it can be written as 2^1, \n    # the third polite number is 3 because it can be written as 2^0 + 2^-1, \n    # the fourth polite number is 4 because it can be written as 2^2, \n    # the fifth polite number is 5 because it can be written as 2^0 + 2^2, \n    # and so on.\n    \n    binary = bin(n)[2:]\n    ans = 0\n    for i, b in enumerate(reversed(binary)):\n        if b == \"1\":\n            ans += int(math.pow(2, i))\n    return ans\n",
        "s-9": " \n    def prime_factorization(n): \n        prime_factors = []\n        while n % 2 == 0: \n            prime_factors.append(2)\n            n //= 2\n        for i in range(3, int(math.sqrt(n))+1, 2): \n            while n % i == 0: \n                prime_factors.append(i)\n                n //= i\n        if n > 2: \n            prime_factors.append(n)\n        return prime_factors\n\n    factors = prime_factorization(n)\n    lpf = max(factors)\n    num = n - lpf\n    return num % lpf == 0\n",
        "s-10": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p = [1] \n    for i in range(2, n + 1): \n        j = i \n        while j % 2 == 0: \n            j //= 2\n        for k in range(len(p)): \n            x = p[k] * j \n            if x > p[-1]: \n                p.append(x) \n    return p[n - 1] \n",
        "s-11": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    k = 2\n    while n > 0:\n        if math.gcd(k, n) == 1:\n            n -= 1\n        k += 1\n    return k - 1\n",
        "s-12": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def count(k, x, n): \n        res = 0\n        while (x <= n): \n            res += n - x + 1\n            x *= k \n        return res \n\n    def nthPolite(n, k): \n        lo = 1\n        hi = int(1e18)\n        ans = 0\n        while (lo <= hi): \n            mid = (lo + hi) >> 1\n            if (count(k, 1, mid) >= n): \n                ans = mid \n                hi = mid - 1\n            else: \n                lo = mid + 1\n        return ans \n\n    return nthPolite(n, 2)\n",
        "s-13": " \n    \"\"\"\n    Returns the nth polite number.\n    A number is called polite if it can be expressed as the sum of two or more consecutive positive integers.\n    \n    Parameters:\n    n (int): The nth polite number to find.\n    \n    Returns:\n    int: The nth polite number.\n    \"\"\"\n    current_sum = 0\n    current_num = 1\n    while True:\n        current_sum += current_num\n        if current_sum > n:\n            return -1\n        elif current_sum == n:\n            return current_num\n        current_num += 1\n",
        "s-14": " \n    \"\"\"\n    Find the nth polite number. \n    A polite number is a positive integer that can be expressed as the sum of two or more consecutive positive integers.\n    \"\"\"\n    i = 1\n    while n > 0:\n        s = (i * (i + 1)) // 2\n        if s == n:\n            return True\n        elif s > n:\n            i = i - 1\n        else:\n            n = n - s\n            i = i + 1\n    return False\n",
        "s-15": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize polite number to 1\n    polite_num = 1\n  \n    # Loop until we find the nth polite number\n    while n > 0: \n        # Find the number of divisors of polite_num\n        num_divisors = 0\n        for i in range(1, int(math.sqrt(polite_num)) + 1): \n            if polite_num % i == 0: \n                num_divisors += 2\n        if math.sqrt(polite_num) == int(math.sqrt(polite_num)): \n            num_divisors -= 1\n  \n        # If polite_num is a polite number, decrement n\n        if num_divisors % 4 == 0: \n            n -= 1 \n  \n        # Increment polite_num\n        polite_num += 1\n  \n    # Return the nth polite number\n    return polite_num - 1\n",
        "s-16": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the nth polite number to 0\n    polite_num = 0 \n    \n    # Calculate the number of distinct prime factors of n\n    def num_distinct_prime_factors(n):\n        factors = set()\n        while n % 2 == 0:\n            factors.add(2)\n            n //= 2\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            while n % i == 0:\n                factors.add(i)\n                n //= i\n        if n > 2:\n            factors.add(n)\n        return len(factors)\n        \n    # Start with the first positive integer\n    i = 1\n    \n    # Loop until the nth polite number is found\n    while n > 0:\n        # Check if i is a polite number\n        if num_distinct_prime_factors(i) == 2:\n            polite_num = i\n            n -= 1\n        # Increment i\n        i += 1\n    \n    return polite_num\n",
        "s-17": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    nums = [0] * (n + 1) \n  \n    nums[0] = 1\n  \n    for i in range(1, n + 1):  \n        for j in range(i - 1, -1, -1): \n            nums[i] += nums[j]  \n  \n    for i in range(2, n + 1): \n        nums[i] += nums[i - 2] \n  \n    return nums[n] + 1",
        "s-18": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # First polite number is always 1\n    if n == 1:\n        return 1\n\n    # Initialize variable to keep track of current polite number\n    current_polite_number = 2\n\n    # Initialize variable to keep track of the number of factors of the current polite number\n    current_number_of_factors = 2\n\n    # Loop until we find the nth polite number\n    while True:\n        # Find the next number whose number of factors is greater than or equal to the current polite number\n        while True:\n            if math.gcd(current_number_of_factors, current_polite_number) == 1:\n                break\n            current_polite_number += 1\n            current_number_of_factors = len(set([x for i in range(1, int(math.sqrt(current_polite_number))+1) if current_polite_number % i == 0 for x in (i, current_polite_number//i)]))\n\n        # If we have found the nth polite number, return it\n        if n == 2:\n            return current_polite_number\n        n -= 1\n\n        # Update current_number_of_factors for the next iteration\n        current_number_of_factors += 1\n",
        "s-19": " \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # First polite number is 1, so return 1 if n is 1\n    if n == 1:\n        return 1\n    \n    # Initialize count to 1 and current term to 2\n    count = 1\n    curr = 2\n    \n    # Loop until we reach nth polite number\n    while count < n:\n        \n        # Calculate the power of current term\n        power = int(math.log(curr, 2))\n        \n        # Check if current term is the sum of powers of previous polite numbers\n        for j in range(1, power+1):\n            if is_polite(curr - 2**j) and is_polite(2**j):\n                count += 1\n                break\n        \n        # Increment current term\n        curr += 1\n    \n    # Return the nth polite number\n    return curr - 1\n",
        "s-20": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    return int(math.pow(2, n) - 2)\n",
        "s-21": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    ans = 1\n    while n > 0:\n        ans += 1\n        factors = []\n        for i in range(1, int(math.sqrt(ans))+1):\n            if ans % i == 0:\n                factors.append(i)\n                factors.append(ans // i)\n        if len(factors) % 2 == 0:\n            n -= 1\n    return ans\n",
        "s-22": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    factors = []\n    exponent_counts = []\n    for i in range(len(primes)):\n        count = 0\n        while n % primes[i] == 0:\n            n //= primes[i]\n            count += 1\n        if count > 0:\n            factors.append(primes[i])\n            exponent_counts.append(count)\n        if n == 1:\n            break\n    if n > 1:\n        factors.append(n)\n        exponent_counts.append(1)\n    num_factors = len(factors)\n    divisors = [1]\n    for i in range(num_factors):\n        new_divisors = []\n        for j in range(exponent_counts[i] + 1):\n            for k in range(len(divisors)):\n                new_divisors.append(divisors[k] * (factors[i] ** j))\n        divisors = new_divisors\n    divisors.sort()\n    powers = [1] * len(divisors)\n    for i in range(1, len(divisors)):\n        for j in range(i):\n            if divisors[i] % divisors[j] == 0:\n                powers[i] -= powers[j]\n    polite_sum = 0\n    for i in range(len(divisors)):\n        polite_sum += powers[i] * divisors[i]\n    return polite_sum\n",
        "s-23": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the count to 0\n    count = 0\n    \n    # Start the iteration from 1\n    i = 1\n    \n    # Loop until count reaches n\n    while count < n:\n        \n        # Calculate the number of divisors for the current number\n        num_divisors = 0\n        for j in range(1, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                num_divisors += 1\n                if j != i//j:\n                    num_divisors += 1\n        \n        # Check if the current number is polite\n        if num_divisors % 2 == 0:\n            count += 1\n        \n        # If the current number is not polite, move to the next number\n        i += 1\n    \n    # Return the nth polite number\n    return i - 1\n",
        "s-24": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime_factors = []\n    factors = []\n    i = 1\n    while len(factors) <= n:\n        prime_factors = list(set(math.primefactors(i)))\n        factors.append(prime_factors)\n        i += 1\n    polite = [1] * n\n    for i in range(n):\n        for j in range(len(factors[i])):\n            polite[i] *= factors[i][j]\n    return polite[n-1]\n",
        "s-25": "\nimport math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Polite numbers are all natural numbers except powers of 2.\n    polite_numbers = []\n    count = 0\n    current_number = 1\n\n    while count < n:\n        if current_number & (current_number - 1) != 0:  # Check if current_number is not a power of 2\n            polite_numbers.append(current_number)\n            count += 1\n        current_number += 1\n\n    return polite_numbers[-1]",
        "s-26": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    primes = [2]\n    prime_set = set(primes)\n    i = 3\n    while len(primes) < n:\n        for p in primes:\n            if i % p == 0:\n                break\n        else:\n            primes.append(i)\n            prime_set.add(i)\n        i += 1\n    factors = [1]\n    for p in primes:\n        new_factors = []\n        for f in factors:\n            if f * p not in prime_set:\n                new_factors.append(f * p)\n        factors.extend(new_factors)\n    factors.sort()\n    return factors[n-1]\n",
        "s-27": "\nimport math \ndef is_polite(n): \n    if n == 1: \n        return 3\n    p = math.floor(math.log2(n - 1)) \n    k = n - 2**p \n    return (2**(p + 1) - 1 + is_polite(k)) ",
        "s-28": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initializations \n    politeCount = 0\n    i = 1\n \n    # Iterate until politeCount is not equal to n\n    while (politeCount != n):\n \n        # Calculate the ith power of 2\n        powerI = int(math.pow(2, i))\n \n        # Iterate from 1 to i\n        for j in range(1, i + 1):\n \n            # Calculate the jth power of 2\n            powerJ = int(math.pow(2, j))\n \n            # Calculate the difference between powerI and powerJ\n            diff = powerI - powerJ\n \n            # If diff is divisible by (powerI / 2) or not \n            if (diff % (powerI // 2) == 0):\n                politeCount += 1\n \n                # If the current number is nth polite number\n                if (politeCount == n):\n                    return diff\n \n        # Increment i by 1\n        i += 1\n",
        "s-29": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    polite_nums = [1] # list to hold polite numbers\n    i = 2 # start with 2 as 1 is already in the list\n    while len(polite_nums) < n:\n        factors = set()\n        for j in range(1, int(math.sqrt(i))+1):\n            if i % j == 0:\n                factors.add(j)\n                factors.add(i//j)\n        if len(factors) >= n:\n            polite_nums.append(i)\n        i += 1\n    return polite_nums[-1] # return the nth polite number",
        "s-30": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    # Find the nearest power of 2 \n    p = math.floor(math.log2(n)) \n    # Find the sum of geometric series with ratio 2 \n    sum = 2**(p+1) - 2\n    # Subtract the excess terms \n    sum -= (2**(p)-1)*(n - 2**p) \n    return sum\n",
        "s-31": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    \n    # Recursive case\n    elif n > 0:\n        # Find the largest power of 2 that is less than or equal to n\n        k = int(math.log2(n))\n        # Find the remaining number after subtracting the largest power of 2 from n\n        remaining = n - 2**k\n        # Recursively call the function for the remaining number and return the result\n        return 2**(k+1) - 1 + is_polite(remaining)\n",
        "s-32": " \n    # The first polite number is 1\n    polite = [1]\n    \n    # Generate the rest of the polite numbers\n    while len(polite) < n:\n        next_polite = math.inf\n        \n        # Find the next polite number\n        for i in range(1, len(polite)+1):\n            for j in range(i, len(polite)+1):\n                candidate = polite[i-1] + polite[j-1]\n                \n                # If the candidate is greater than the current next polite number, break the loop\n                if candidate >= next_polite:\n                    break\n                \n                # If the candidate is not already in the list of polite numbers, update the next polite number\n                if candidate not in polite:\n                    next_polite = candidate\n        \n        # Add the next polite number to the list of polite numbers\n        polite.append(next_polite)\n    \n    # Return the nth polite number\n    return polite[n-1]\n",
        "s-33": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    \n    while count < n:\n        if math.gcd(i, i + 1) == 1:\n            count += 1\n            if count == n:\n                return i\n        i += 1\n",
        "s-34": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime_factors = []\n    num = 1\n\n    while n > 0: \n        prime_factors.clear()\n        x = num \n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                cnt = 0\n                while num % i == 0: \n                    cnt += 1\n                    num //= i\n                prime_factors.append(cnt)\n\n        if num > 1: \n            prime_factors.append(1)\n\n        if sum(prime_factors) + 1 == n: \n            return x \n\n        num += 1 \n\n    return -1\n",
        "s-35": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    while n > 0:\n        # check if num is polite\n        if math.gcd(num, sum(int(digit) for digit in str(num))) > 1:\n            n -= 1\n            if n == 0:\n                return num\n        num += 1\n",
        "s-36": " \n    \"\"\"\n    This function finds the nth polite number using the formula \n    (n-1) + (n-2) + ... + 1. \n    \"\"\"\n    if n <= 0: \n        return 0\n    else: \n        return int((n*(n-1))/2) + 1\n",
        "s-37": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Base case\n    if n == 1:\n        return 3\n    \n    # Find the largest k such that 2^k <= n\n    k = int(math.log2(n))\n    \n    # Check if n is a power of 2\n    if n == 2 ** k:\n        return 2\n    \n    # Calculate the sum of polite numbers up to 2^k\n    sum_polite = sum([is_polite(i) for i in range(1, 2 ** k) if math.gcd(i, 2 ** k) == 1])\n    \n    # Calculate the nth polite number\n    for i in range(2, n + 1):\n        if math.gcd(i, sum_polite + 1) > 1:\n            continue\n        if all([math.gcd(i, sum_polite + j) > 1 for j in range(2, i + 1)]):\n            return sum_polite + i\n    \n    return None\n",
        "s-38": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def prime_factors(n): \n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        for i in range(3,int(math.sqrt(n))+1,2): \n            while n % i== 0: \n                factors.append(i)\n                n = n / i \n        if n > 2: \n            factors.append(n)\n        return factors\n    \n    def count_factors(n): \n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if (n % i == 0) :\n                if (n / i == i) :\n                    count = count + 1\n                else :\n                    count = count + 2\n        return count\n    \n    def is_polite_helper(n, k): \n        if (k > n):\n            return 1\n        if (n % k != 0):\n            return 0\n        return is_polite_helper(n // k, k + 1) + is_polite_helper(n, k + 1)\n    \n    l = 1\n    r = 1e18\n    result = -1\n    while (l <= r):\n        mid = int((l + r) // 2)\n        factors = prime_factors(mid)\n        factor_count = count_factors(mid)\n        polite_count = is_polite_helper(factor_count, 2) - 1\n        if (polite_count < n):\n            l = mid + 1\n        else:\n            result = mid\n            r = mid - 1\n    return result \n",
        "s-39": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = [1]\n    p2 = [2]\n    p3 = [3]\n    p5 = [5]\n    i = 0\n    j = 0\n    k = 0\n    while len(polite) < n:\n        next_polite = min(p2[0], p3[0], p5[0])\n        polite.append(next_polite)\n        if next_polite == p2[0]:\n            i += 1\n            p2.pop(0)\n            p2.append(2 * polite[i])\n            p3.append(3 * polite[i])\n        elif next_polite == p3[0]:\n            j += 1\n            p3.pop(0)\n            p3.append(3 * polite[j])\n        else:\n            k += 1\n            p5.pop(0)\n            p5.append(5 * polite[k])\n    return polite[-1]\n",
        "s-40": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Calculate the number of prime factors of n\n    num_factors = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            num_factors += 1\n    if n > 1:\n        num_factors += 1\n    \n    # Calculate the nth polite number using the formula\n    polite_num = 2 ** (num_factors - 1) * 3 ** (n - 1)\n    \n    return polite_num\n",
        "s-41": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    primes = [] \n    i = 2\n    while (n != 1): \n        while (n % i == 0): \n            primes.append(i) \n            n = n // i \n        i += 1\n    s = 0\n    for i in primes: \n        s += (i - 1)\n    return math.factorial(s) // math.prod([math.factorial(primes.count(i)) for i in set(primes)])\n",
        "s-42": " \n    num = 1\n    while n > 0:\n        if math.gcd(num, 2) == 1:\n            n -= 1\n            if n == 0:\n                return num\n        num += 1\n    return -1\n",
        "s-43": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Base case \n    if n == 0: \n        return 1\n  \n    # Recursive Case \n    else: \n        # Calculate the number of factors of the current number \n        factors = int(math.log2(n)) + 1\n  \n        # Recursive call for the next polite number \n        return 2 * is_polite(n - 1) - is_polite(n - factors - 1)\n",
        "s-44": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    \n    # Initialize variables\n    num = 2\n    factors = [1, 2]\n    curr_sum = sum(factors)\n\n    # Iterate until we get the nth polite number\n    while len(factors) != n:\n        # Check if the current sum is a factor of num\n        if num % curr_sum == 0:\n            factors.append(num)\n            curr_sum += num\n        num += 1\n    \n    # Return the nth polite number\n    return factors[-1]\n",
        "s-45": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    primes = [2, 3] # initialize primes array\n    nums = [1] # initialize nums array\n    i = 0 # initialize i\n    j = 0 # initialize j\n    while len(nums) < n: \n        x = primes[i] * nums[j] # multiply ith prime with jth num \n        nums.append(x) # append the product to nums array \n        if i == j: \n            j += 1 # increment j if i and j are same \n            i = 0 # reset i to 0 \n        else: \n            i += 1 # increment i \n        if i == len(primes): \n            primes.append(next_prime(primes[-1])) # find the next prime number and append it to primes array \n            i = 0 # reset i to 0 \n    return nums[-1] # return the nth polite number \n\n# helper function to find the next prime number \ndef next_prime(num): \n    x = num + 1 # initialize x \n    while not is_prime(x): \n        x += 1 # increment x until x is prime \n    return x # return the next prime number \n\n# helper function to check if a number is prime \ndef is_prime(num): \n    for i in range(2, int(math.sqrt(num)) + 1): \n        if num % i == 0: \n            return False \n    return True\n",
        "s-46": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def divisor_sum(n): \n        i = 1\n        ans = 0\n        while i*i <= n: \n            if n % i == 0: \n                ans += i\n                if n // i != i: \n                    ans += n // i \n            i += 1\n        return ans \n\n    num, i, count = 1, 1, 0\n    while count < n: \n        ds = divisor_sum(num)\n        if ds == num + 1: \n            count += 1\n        if count == n: \n            return num \n        i += 1 \n        num = i ** 2\n",
        "s-47": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize the number with 1 and count with 1\n    num = 1\n    count = 1\n  \n    # Iterate till count is less than or equal to n\n    while (count <= n):\n        \n        # Find the prime factors of the current number \n        temp = num \n        flag = 1\n        while (temp != 1): \n            if (temp % 2 == 0): \n                temp //= 2\n            elif (temp % 3 == 0): \n                temp //= 3\n            elif (temp % 5 == 0): \n                temp //= 5\n            else: \n                flag = 0\n                break\n        \n        # Check if the number is polite \n        if (flag): \n            count += 1\n        \n        # Increment the number \n        num += 1\n    \n    # Return the nth polite number \n    return num-1\n",
        "s-48": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    p = int(math.log2(n + 1)) \n    polite = [1] * p \n    polite[0] = n \n    for i in range(1, p): \n        polite[i] = polite[i - 1] // 2 \n    return sum(polite) - 1\n",
        "s-49": " \n    # A polite number is a number that can be expressed as the sum of two or more consecutive positive integers\n    # First polite number is 1\n    \n    # First, we will find the smallest value of x such that n can be expressed as sum of first x positive integers\n    x = math.ceil((-1 + math.sqrt(1 + 8 * n)) / 2)\n    \n    # Now, we will check if n can be expressed as sum of x consecutive integers\n    m = int((x - 1) / 2)\n    s = (m + 1) * (x - m)\n    \n    if s == n:\n        return True\n    else:\n        return False\n",
        "s-50": " \n    def prime_factors(num):\n        factors = []\n        while num % 2 == 0:\n            factors.append(2)\n            num = num // 2\n        for i in range(3, int(math.sqrt(num))+1, 2):\n            while num % i == 0:\n                factors.append(i)\n                num = num // i\n        if num > 2:\n            factors.append(num)\n        return factors\n\n    def count_factors(n):\n        return len(set(prime_factors(n)))\n\n    i = 1\n    while n > 0:\n        if count_factors(i) >= 3:\n            n -= 1\n        i += 1\n    return i-1\n",
        "s-51": " \n    # A polite number is a positive integer that can be written as the sum of two or more consecutive positive integers.\n    # For example, 9 is a polite number because it can be written as 2+3+4 or 4+5.\n    # The nth polite number is the nth smallest polite number.\n    # In order to find the nth polite number, we can use a formula based on triangular numbers.\n    # A triangular number is a number that can be represented in the form n*(n+1)/2.\n    # We can use a loop to iterate over all the triangular numbers less than or equal to n.\n    # For each triangular number t, we can check if n-t is also a triangular number.\n    # If it is, then n is the sum of t and n-t consecutive positive integers, and is therefore a polite number.\n    \n    for i in range(1, n+1):\n        t = (i*(i+1))//2\n        \n        if n <= t:\n            return False\n        \n        if (n-t) % i == 0:\n            return True\n        \n    return False\n",
        "s-52": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # calculate the maximum power of 2 less than or equal to n and store it in the variable power\n    power = int(math.log2(n)) \n    # initialize the polite number to 0\n    polite_num = 0 \n    # loop through each power of 2 from power to 0\n    for i in range(power, -1, -1): \n        # set the bit at position i in polite_num to 1\n        polite_num = polite_num | 1 << i \n        # calculate the difference between the polite number and n\n        diff = n - polite_num \n        # if the difference is negative or 0, set the bit at position i in polite_num to 0\n        if diff <= 0: \n            polite_num = polite_num & ~(1 << i) \n        # if the difference is a power of 2, return the polite number\n        elif math.log2(diff).is_integer(): \n            return polite_num \n    # if we get to this point, there is no nth polite number\n    return -1 \n",
        "s-53": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n        \n    l, r = 3, n * 2\n    \n    while l <= r:\n        mid = (l + r) // 2\n        k = mid - (mid // 2) - (mid // 3) + (mid // 6)\n        if k == n:\n            return mid\n        elif k > n:\n            r = mid - 1\n        else:\n            l = mid + 1",
        "s-54": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = 2\n    while True:\n        x = n - (k * (k - 1)) // 2\n        if x <= 0:\n            break\n        if x % k == 0:\n            return True\n        k += 1\n    return False\n",
        "s-55": "\nimport math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n    \n    if n == 1:\n        return 3\n    \n    curr_num = 2\n    while n > 1:\n        if count_divisors(curr_num) == 2:\n            n -= 1\n        curr_num += gcd(curr_num, count_divisors(curr_num))\n    \n    return curr_num - gcd(curr_num, count_divisors(curr_num))",
        "s-56": "\n    p = int(math.log2(n)) + 1  # calculate the value of p\n    q = n - 2**(p-1)  # calculate the value of q\n    return 2**(p-1) + q*(2**(p-2))  # calculate the nth polite number\n",
        "s-57": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n == 1:\n        return 3\n    \n    power = int(math.log(n, 2))\n    \n    if n == 2**power:\n        return 2**(power+1) - 1\n    \n    return 2 * is_polite(n - 2**power) + is_polite(2**(power-1))",
        "s-58": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    nums = []\n    for i in range(1, n):\n        num = i\n        while num > 0:\n            nums.append(num)\n            num //= 2\n        nums.pop() # remove the last element which is 1\n        if sum(nums) == i:\n            n -= 1\n        nums.clear()\n    return n\n",
        "s-59": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Base case \n    if n == 1: \n        return 1\n  \n    # Initialize number of 2's \n    twos = 0\n  \n    # Count number of 2's \n    while (n % 2 == 0): \n        n //= 2\n        twos += 1\n  \n    # Find the value of remaining number \n    odd = is_polite(n) \n  \n    # Check if number is of the form 2^k * odd \n    if (twos > 0): \n        return (odd * (2 ** (twos - 1))) \n    else: \n        return (odd * 2)\n",
        "s-60": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    p = [1, 1]\n    for i in range(2, n+1):\n        x = math.floor(i/2)\n        if i % 2 == 0:\n            p.append(p[i-1] + p[x])\n        else:\n            p.append(p[i-1] + p[x-1])\n    return p[n]",
        "s-61": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 2\n    if n == 2: \n        return 3\n  \n    # Recursive function call \n    return int(2 * is_polite(n - 1) - is_polite(n - 3)) \n",
        "s-62": " \n    if n == 1:\n        return 1\n\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n // i)\n\n    factors.sort()\n    for i in range(1, n):\n        s = 0\n        for j in range(i, n):\n            s += j\n            if s == n:\n                if len(factors) == 0 or factors[-1] < j:\n                    return j\n                else:\n                    for k in range(len(factors)):\n                        if factors[k] >= i and factors[k] < j:\n                            factors.pop(k)\n                            break\n\n    return -1\n",
        "s-63": " \n    # find the largest power of 2 that divides n\n    k = int(math.log2(n))\n    # find the nth polite number\n    return (2**(k+1))*(n - 2**k + 1)\n",
        "s-64": " \n    \"\"\"\n    A function to find nth polite number. A polite number is a number that can be expressed as the sum of two or more consecutive positive integers. \n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    # Check if n is a positive integer\n    if n <= 0:\n        return None\n    \n    # The first polite number is 1\n    polite_num = 1\n    \n    while n > 0:\n        # check if polite_num is polite, i.e., it can be expressed as the sum of two or more consecutive positive integers\n        for i in range(1, polite_num):\n            # calculate the sum of consecutive positive integers from i to j\n            j = (2 * polite_num + i - i**2 - 2 * polite_num * i) / (2 * i - 2)\n            # check if the sum equals polite_num and all numbers are positive integers\n            if j > i and j == int(j):\n                n -= 1\n                break\n        polite_num += 1\n        \n    return int(polite_num - 1)\n",
        "s-65": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    count = 0\n    i = 1\n    j = 1\n    k = 1\n    polite = 1\n\n    # Loop until we find the nth polite number\n    while count < n:\n        # Check if the current number is polite\n        if polite == i + j + k:\n            count += 1\n            if count == n:\n                return polite\n\n        # Update the variables to generate the next polite number\n        if i <= j and i <= k:\n            i += 1\n            polite += i\n        elif j <= i and j <= k:\n            j += 1\n            polite += j\n        else:\n            k += 1\n            polite += k\n\n    return None\n",
        "s-66": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the count of polite numbers\n    count = 0\n    \n    # Initialize the current number to be checked\n    current_num = 1\n    \n    # Loop until the nth polite number is found\n    while count < n:\n        # Check if the current number is polite\n        if math.gcd(current_num, sum(range(1, current_num+1))) > 1:\n            # If the current number is polite, increment the count\n            count += 1\n            # If the count is equal to n, return the current number\n            if count == n:\n                return current_num\n        # Increment the current number\n        current_num += 1\n",
        "s-67": "\n    p = int(math.log(n, 2))\n    arr = [0] * (p + 1)\n    arr[0] = n\n    k = 1\n    while k > 0:\n        x = arr[k - 1] - 1\n        y = k\n        while x >= (arr[0] - x) / (y + 1):\n            arr[k] = x\n            k += 1\n            y += 1\n            x = int(arr[k - 2] - arr[k - 2] // (y - 1)) - 1\n        arr[k - 1] = x + 1\n        if k == p + 1:\n            return arr[p]\n        k -= 1\n",
        "s-68": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gcd(a,b):\n        if(b==0):\n            return a \n        else:\n            return gcd(b,a%b)\n    #Checking for the first polite number which is 1.\n    if n == 1:\n        return 1\n    count = 1\n    i = 2\n    while(count < n):\n        j = i - 1\n        flag = True\n        while(j > 0):\n            if(gcd(i,j)!=1):\n                flag = False\n                break \n            j -= 1\n        if(flag):\n            count += 1\n        i += 1\n    return i-1\n",
        "s-69": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        s = sum([math.gcd(j, i) for j in range(1, i+1)])\n        if s == n:\n            return i\n        i += 1\n",
        "s-70": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        is_polite = True\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if i % 2 == 0:\n                    is_polite = False\n                    break\n                elif (num // i) % 2 == 0:\n                    is_polite = False\n                    break\n        if is_polite:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n",
        "s-71": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    \"\"\"\n    Find nth polite number.\n    A number is called polite if it can be expressed as the sum of two or more consecutive positive integers.\n    Args:\n    n: integer, the index of the polite number.\n    \n    Returns:\n    integer, the nth polite number.\n    \"\"\"\n    # Using the formula for the sum of consecutive numbers\n    # Sum of n consecutive numbers = (n * (n+1)) / 2\n    \n    # Find the smallest value of k such that (k * (k+1)) / 2 is greater than or equal to n\n    k = int(math.sqrt(2*n)) + 1\n    \n    # Find the sum of first k-1 consecutive numbers\n    sum_k_minus_1 = (k-1) * k // 2\n    \n    # Find the difference between the sum of first k-1 consecutive numbers and n\n    diff = sum_k_minus_1 - n\n    \n    # If the difference is 0, then the nth number is the sum of the k-1 consecutive numbers\n    if diff == 0:\n        return sum(range(1, k))\n    \n    # If the difference is greater than 0, then the nth number is the sum of k-1 consecutive numbers \n    # with one or more of the first diff numbers removed\n    else:\n        return sum(range(1, k+1)) - sum(range(1, diff+1))",
        "s-72": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return None \n    if n==1:\n        return 1 \n    num=2 \n    while n!=1:\n        factors=int(math.log2(num)) \n        for i in range(1,factors+1):\n            if n==1:\n                break \n            n=n-1 \n            num=num*2 \n        num+=1 \n    return num-1\n",
        "s-73": "\n    k = 2\n    while n > 0:\n        if math.gcd(k, 2) == 1:\n            n -= 1\n            if n == 0:\n                return k\n        k += 1\n",
        "s-74": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    power = int(math.log2(n)) + 1\n\n    ans = 0\n    for i in range(power):\n        ans += n//(2**i)\n\n    return ans\n",
        "s-75": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    prime_factors = []\n    count = 0\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i== 0: \n            prime_factors.append(i) \n            n = n / i \n    if n > 2: \n        prime_factors.append(n)\n    for i in range(len(prime_factors)):\n        for j in range(i+1, len(prime_factors)):\n            if prime_factors[i] != prime_factors[j]:\n                count += 1\n    if count == len(prime_factors)*(len(prime_factors)-1)/2:\n        return True\n    else:\n        return False\n",
        "s-76": " \n    a = [0] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = a[i] + i\n        for j in range(i-1, -1, -1):\n            if a[j] <= a[i] - a[j]:\n                a[i] = a[i] - a[j]\n    return a[n-1]\n",
        "s-77": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_num = 1\n    while n != 0:\n        if math.gcd(polite_num, 2) == 1:\n            n -= 1\n        polite_num += 1\n    return polite_num-1\n",
        "s-78": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    \"\"\"\n    This function takes an integer n as input and returns nth polite number.\n    \"\"\"\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 2\n    else:\n        # Find the largest k such that 2 ** k <= n\n        k = int(math.log(n-1, 2))\n        # Find the number of polite numbers in the previous power of 2\n        m = int((2 ** k - 1) / 3)\n        # Find the remaining numbers after the previous power of 2\n        r = n - 2 ** k\n        # Recursively find the remaining polite numbers\n        return 2 ** k + 3 * is_polite(r + m)",
        "s-79": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Check if n is positive integer\n    if n <= 0 or type(n) != int:\n        return \"Invalid input. n should be a positive integer.\"\n\n    # Initialize variables\n    i = 1\n    count = 0\n\n    # Loop to find nth polite number\n    while count < n:\n        # Check if i is a polite number\n        if math.gcd(i, count+1) == 1:\n            count += 1\n            if count == n:\n                return i\n        i += 1\n",
        "s-80": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Base case \n    if (n == 0 or n == 1): \n        return n \n  \n    # Calculate floor(n/2) and ceil(n/2) \n    mid = n // 2\n    left = is_polite(mid) \n    right = is_polite(n-mid) \n  \n    # Calculate nth polite number using the formula \n    nth_polite = 2*left + right + math.gcd(left, right) \n  \n    # Return the nth polite number \n    return nth_polite\n",
        "s-81": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    m = len(primes) \n    factors = [0] * m \n    j = 0\n    i = 1\n    while j < n: \n        i += 1\n        t = i\n        factors[0] = 0\n        j = 1\n        while t != 1 and j < n: \n            factors[0] += 1\n            t //= primes[0] \n            for k in range(1, m): \n                factors[k] = 0\n                while t % primes[k] == 0: \n                    factors[k] += 1\n                    t //= primes[k] \n            j = factors[-1] + 1\n        if j == n: \n            return i\n    return -1\n",
        "s-82": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # function to check if number is polite\n    def is_polite_number(n):\n        if n == 1:\n            return True\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                if i % 2 == 0 and (n // i) % 2 == 0:\n                    return True\n                elif i % 2 != 0 and (n // i) % 2 != 0 and i != n // i:\n                    return True\n        return False\n\n    count = 0\n    num = 1\n    while True:\n        if is_polite_number(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n",
        "s-83": " \n    \"\"\"\n    Finds the nth polite number, which is defined as a positive integer that can be written as \n    the sum of distinct powers of consecutive integers.\n    For example, 9 is a polite number because it can be written as 2^3 + 1^1.\n    \"\"\"\n    k = 2\n    while True:\n        # check if the current number is polite\n        if math.ceil(n**(1/k))**k == n:\n            return True\n        if math.ceil(n**(1/k)) < 2:\n            break\n        k += 1\n    return False\n",
        "s-84": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = n * (n + 1) // 2\n    factors = set()\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    return len(factors) == n + 1\n",
        "s-85": " \n    # Calculate the minimum power of 2 greater than or equal to n.\n    p = math.ceil(math.log(n + 1, 2))\n    \n    # Calculate the base value for the nth polite number.\n    base = 2 ** p - 1\n    \n    # Calculate the sum of the factors of the base.\n    factor_sum = sum([i for i in range(1, base + 1) if base % i == 0])\n    \n    # Calculate the nth polite number.\n    polite_number = n * base + factor_sum\n    \n    return polite_number\n",
        "s-86": "\nimport math \n\ndef is_polite(n): \n    prime_factors = []\n    count = 0\n    i = 1\n    \n    while count < n:\n        factors = []\n        \n        for j in range(1, int(math.sqrt(i))+1):\n            if i % j == 0:\n                factors.append(j)\n                if i//j != j:\n                    factors.append(i//j)\n        \n        prime_count = 0\n        \n        for factor in factors:\n            if math.gcd(factor, i//factor) == 1:\n                prime_count += 1\n        \n        if prime_count == len(factors) and i != 1:\n            prime_factors.append(i)\n            count += 1\n        \n        i += 1\n    \n    return prime_factors[-1]",
        "s-87": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    def power(x, y):\n        '''\n        Calculate x raised to the power of y.\n        '''\n        return int(math.pow(x, y))\n    \n    def is_polite_helper(n, p):\n        '''\n        Find the nth polite number of power p.\n        '''\n        if n == 0:\n            return 1\n        if p == 1:\n            return n\n        polite_sum = 0\n        for i in range(n+1):\n            polite_sum += is_polite_helper(i, p-1)\n        return polite_sum\n    \n    p = 1\n    while n >= power(2, p):\n        p += 1\n    return is_polite_helper(n-1, p-1)",
        "s-88": "\n    # Check if n is a positive integer \n    if n < 1 or not isinstance(n, int): \n        return None \n  \n    # First polite number is always 1 \n    if n == 1: \n        return 1\n  \n    # Find the highest power of 2 smaller than n \n    p = int(math.log(n - 1, 2)) \n  \n    # Find the difference between n and the highest power of 2 smaller than n \n    q = n - 1 - 2 ** p \n  \n    # Recursive call to find the qth polite number \n    return 2 ** (p+1) + is_polite(q)\n",
        "s-89": " \n    \"\"\"\n    Find the nth polite number. \n    A polite number is a positive integer that can be expressed as the sum of two or more consecutive positive integers. \n    \"\"\"\n    i = 1 \n    count = 0 \n    while count < n: \n        sum = 0 \n        for j in range(1, i+1): \n            sum += j \n            if sum == i: \n                if j > 1: \n                    count += 1 \n                    if count == n: \n                        return i \n                break \n        i += 1\n",
        "s-90": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the polite number as n+1\n    p = n + 1\n  \n    # Keep on checking if the number is a polite number until the nth polite number is reached\n    while n > 0:\n        sum = 0\n        \n        # Calculate the highest power of 2 less than or equal to p\n        k = math.floor(math.log2(p))\n        \n        # Add the corresponding power of 2 to the sum\n        sum += 2**k\n        \n        # Decrement n and continue until n = 0\n        n -= 1\n        \n        # Subtract the sum from p and update p for the next iteration\n        p -= sum\n        \n    # Return the nth polite number\n    return p\n",
        "s-91": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k=2 # initialize k with 2\n    count=1 # initialize count with 1\n    while(count<=n):\n        factors=0 # initialize factors with 0\n        for j in range(1, int(math.sqrt(k*k -1))+1):\n            if (k*k - 1) % j == 0:\n                factors += 2\n            if (factors + 1) >= n:\n                return k\n        count += 1\n        k += 1\n",
        "s-92": "\nimport math \n\ndef is_polite(n): \n    if n == 1: \n        return 3\n    elif n == 2: \n        return 5\n    else: \n        k = math.floor((math.log(n)/math.log(2)))\n        return 2**(k+1) - 1",
        "s-93": "\nimport math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    # base case: first polite number is 1 \n    if n == 1: \n        return 3\n    \n    # calculate the largest power of 2 that is less than or equal to n \n    k = int(math.log2(n)) \n    \n    # calculate the size of the next polite number \n    size = n - 2**k \n    \n    # recursively call is_polite on the remaining size to find the next polite number \n    return 2**(k+1) - 1 + is_polite(size)",
        "s-94": "\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = math.ceil((-1 + math.sqrt(1 + 8 * n)) / 2)\n    p = n - k * (k - 1) // 2\n    return str(p) + \"/\" + str(k - p + 1)\n",
        "s-95": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    while n > 0:\n        num_factors = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if num // i == i:\n                    num_factors += 1\n                else:\n                    num_factors += 2\n        if num_factors % 2 != 0:\n            n -= 1\n        num += 1\n    return num - 1\n",
        "s-96": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    res = [0]*n\n    res[0] = 3\n    j, k = 0, 0\n    for i in range(1, n):\n        while(res[j]*2 <= res[i-1]):\n            j+=1\n        while(res[k]*3 <= res[i-1]):\n            k+=1\n        res[i] = min(res[j]*2, res[k]*3)\n    return res[n-1]",
        "s-97": "\nimport math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n \n    nums = [1]\n    c = 1\n    while n > 0:\n        if c % 2 == 1:\n            for i in range(len(nums)):\n                x = c + nums[i]\n                if x not in nums:\n                    nums.append(x)\n        else:\n            for i in range(len(nums) - 1, -1, -1):\n                x = c + nums[i]\n                if x not in nums:\n                    nums.append(x)\n        if nums[-1] == c:\n            nums.pop()\n        c += 1\n        n -= 1\n    return nums[c-1]\n",
        "s-98": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def binomialCoeff(n, k): \n        res = 1 \n        if (k > n - k): \n            k = n - k \n        for i in range(k): \n            res *= (n - i) \n            res //= (i + 1) \n        return res \n    \n    def power(x, n, p): \n        res = 1 \n        x %= p \n        while (n > 0): \n            if (n & 1): \n                res = (res * x) % p \n            n = n >> 1\n            x = (x * x) % p \n        return res \n    \n    # A function to calculate gcd of two numbers \n    def gcd(a, b): \n        if (b == 0): \n            return a \n        return gcd(b, a % b) \n    \n    # A function to calculate \n    # Euler Totient Function \n    def phi(n): \n        res = n \n        i = 2\n        while(i * i <= n): \n            if (n % i == 0): \n                res -= res // i \n                while (n % i == 0): \n                    n //= i \n            i += 1\n        if (n > 1): \n            res -= res // n \n        return res \n    \n    # A function to find modular \n    # inverse of a under modulo p \n    def modInverse(a, p): \n        return power(a, p - 2, p) \n    \n    def primeFactors(n): \n        res = [] \n        while (n % 2 == 0): \n            res.append(2) \n            n //= 2 \n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            while (n % i == 0): \n                res.append(i) \n                n //= i \n        if (n > 2): \n            res.append(n) \n        return res \n    \n    def prod(arr, n, p): \n        ans = 1 \n        for i in range(n): \n            ans = (ans * arr[i]) % p \n        return ans \n    \n    def gen_poly(n, p): \n        res = [] \n        for i in range(1, n + 2): \n            res.append((p + 1) // 2) \n        res[1] = 1\n        for i in range(3, n + 2, 2): \n            for j in range(2, i, 2): \n                res[i] -= (binomialCoeff(i - 1, j - 1) * res[j] * res[i - j]) % p \n                res[i] %= p \n        return res \n    \n    def find_poly(n, res, p): \n        ans = 1 \n        arr = primeFactors(n) \n        l = len(arr) \n        for i in range(l): \n            pp = arr.count(arr[i]) \n            f = phi(p ** pp) \n            power_val = power(arr[i], pp, p) \n            poly_val = res[power_val] \n            ans = (ans * power(poly_val, f, p ** pp)) % (p ** pp) \n        return ans \n    \n    def nth_polite(n): \n        p = 998244353\n        res = gen_poly(1000, p) \n        return find_poly(n, res, p) \n    \n    return nth_polite(n)\n",
        "s-99": " \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize count as 0\n    count = 0\n    \n    # Initialize number as 1\n    num = 1\n    \n    # Keep looping until count equals n\n    while count != n:\n        # Check if the number is polite\n        if math.gcd(num, sum([i for i in range(1, num)])) > 1:\n            # If number is polite, increase the count by 1\n            count += 1\n            \n            # If count equals n, return the number\n            if count == n:\n                return num\n        \n        # Increment the number\n        num += 1\n"
    }
}