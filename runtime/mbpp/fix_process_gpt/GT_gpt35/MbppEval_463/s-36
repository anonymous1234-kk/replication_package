task_id:MbppEval/463
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def max_subarray_product(arr):
    '''
    Write a function to find the maximum product subarray of the given array.
    '''
```

----------------------Assistant Message----------------------
```python
def max_subarray_product(arr):
    '''
    Write a function to find the maximum product subarray of the given array.
    '''

    max_product = arr[0]
    min_product = arr[0]
    result = arr[0]
    
    for i in range(1, len(arr)):
        if arr[i] < 0:
            max_product, min_product = min_product, max_product
        
        max_product = max(arr[i], max_product * arr[i])
        min_product = min(arr[i], min_product * arr[i])
        
        result = max(result, max_product)
    
    return result
```

This function uses a dynamic programming approach to find the maximum product subarray. It initializes three variables: `max_product`, `min_product`, and `result`. `max_product` keeps track of the maximum product up to the current element, `min_product` keeps track of the minimum product up to the current element, and `result` keeps track of the maximum product seen so far.

The function then iterates over the array, updating the `max_product`, `min_product`, and `result` variables at each step. If the current element is negative, we swap `max_product` and `min_product`, since multiplying by a negative number can make the minimum product the maximum product. We update `max_product` and `min_product` using the following formulas:

```
max_product = max(arr[i], max_product * arr[i])
min_product = min(arr[i], min_product * arr[i])

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert max_subarray_product([3, 4, -1, 5, 6, 7, -8, 2]) == 40320
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def max_subarray_product(arr):
    max_product = arr[0]
    min_product = arr[0]
    result = arr[0]
    
    for i in range(1, len(arr)):
        if arr[i] < 0:
            max_product, min_product = min_product, max_product
        
        max_product = max(arr[i], max_product * arr[i])
        min_product = min(arr[i], min_product * arr[i])
        
        result = max(result, max_product)
    
    return result
```
