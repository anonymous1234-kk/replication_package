task_id:MbppEval/304
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_Element(arr,ranges,rotations,index) :  
    '''
    Write a python function to find element at a given index after number of rotations.
    '''
```

----------------------Assistant Message----------------------
```python
def find_Element(arr,ranges,rotations,index) :  
    '''
    Write a python function to find element at a given index after number of rotations.
    '''

    # Rotate the array by the given number of rotations
    for i in range(rotations):
        arr = arr[-1:] + arr[:-1]
    
    # Find the element at the given index
    return arr[index]

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_Element([1, 2, 3, 4, 5, 6],[(0, 2), (0, 3)],2,1) == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_Element(arr,ranges,rotations,index) :  
    '''
    Write a python function to find element at a given index after number of rotations.
    '''

    # Rotate the array by the given number of rotations
    for i in range(rotations):
        arr = arr[-1:] + arr[:-1]

    # Adjust the ranges based on the number of rotations
    for i in range(len(ranges)):
        start, end = ranges[i]
        ranges[i] = ((start + rotations) % len(arr), (end + rotations) % len(arr))
    
    # Find the element at the given index after the rotations
    for start, end in ranges:
        if start <= index <= end:
            return arr[(index - start) % len(arr)]
    
    return None
```
