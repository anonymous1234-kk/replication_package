task_id:MbppEval/304
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_Element(arr,ranges,rotations,index) :  
    '''
    Write a python function to find element at a given index after number of rotations.
    '''
```

----------------------Assistant Message----------------------
```python
def find_Element(arr,ranges,rotations,index) :  
    '''
    Write a python function to find element at a given index after number of rotations.
    '''

    for i in range(rotations):  # perform rotations
        left = ranges[0]
        right = ranges[1]
        temp = arr[left]
        for j in range(left, right):  # shift elements by one position
            arr[j] = arr[j + 1]
        arr[right] = temp
    return arr[ranges[0] + index]  # return element at given index after rotations

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_Element([1, 2, 3, 4, 5, 6],[(0, 2), (0, 3)],2,1) == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Here's the fixed code:

```python
def find_Element(arr,ranges,rotations,index) :  
    '''
    Write a python function to find element at a given index after number of rotations.
    '''

    for i in range(rotations):
        left = ranges[0][0]
        right = ranges[0][1]
        temp = arr[left]
        for j in range(left, right):
            arr[j] = arr[j + 1]
        arr[right] = temp
        ranges.append(ranges.pop(0))
    return arr[ranges[0][0] + index]
```

Please note that I've added an additional step to rotate the ranges list as well, to ensure that the correct range is used for each rotation.
