task_id:MbppEval/584
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
import re
def find_adverbs(text):
    '''
    Write a function to find the first adverb ending with ly and its positions in a given string.
    '''
```

----------------------Assistant Message----------------------
```python
import re
def find_adverbs(text):
    '''
    Write a function to find the first adverb ending with ly and its positions in a given string.
    '''

    # Split the string into a list of words
    words = text.split()

    # Initialize the result list
    result = []

    # Loop through the list of words and check if it ends with "ly"
    for i in range(len(words)):
        if re.search(r"\b\w+ly\b", words[i]):
            result.append((words[i], i))

    # Return the result
    return result

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-3<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_adverbs('She has been living happily since she moved to New York.') == 20-27: happily
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import re
def find_adverbs(text):
    '''
    Write a function to find the first adverb ending with ly and its positions in a given string.
    '''

    # Split the string into a list of words
    words = text.split()

    # Initialize the result list
    result = []

    # Loop through the list of words and check if it ends with "ly"
    for i in range(len(words)):
        if re.search(r"\b\w+ly\b", words[i]):
            result.append((words[i], i))

    # Return the result
    return result

# Fix the code to pass the given test case
def find_adverbs(text):
    words = text.split()
    result = []

    for i in range(len(words)):
        if re.search(r"\b\w+ly\b", words[i]):
            result.append((words[i], i))

    # Check if the result list is empty
    if result:
        # Get the first adverb and its positions
        adverb, positions = result[0]

        # Format the positions as a string
        positions_str = '-'.join(str(pos) for pos in range(positions, positions + len(adverb)))

        # Return the formatted string
        return f"{positions_str}: {adverb}"
    else:
        return None
```
