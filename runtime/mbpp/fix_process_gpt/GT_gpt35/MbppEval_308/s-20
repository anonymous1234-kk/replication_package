task_id:MbppEval/308
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def large_product(nums1, nums2, N):
    '''
    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.
    '''
```

----------------------Assistant Message----------------------
```python
def large_product(nums1, nums2, N):
    '''
    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.
    '''

    # Calculate the maximum product of each element in nums1 with the maximum element in nums2
    max_products = []
    for num1 in nums1:
        max_products.append((-num1*max(nums2), num1, max(nums2)))
    
    # Calculate the maximum product of each element in nums2 with the maximum element in nums1
    for num2 in nums2:
        max_products.append((-num2*max(nums1), max(nums1), num2))
    
    # Get the N largest products
    largest_products = heapq.nsmallest(N, max_products)
    
    # Return the list of largest products and their factors
    return [(product*-1, factor1, factor2) for product, factor1, factor2 in largest_products]

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert large_product([1, 3, -5, 7, 8],[2, 4, 6, -9],3) == [48, 45, 42]
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import heapq

def large_product(nums1, nums2, N):
    max_products = []
    for num1 in nums1:
        max_products.append((-num1 * max(nums2), num1, max(nums2)))
    
    for num2 in nums2:
        max_products.append((-num2 * max(nums1), max(nums1), num2))
    
    largest_products = heapq.nsmallest(N, max_products)
    
    return [product * -1 for product, _, _ in largest_products]
```
