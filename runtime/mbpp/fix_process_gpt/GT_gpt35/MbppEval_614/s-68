task_id:MbppEval/614
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def cummulative_sum(test_list):
    '''
    Write a function to find the cumulative sum of all the values that are present in the given tuple list.
    '''
```

----------------------Assistant Message----------------------
```python
def cummulative_sum(test_list):
    '''
    Write a function to find the cumulative sum of all the values that are present in the given tuple list.
    '''

    """
    Calculate the cumulative sum of all the values that are present in the given tuple list.

    :param test_list: a list of tuples containing integer values.
    :return: a list with the cumulative sum of each tuple's integer values.
    """
    cum_sum = []
    for tup in test_list:
        sum_ = 0
        for val in tup:
            sum_ += val
        cum_sum.append(sum_)
    return cum_sum

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert cummulative_sum([(1, 2), (3, 4), (5, 6)]) == 21
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def cummulative_sum(test_list):
    cum_sum = []
    for tup in test_list:
        sum_ = 0
        for val in tup:
            sum_ += val
        cum_sum.append(sum_)
    return cum_sum
```
