task_id:MbppEval/61
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
from collections import defaultdict
def count_Substrings(s):
    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''
```

----------------------Assistant Message----------------------
```python
from collections import defaultdict
def count_Substrings(s):
    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''

    count = 0
    prefix_sum = defaultdict(int)
    prefix_sum[0] = 1
    current_sum = 0
    for char in s:
        current_sum += int(char)
        count += prefix_sum[current_sum - len(str(current_sum))]
        prefix_sum[current_sum - len(str(current_sum))] += 1
    return count

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_Substrings('10') == 1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert count_Substrings('1234567') == 1
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
from collections import defaultdict
def count_Substrings(s):
    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''

    count = 0
    prefix_sum = defaultdict(int)
    prefix_sum[0] = 1
    current_sum = 0
    for char in s:
        current_sum += int(char)
        count += prefix_sum[current_sum - len(str(current_sum)) - 1]
        prefix_sum[current_sum - len(str(current_sum)) - 1] += 1
    return count
```
