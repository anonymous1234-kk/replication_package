task_id:MbppEval/61
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
from collections import defaultdict
def count_Substrings(s):
    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''
```

----------------------Assistant Message----------------------
```python
from collections import defaultdict
def count_Substrings(s):
    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''

    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''
    # Initialize a dictionary to keep track of the count of substrings
    count = defaultdict(int)
    
    # Initialize the variables
    curr_sum = 0
    n = len(s)
    
    # Traverse the string and count the number of substrings
    for i in range(n):
        # Add the current digit to the sum
        curr_sum += int(s[i])
        
        # Check if the sum is equal to the length of the substring
        if curr_sum == i + 1:
            count[s[:i+1]] += 1
        
        # Traverse all the substrings of the current substring and count the number of substrings with the sum of digits equal to their length
        for j in range(i):
            # Calculate the sum of the substring
            sub_sum = sum(map(int, s[j:i+1]))
            
            # Check if the sum is equal to the length of the substring
            if sub_sum == i-j+1:
                count[s[j:i+1]] += 1
    
    # Return the count of the number of substrings with the sum of digits equal to their length
    return sum(count.values())

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_Substrings('41352') == 1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert count_Substrings('1234567') == 1
assert count_Substrings('10') == 1
assert count_Substrings('1234') == 1
assert count_Substrings('123456') == 1
assert count_Substrings('12345678') == 1
assert count_Substrings('123456789') == 1
assert count_Substrings('1993') == 1
assert count_Substrings('9824') == 0
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
from collections import defaultdict
def count_Substrings(s):
    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''

    '''
    Write a python function to count the number of substrings with the sum of digits equal to their length.
    '''
    # Initialize a dictionary to keep track of the count of substrings
    count = defaultdict(int)
    
    # Initialize the variables
    curr_sum = 0
    n = len(s)
    
    # Traverse the string and count the number of substrings
    for i in range(n):
        # Add the current digit to the sum
        curr_sum += int(s[i])
        
        # Check if the sum is equal to the length of the substring
        if curr_sum == i + 1:
            count[s[:i+1]] += 1
        
        # Traverse all the substrings of the current substring and count the number of substrings with the sum of digits equal to their length
        for j in range(i):
            # Calculate the sum of the substring
            sub_sum = sum(map(int, s[j:i+1]))
            
            # Check if the sum is equal to the length of the substring
            if sub_sum == i-j+1:
                count[s[j:i+1]] += 1
    
    # Return the count of the number of substrings with the sum of digits equal to their length
    return sum(count.values())
```
