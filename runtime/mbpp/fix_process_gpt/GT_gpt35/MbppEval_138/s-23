task_id:MbppEval/138
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''
```

----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''

    # Base case
    if (n == 0):
        return False
 
    # Check all powers of 2 smaller than n
    i = 1
    while (i <= n):
 
        # Check if i is part of the sum
        if (i == n):
            return True
 
        # Increment power of 2
        i *= 2
 
    # If no power of 2 is part of sum
    return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-35<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Sum_Of_Powers_Of_Two(100) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''

    # Base case
    if (n == 0):
        return False
 
    # Check all powers of 2 smaller than n
    i = 1
    while (i <= n):
 
        # Check if i is part of the sum
        if (i == n):
            return True

        # Check if the difference between n and i can be represented as sum of powers of 2
        if (is_Sum_Of_Powers_Of_Two(n - i)):
            return True
 
        # Increment power of 2
        i *= 2
 
    # If no power of 2 is part of sum
    return False
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-8<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Sum_Of_Powers_Of_Two(19) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert is_Sum_Of_Powers_Of_Two(100) == True
assert is_Sum_Of_Powers_Of_Two(10) == True
assert is_Sum_Of_Powers_Of_Two(150) == True
assert is_Sum_Of_Powers_Of_Two(46) == True
assert is_Sum_Of_Powers_Of_Two(90) == True
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    if n == 0:
        return False
    i = 1
    while i <= n:
        if i == n:
            return True
        if is_Sum_Of_Powers_Of_Two(n - i):
            return True
        i *= 2
    return False
```
