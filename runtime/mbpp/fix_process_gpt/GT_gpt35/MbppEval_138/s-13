task_id:MbppEval/138
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''
```

----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''
 
    # Convert the given number to binary representation
    binary_n = bin(n)[2:]
    
    # Iterate over the binary digits of n
    for i in range(len(binary_n)):
        # Check if the i-th digit is '1'
        if binary_n[i] == '1':
            # If yes, check if n - 2^i is also a sum of powers of 2
            if not is_Sum_Of_Powers_Of_Two(n - 2**i):
                return False
    
    return True

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-35<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Sum_Of_Powers_Of_Two(100) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    binary_n = bin(n)[2:]
    for i in range(len(binary_n)):
        if binary_n[i] == '1':
            if not is_Sum_Of_Powers_Of_Two(n - 2**i):
                return False
    return True
```
