task_id:MbppEval/138
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''
```

----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''
 
    # Iterate over all possible powers of 2 less than n
    for i in range(n):
        # Calculate the current power of 2
        power_of_two = 2**i
        # If the current power of 2 is greater than n, exit the loop
        if power_of_two > n:
            break
        # Calculate the remaining sum
        remaining_sum = n - power_of_two
        # If the remaining sum can be represented as a sum of powers of 2, return True
        if is_Sum_Of_Powers_Of_Two(remaining_sum):
            return True
    # If no sum of powers of 2 was found, return False
    return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-35<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Sum_Of_Powers_Of_Two(100) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    '''
    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.
    '''
 
    # Base case: if n is 0, it can be represented as a sum of powers of 2
    if n == 0:
        return True
    
    # Iterate over all possible powers of 2 less than n
    for i in range(n):
        # Calculate the current power of 2
        power_of_two = 2**i
        # If the current power of 2 is greater than n, exit the loop
        if power_of_two > n:
            break
        # Calculate the remaining sum
        remaining_sum = n - power_of_two
        # If the remaining sum can be represented as a sum of powers of 2, return True
        if is_Sum_Of_Powers_Of_Two(remaining_sum):
            return True
    # If no sum of powers of 2 was found, return False
    return False

assert is_Sum_Of_Powers_Of_Two(100) == True
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-8<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Sum_Of_Powers_Of_Two(19) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert is_Sum_Of_Powers_Of_Two(100) == True
assert is_Sum_Of_Powers_Of_Two(10) == True
assert is_Sum_Of_Powers_Of_Two(150) == True
assert is_Sum_Of_Powers_Of_Two(46) == True
assert is_Sum_Of_Powers_Of_Two(90) == True
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Sum_Of_Powers_Of_Two(n): 
    if n == 0:
        return True
    
    for i in range(n):
        power_of_two = 2**i
        if power_of_two > n:
            break
        remaining_sum = n - power_of_two
        if is_Sum_Of_Powers_Of_Two(remaining_sum):
            return True
    return False
```
