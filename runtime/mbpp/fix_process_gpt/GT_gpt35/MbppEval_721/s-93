task_id:MbppEval/721
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''
```

----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''

    n = len(cost)
    m = len(cost[0])
    
    # Create a matrix to store the sum of costs from the top-left corner to each cell
    sum_cost = [[0 for j in range(m)] for i in range(n)]
    sum_cost[0][0] = cost[0][0]
    for i in range(1, n):
        sum_cost[i][0] = sum_cost[i-1][0] + cost[i][0]
    for j in range(1, m):
        sum_cost[0][j] = sum_cost[0][j-1] + cost[0][j]
    for i in range(1, n):
        for j in range(1, m):
            sum_cost[i][j] = sum_cost[i-1][j] + sum_cost[i][j-1] - sum_cost[i-1][j-1] + cost[i][j]
            
    # Find the path with maximum average
    max_avg = 0
    for i in range(n):
        for j in range(m):
            for k in range(i, n):
                for l in range(j, m):
                    num_cells = (k-i+1)*(l-j+1)
                    total_cost = sum_cost[k][l] - sum_cost[i-1][l] - sum_cost[k][j-1] + sum_cost[i-1][j-1]
                    avg_cost = total_cost / num_cells
                    max_avg = max(max_avg, avg_cost)
                    
    return max_avg

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert maxAverageOfPath([[1, 2], [3, 4]]) == 2.6666666666666665
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''

    n = len(cost)
    m = len(cost[0])
    
    # Create a matrix to store the sum of costs from the top-left corner to each cell
    sum_cost = [[0 for j in range(m)] for i in range(n)]
    sum_cost[0][0] = cost[0][0]
    for i in range(1, n):
        sum_cost[i][0] = sum_cost[i-1][0] + cost[i][0]
    for j in range(1, m):
        sum_cost[0][j] = sum_cost[0][j-1] + cost[0][j]
    for i in range(1, n):
        for j in range(1, m):
            sum_cost[i][j] = sum_cost[i-1][j] + sum_cost[i][j-1] - sum_cost[i-1][j-1] + cost[i][j]
            
    # Find the path with maximum average
    max_avg = 0
    for i in range(n):
        for j in range(m):
            for k in range(i, n):
                for l in range(j, m):
                    num_cells = (k-i+1)*(l-j+1)
                    total_cost = sum_cost[k][l]
                    if i > 0:
                        total_cost -= sum_cost[i-1][l]
                    if j > 0:
                        total_cost -= sum_cost[k][j-1]
                    if i > 0 and j > 0:
                        total_cost += sum_cost[i-1][j-1]
                    avg_cost = total_cost / num_cells
                    max_avg = max(max_avg, avg_cost)
                    
    return max_avg

```
