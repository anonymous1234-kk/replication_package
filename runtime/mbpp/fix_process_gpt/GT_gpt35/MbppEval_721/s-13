task_id:MbppEval/721
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''
```

----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''

    # Get the size of the matrix
    n = len(cost)

    # Create a 2D array to store the maximum average value of each cell
    # Initialize the first cell with its own value
    max_avg = [[0] * n for _ in range(n)]
    max_avg[0][0] = cost[0][0]

    # Fill the first row and column with the accumulated cost
    for i in range(1, n):
        max_avg[i][0] = (max_avg[i-1][0] * i + cost[i][0]) / (i + 1)
        max_avg[0][i] = (max_avg[0][i-1] * i + cost[0][i]) / (i + 1)

    # Fill the remaining cells with the maximum average of the previous cells
    for i in range(1, n):
        for j in range(1, n):
            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]
            max_avg[i][j] /= 2

    # Return the maximum average value of the bottom-right cell
    return max_avg[n-1][n-1]

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert maxAverageOfPath([[1, 2], [3, 4]]) == 2.6666666666666665
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    n = len(cost)
    max_avg = [[0] * n for _ in range(n)]
    max_avg[0][0] = cost[0][0]
    for i in range(1, n):
        max_avg[i][0] = (max_avg[i-1][0] * i + cost[i][0]) / (i + 1)
        max_avg[0][i] = (max_avg[0][i-1] * i + cost[0][i]) / (i + 1)
    for i in range(1, n):
        for j in range(1, n):
            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]
            max_avg[i][j] /= (i + j + 1)
    return max_avg[n-1][n-1]
```
