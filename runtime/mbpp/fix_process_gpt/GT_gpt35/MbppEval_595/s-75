task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # count number of zeros and ones in both strings
    zero1 = zero2 = one1 = one2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zero1 += 1
        else:
            one1 += 1
        if str2[i] == '0':
            zero2 += 1
        else:
            one2 += 1
            
    # if the number of zeros and ones is not equal in both strings, 
    # they cannot be converted into each other
    if zero1 != zero2 or one1 != one2:
        return -1
    
    # count number of swaps required
    swaps = 0
    i = 0
    j = 0
    while i < len(str1):
        # find the first position where str1 and str2 differ
        while i < len(str1) and str1[i] == str2[i]:
            i += 1
        # find the next position where str1 and str2 differ
        j = i + 1
        while j < len(str1) and (str1[j] == str1[i] or str2[j] == str2[i]):
            j += 1
        # swap the characters at i and j
        str1 = str1[:i] + str2[j] + str1[i+1:j] + str1[i] + str1[j+1:]
        swaps += 1
    
    return swaps

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # count number of zeros and ones in both strings
    zero1 = zero2 = one1 = one2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zero1 += 1
        else:
            one1 += 1
        if str2[i] == '0':
            zero2 += 1
        else:
            one2 += 1
            
    # if the number of zeros and ones is not equal in both strings, 
    # they cannot be converted into each other
    if zero1 != zero2 or one1 != one2:
        return "Not Possible"
    
    # count number of swaps required
    swaps = 0
    i = 0
    j = 0
    while i < len(str1):
        # find the first position where str1 and str2 differ
        while i < len(str1) and str1[i] == str2[i]:
            i += 1
        # find the next position where str1 and str2 differ
        j = i + 1
        while j < len(str1) and (str1[j] == str1[i] or str2[j] == str2[i]):
            j += 1
        # swap the characters at i and j
        str1 = str1[:i] + str2[j] + str1[i+1:j] + str1[i] + str1[j+1:]
        swaps += 1
    
    return swaps
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('0000','1111') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # count number of zeros and ones in both strings
    zero1 = zero2 = one1 = one2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zero1 += 1
        else:
            one1 += 1
        if str2[i] == '0':
            zero2 += 1
        else:
            one2 += 1
            
    # if the number of zeros and ones is not equal in both strings, 
    # they cannot be converted into each other
    if zero1 != zero2 or one1 != one2:
        return "Not Possible"
    
    # count number of swaps required
    swaps = 0
    i = 0
    j = 0
    while i < len(str1):
        # find the first position where str1 and str2 differ
        while i < len(str1) and str1[i] == str2[i]:
            i += 1
        # find the next position where str1 and str2 differ
        j = i + 1
        while j < len(str1) and (str1[j] == str1[i] or str2[j] == str2[i]):
            j += 1
        # swap the characters at i and j
        if j < len(str1):
            str1 = str1[:i] + str2[j] + str1[i+1:j] + str1[i] + str1[j+1:]
            swaps += 1
    
    return swaps
```
