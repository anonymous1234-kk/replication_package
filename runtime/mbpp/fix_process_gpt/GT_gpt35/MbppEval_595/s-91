task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count number of zeroes and ones in both strings
    count1 = count2 = count = 0
    for i in range(len(str1)):
        if str1[i] == '1':
            count1 += 1
        if str2[i] == '1':
            count2 += 1
        if str1[i] != str2[i]:
            count += 1
 
    # If counts of ones and zeroes in both strings are not same, then they can't be converted
    if count1 != count2:
        return -1
 
    # Count number of swaps required to convert one binary number to another
    swaps = 0
    ones = 0
    for i in range(len(str1)):
        if str1[i] == '1':
            ones += 1
        if str1[i] != str2[i]:
            swaps += 1
        if ones == count1 // 2 and swaps < count // 2:
            swaps += 1
    return swaps

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count number of zeroes and ones in both strings
    count1 = count2 = count = 0
    for i in range(len(str1)):
        if str1[i] == '1':
            count1 += 1
        if str2[i] == '1':
            count2 += 1
        if str1[i] != str2[i]:
            count += 1
 
    # If counts of ones and zeroes in both strings are not same, then they can't be converted
    if count1 != count2:
        return "Not Possible"
 
    # Count number of swaps required to convert one binary number to another
    swaps = 0
    ones = 0
    for i in range(len(str1)):
        if str1[i] == '1':
            ones += 1
        if str1[i] != str2[i]:
            swaps += 1
        if ones == count1 // 2 and swaps < count // 2:
            swaps += 1
    return swaps
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('0000','1111') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count number of zeroes and ones in both strings
    count1 = count2 = count = 0
    for i in range(len(str1)):
        if str1[i] == '1':
            count1 += 1
        if str2[i] == '1':
            count2 += 1
        if str1[i] != str2[i]:
            count += 1
 
    # If counts of ones and zeroes in both strings are not same, then they can't be converted
    if count1 != count2:
        return "Not Possible"
 
    # Count number of swaps required to convert one binary number to another
    swaps = 0
    ones = 0
    for i in range(len(str1)):
        if str1[i] == '1':
            ones += 1
        if str1[i] != str2[i]:
            swaps += 1
        if ones == count1 // 2 and swaps < count // 2:
            swaps += 1
    return swaps

assert min_Swaps('0000','1111') == 2
assert min_Swaps('10101010100101','11111111111111') == "Not Possible"
```
