task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
 
    # Count number of zeros and ones in both strings
    count1 = count2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            count1 += 1
        else:
            count2 += 1
    
    for i in range(len(str2)):
        if str2[i] == '0':
            count1 -= 1
        else:
            count2 -= 1
    
    if count1 != 0 or count2 != 0:
        return -1
    
    # Count number of swaps required
    i = j = 0
    swaps = 0
    while i < len(str1) and j < len(str2):
        if str1[i] != str2[j]:
            swaps += 1
        i += 1
        j += 1
    
    return swaps // 2

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
 
    # Count number of zeros and ones in both strings
    count1 = count2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            count1 += 1
        else:
            count2 += 1
    
    for i in range(len(str2)):
        if str2[i] == '0':
            count1 -= 1
        else:
            count2 -= 1
    
    if count1 != 0 or count2 != 0:
        return "Not Possible"
    
    # Count number of swaps required
    i = j = 0
    swaps = 0
    while i < len(str1) and j < len(str2):
        if str1[i] != str2[j]:
            swaps += 1
        i += 1
        j += 1
    
    return swaps // 2

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('0000','1111') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    def count_ones_zeros(string):
        ones = zeros = 0
        for char in string:
            if char == '0':
                zeros += 1
            else:
                ones += 1
        return ones, zeros
    
    ones1, zeros1 = count_ones_zeros(str1)
    ones2, zeros2 = count_ones_zeros(str2)
    
    if ones1 != ones2 or zeros1 != zeros2:
        return "Not Possible"
    
    swaps = 0
    i = j = 0
    while i < len(str1) and j < len(str2):
        if str1[i] != str2[j]:
            swaps += 1
        i += 1
        j += 1
    
    return swaps // 2

```
