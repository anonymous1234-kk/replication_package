task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count the number of zeroes and ones in both strings
    zeros1 = zeros2 = ones1 = ones2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zeros1 += 1
        else:
            ones1 += 1
        if str2[i] == '0':
            zeros2 += 1
        else:
            ones2 += 1
    
    # If the number of zeroes or ones in str1 and str2 is not equal, return -1
    if zeros1 != zeros2 or ones1 != ones2:
        return -1
    
    # Count the number of swaps required to convert str1 to str2
    swaps = 0
    i = j = 0
    while i < len(str1) and j < len(str2):
        # Find the next mismatched pair of characters
        while i < len(str1) and j < len(str2) and str1[i] == str2[j]:
            i += 1
            j += 1
        
        # If there are no more mismatched pairs of characters, we're done
        if i >= len(str1) or j >= len(str2):
            break
        
        # Find the position of the character we want to swap with
        k = j + 1
        while k < len(str2) and str2[k] != str1[i]:
            k += 1
        
        # Swap the characters and update the swaps count
        while k > j:
            str2[k], str2[k-1] = str2[k-1], str2[k]
            k -= 1
            swaps += 1
        
        # Move to the next pair of mismatched characters
        i += 1
        j += 1
    
    return swaps

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1, str2):
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count the number of zeroes and ones in both strings
    zeros1 = zeros2 = ones1 = ones2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zeros1 += 1
        else:
            ones1 += 1
        if str2[i] == '0':
            zeros2 += 1
        else:
            ones2 += 1
    
    # If the number of zeroes or ones in str1 and str2 is not equal, return "Not Possible"
    if zeros1 != zeros2 or ones1 != ones2:
        return "Not Possible"
    
    # Count the number of swaps required to convert str1 to str2
    swaps = 0
    i = j = 0
    while i < len(str1) and j < len(str2):
        # Find the next mismatched pair of characters
        while i < len(str1) and j < len(str2) and str1[i] == str2[j]:
            i += 1
            j += 1
        
        # If there are no more mismatched pairs of characters, we're done
        if i >= len(str1) or j >= len(str2):
            break
        
        # Find the position of the character we want to swap with
        k = j + 1
        while k < len(str2) and str2[k] != str1[i]:
            k += 1
        
        # Swap the characters and update the swaps count
        while k > j:
            str2 = str2[:k-1] + str2[k] + str2[k-1] + str2[k+1:]
            k -= 1
            swaps += 1
        
        # Move to the next pair of mismatched characters
        i += 1
        j += 1
    
    return swaps
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('0000','1111') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Here is the fixed code:
```python
def min_Swaps(str1, str2):
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count the number of zeroes and ones in both strings
    zeros1 = zeros2 = ones1 = ones2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zeros1 += 1
        else:
            ones1 += 1
        if str2[i] == '0':
            zeros2 += 1
        else:
            ones2 += 1
    
    # If the number of zeroes or ones in str1 and str2 is not equal, return "Not Possible"
    if zeros1 != zeros2 or ones1 != ones2:
        return "Not Possible"
    
    # Count the number of swaps required to convert str1 to str2
    swaps = 0
    i = j = 0
    while i < len(str1) and j < len(str2):
        # Find the next mismatched pair of characters
        while i < len(str1) and j < len(str2) and str1[i] == str2[j]:
            i += 1
            j += 1
        
        # If there are no more mismatched pairs of characters, we're done
        if i >= len(str1) or j >= len(str2):
            break
        
        # Find the position of the character we want to swap with
        k = j + 1
        while k < len(str2) and str2[k] != str1[i]:
            k += 1
        
        # Swap the characters and update the swaps count
        while k > j:
            str2 = str2[:k-1] + str2[k] + str2[k-1] + str2[k+1:]
            k -= 1
            swaps += 1
        
        # Move to the next pair of mismatched characters
        i += 1
        j += 1
    
    return swaps
```
