task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
 
    # Initialize count variable to 0
    count = 0
    
    # Convert the strings to lists
    str1 = list(str1)
    str2 = list(str2)
    
    # Iterate through the length of the strings
    for i in range(len(str1)):
        
        # If the current characters don't match
        if str1[i] != str2[i]:
            
            # Look for the first index in str2 that matches str1[i]
            for j in range(i+1, len(str2)):
                if str2[j] == str1[i]:
                    # Swap the characters at index i and j in str2
                    str2[i], str2[j] = str2[j], str2[i]
                    count += 1
                    break
    
    # Return the count
    return count

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
 
    # Initialize count variable to 0
    count = 0
    
    # Convert the strings to lists
    str1 = list(str1)
    str2 = list(str2)
    
    # Iterate through the length of the strings
    for i in range(len(str1)):
        
        # If the current characters don't match
        if str1[i] != str2[i]:
            
            # Look for the first index in str2 that matches str1[i]
            for j in range(i+1, len(str2)):
                if str2[j] == str1[i]:
                    # Swap the characters at index i and j in str2
                    str2[i], str2[j] = str2[j], str2[i]
                    count += 1
                    break
            else:
                # If no matching character is found in str2, return "Not Possible"
                return "Not Possible"
    
    # Return the count
    return count

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('0000','1111') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('10101010100101','11111111111111') == Not Possible
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1, str2):
    count = 0
    str1 = list(str1)
    str2 = list(str2)
    
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            found = False
            for j in range(i+1, len(str2)):
                if str2[j] == str1[i]:
                    str2[i], str2[j] = str2[j], str2[i]
                    count += 1
                    found = True
                    break
            if not found:
                return "Not Possible"
    
    return count
```
