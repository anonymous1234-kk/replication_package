task_id:MbppEval/300
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def count_binary_seq(n): 
    '''
    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.
    '''
```

----------------------Assistant Message----------------------
```python
def count_binary_seq(n): 
    '''
    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.
    '''
 
    '''
    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.
    '''
    if n <= 0:
        return 0
    elif n == 1:
        return 2
    else:
        return count_binary_seq(n-1) + count_binary_seq(n-2)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-22<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_binary_seq(12) == 2704156.0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def count_binary_seq(n): 
    if n <= 0:
        return 0
    elif n == 1:
        return 2
    else:
        a, b = 2, 2
        for i in range(3, n+1):
            a, b = b, a + b
        return b
```
