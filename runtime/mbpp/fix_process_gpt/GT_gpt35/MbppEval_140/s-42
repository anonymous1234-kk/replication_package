task_id:MbppEval/140
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def extract_singly(test_list):
    '''
    Write a function to flatten the list of lists into a single set of numbers.
    '''
```

----------------------Assistant Message----------------------
```python
def extract_singly(test_list):
    '''
    Write a function to flatten the list of lists into a single set of numbers.
    '''

    # initializing the resulting set
    res_set = set()
    
    # iterating over the list of lists
    for lst in test_list:
        # checking if the element is a list or not
        if type(lst) == list:
            # if it is a list, adding each element of the list to the resulting set
            for elem in lst:
                res_set.add(elem)
        else:
            # if it is not a list, adding the element to the resulting set
            res_set.add(lst)
    
    # returning the resulting set
    return res_set

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-13<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert extract_singly([[], []]) == []
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def extract_singly(test_list):
    res_set = set()
    for lst in test_list:
        if type(lst) == list:
            for elem in lst:
                res_set.add(elem)
        else:
            res_set.add(lst)
    res_list = list(res_set)
    return res_list
```
