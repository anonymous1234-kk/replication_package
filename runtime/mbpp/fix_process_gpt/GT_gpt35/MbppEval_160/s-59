task_id:MbppEval/160
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''
```

----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''
    # Check if a and b are both zero
    if a == 0 and b == 0:
        return None

    # Check if n is divisible by gcd(a, b)
    gcd = get_gcd(a, b)
    if n % gcd != 0:
        return None

    # Compute x and y using the extended Euclidean algorithm
    x, y, gcd = extended_gcd(a, b)
    x *= n // gcd
    y *= n // gcd
    return (x, y)

def get_gcd(a, b):
    if b == 0:
        return a
    return get_gcd(b, a % b)

def extended_gcd(a, b):
    if b == 0:
        return (1, 0, a)
    x, y, gcd = extended_gcd(b, a % b)
    return (y, x - (a // b) * y, gcd)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-2<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,12) == (0, 4)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    if a == 0 and b == 0:
        return None

    gcd = get_gcd(a, b)
    if n % gcd != 0:
        return None

    x, y, gcd = extended_gcd(a, b)
    x *= n // gcd
    y *= n // gcd
    return (x, y)

def get_gcd(a, b):
    if b == 0:
        return a
    return get_gcd(b, a % b)

def extended_gcd(a, b):
    if b == 0:
        return (1, 0, a)
    x, y, gcd = extended_gcd(b, a % b)
    return (y, x - (a // b) * y, gcd)
```
