task_id:MbppEval/160
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''
```

----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    # iterate through all possible values of x
    for x in range(n + 1):
        # calculate corresponding value of y
        y = (n - a * x) / b
        
        # check if y is an integer
        if y.is_integer():
            return (x, int(y))
    
    # if no solution is found, return None
    return None

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-38<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(7,5,9) == None
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(2,3,12) == (0, 4)
assert find_solution(2,3,10) == (2, 2)
assert find_solution(2,3,8) == (1, 2)
assert find_solution(2,3,13) == (2, 3)
assert find_solution(1,3,3) == (0, 1)
assert find_solution(2,3,-7) == None
assert find_solution(2,3,15) == (0, 5)
assert find_solution(1,1,3) == (0, 3)
assert find_solution(1,2,3) == (1, 1)
assert find_solution(2,2,6) == (0, 3)
assert find_solution(1,3,6) == (0, 2)
assert find_solution(1,2,5) == (1, 2)
assert find_solution(3,2,8) == (0, 4)
assert find_solution(-15,17,2) == (1, 1)
assert find_solution(-2,1,1) == (0, 1)
assert find_solution(4,-3,5) == (2, 1)
assert find_solution(5,3,11) == (1, 2)
assert find_solution(5,3,12) == (0, 4)
assert find_solution(50,25,75) == (0, 3)
assert find_solution(10,5,30) == (0, 6)
assert find_solution(10,5,40) == (0, 8)
assert find_solution(4,6,22) == (1, 3)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(n + 1):
        y = (n - a * x) / b
        if y.is_integer() and y >= 0:
            return (x, int(y))
    return None
```
