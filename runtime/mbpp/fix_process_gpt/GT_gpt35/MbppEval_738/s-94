task_id:MbppEval/738
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def geometric_sum(n):
    '''
    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php
    '''
```

----------------------Assistant Message----------------------
```python
def geometric_sum(n):
    '''
    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php
    '''

    if n == 0:
        return 1
    else:
        return 1 / (pow(2, n)) + geometric_sum(n - 1)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-37<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert geometric_sum(-1) == 0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert geometric_sum(6) == 1.984375
assert geometric_sum(3) == 1.875
assert geometric_sum(2) == 1.75
assert geometric_sum(10) == 1.9990234375
assert geometric_sum(1) == 1.5
assert geometric_sum(11) == 1.99951171875
assert geometric_sum(2) == 1.75
assert geometric_sum(5) == 1.96875
assert geometric_sum(3) == 1.875
assert geometric_sum(7) == 1.9921875
assert geometric_sum(1) == 1.5
assert geometric_sum(10) == 1.9990234375
assert geometric_sum(8) == 1.99609375
assert geometric_sum(9) == 1.998046875
assert geometric_sum(1) == 1.5
assert geometric_sum(2) == 1.75
assert geometric_sum(10) == 1.9990234375
assert geometric_sum(3) == 1.875
assert geometric_sum(19) == 1.9999980926513672
assert geometric_sum(25) == 1.9999999701976776
assert geometric_sum(1) == 1.5
assert geometric_sum(2) == 1.75
assert geometric_sum(10) == 1.9990234375
assert geometric_sum(100) == 2.0
assert geometric_sum(0) == 1
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def geometric_sum(n):
    '''
    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php
    '''
    if n <= 0:
        return 0
    else:
        return 1 / (pow(2, n)) + geometric_sum(n - 1)
```
