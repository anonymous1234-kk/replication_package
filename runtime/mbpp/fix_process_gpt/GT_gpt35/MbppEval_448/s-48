task_id:MbppEval/448
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def cal_sum(n): 
    '''
    Write a function to calculate the sum of perrin numbers.
    '''
```

----------------------Assistant Message----------------------
```python
def cal_sum(n): 
    '''
    Write a function to calculate the sum of perrin numbers.
    '''
 
    '''
    Write a function to calculate the sum of perrin numbers.
    '''
    if n < 3:
        return 0
    perrin = [3, 0, 2]
    psum = sum(perrin[:2])
    for i in range(3, n + 1):
        pnext = perrin[0] + perrin[1]
        perrin[0] = perrin[1]
        perrin[1] = perrin[2]
        perrin[2] = pnext
        psum += perrin[2]
    return psum

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert cal_sum(5) == 15
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def cal_sum(n): 
    if n < 3:
        return 0
    perrin = [3, 0, 2]
    psum = sum(perrin[:2])
    for i in range(3, n + 1):
        pnext = perrin[0] + perrin[1]
        perrin[0] = perrin[1]
        perrin[1] = perrin[2]
        perrin[2] = pnext
        psum += perrin[2]
    return psum
```

