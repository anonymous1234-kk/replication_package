task_id:MbppEval/123
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def amicable_numbers_sum(limit):
    '''
    Write a function to sum all amicable numbers from 1 to a specified number.
    '''
```

----------------------Assistant Message----------------------
```python
def amicable_numbers_sum(limit):
    '''
    Write a function to sum all amicable numbers from 1 to a specified number.
    '''

    amicable_sums = {}
    result = 0
    for i in range(1, limit):
        amicable_sum = sum(get_divisors(i)) - i
        if amicable_sum in amicable_sums and amicable_sums[amicable_sum] == i:
            result += i + amicable_sum
        else:
            amicable_sums[i] = amicable_sum
    return result

def get_divisors(n):
    divisors = []
    for i in range(1, int(n/2)+1):
        if n % i == 0:
            divisors.append(i)
    return divisors

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-20<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert amicable_numbers_sum(220) == 220
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert amicable_numbers_sum(4) == 0
assert amicable_numbers_sum(5) == 0
assert amicable_numbers_sum(6) == 0
assert amicable_numbers_sum(7) == 0
assert amicable_numbers_sum(100) == 0
assert amicable_numbers_sum(200) == 0
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def amicable_numbers_sum(limit):
    amicable_sums = {}
    result = 0
    for i in range(1, limit):
        amicable_sum = sum(get_divisors(i)) - i
        if amicable_sum in amicable_sums and amicable_sums[amicable_sum] == i and i != amicable_sum:
            result += i + amicable_sum
        else:
            amicable_sums[i] = amicable_sum
    return result

def get_divisors(n):
    divisors = []
    for i in range(1, int(n/2)+1):
        if n % i == 0:
            divisors.append(i)
    return divisors
```
