task_id:MbppEval/765
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
import math 
def is_polite(n): 
    '''
    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/
    '''
```

----------------------Assistant Message----------------------
```python
import math 
def is_polite(n): 
    '''
    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/
    '''
 
    if n == 1:
        return 1

    factors = []
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            factors.append(i)
            if i != n // i:
                factors.append(n // i)

    factors.sort()
    for i in range(1, n):
        s = 0
        for j in range(i, n):
            s += j
            if s == n:
                if len(factors) == 0 or factors[-1] < j:
                    return j
                else:
                    for k in range(len(factors)):
                        if factors[k] >= i and factors[k] < j:
                            factors.pop(k)
                            break

    return -1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-39<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_polite(20) == 25
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import math 
def is_polite(n): 
    '''
    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/
    '''
 
    if n == 1:
        return 1

    factors = []
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            factors.append(i)
            if i != n // i:
                factors.append(n // i)

    factors.sort()
    for i in range(1, n):
        s = 0
        for j in range(i, n+1):
            s += j
            if s == n:
                if len(factors) == 0 or factors[-1] < j:
                    return j
                else:
                    for k in range(len(factors)):
                        if factors[k] >= i and factors[k] < j:
                            factors.pop(k)
                            break

    return -1

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-47<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_polite(7) == 11
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import math 
def is_polite(n): 
    '''
    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/
    '''
 
    if n == 1:
        return 1

    factors = []
    for i in range(2, int(math.sqrt(n))+1):
        if n % i == 0:
            factors.append(i)
            if i != n // i:
                factors.append(n // i)

    factors.sort()
    for i in range(1, n):
        s = 0
        for j in range(i, n+1):
            s += j
            if s == n:
                if len(factors) == 0 or factors[-1] < j:
                    return j
                else:
                    for k in range(len(factors)):
                        if factors[k] >= i and factors[k] < j:
                            factors.pop(k)
                            break

    return -1

```
