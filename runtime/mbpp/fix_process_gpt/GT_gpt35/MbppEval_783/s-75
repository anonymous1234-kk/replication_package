task_id:MbppEval/783
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rgb_to_hsv(r, g, b):
    '''
    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/
    '''
```

----------------------Assistant Message----------------------
```python
def rgb_to_hsv(r, g, b):
    '''
    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/
    '''

    """
    Convert RGB color to HSV color
    :param r: Red value (0-255)
    :param g: Green value (0-255)
    :param b: Blue value (0-255)
    :return: HSV color tuple (h, s, v)
    """
    # Convert RGB values to the range 0-1
    r, g, b = r / 255.0, g / 255.0, b / 255.0

    # Find the maximum and minimum RGB values
    max_value = max(r, g, b)
    min_value = min(r, g, b)

    # Calculate the value (brightness) of the HSV color
    v = max_value

    # If the value is 0, the color is black
    if v == 0:
        return 0, 0, 0

    # Calculate the saturation of the HSV color
    s = (max_value - min_value) / max_value

    # If the saturation is 0, the color is a shade of gray
    if s == 0:
        return 0, 0, v

    # Calculate the hue of the HSV color
    if max_value == r:
        hue = (g - b) / (max_value - min_value)
    elif max_value == g:
        hue = 2.0 + (b - r) / (max_value - min_value)
    else:
        hue = 4.0 + (r - g) / (max_value - min_value)

    hue *= 60.0

    if hue < 0:
        hue += 360.0

    # Return the HSV color tuple
    return hue, s, v

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-26<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rgb_to_hsv(128,128,0) == (60.0, 100.0, 50.19607843137255)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rgb_to_hsv(r, g, b):
    '''
    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/
    '''

    """
    Convert RGB color to HSV color
    :param r: Red value (0-255)
    :param g: Green value (0-255)
    :param b: Blue value (0-255)
    :return: HSV color tuple (h, s, v)
    """
    # Convert RGB values to the range 0-1
    r, g, b = r / 255.0, g / 255.0, b / 255.0

    # Find the maximum and minimum RGB values
    max_value = max(r, g, b)
    min_value = min(r, g, b)

    # Calculate the value (brightness) of the HSV color
    v = max_value

    # If the value is 0, the color is black
    if v == 0:
        return 0, 0, 0

    # Calculate the saturation of the HSV color
    s = (max_value - min_value) / max_value

    # If the saturation is 0, the color is a shade of gray
    if s == 0:
        return 0, 0, v

    # Calculate the hue of the HSV color
    if max_value == r:
        hue = (g - b) / (max_value - min_value)
    elif max_value == g:
        hue = 2.0 + (b - r) / (max_value - min_value)
    else:
        hue = 4.0 + (r - g) / (max_value - min_value)

    hue *= 60.0

    if hue < 0:
        hue += 360.0

    # Round the values to two decimal places
    hue = round(hue, 2)
    s = round(s * 100, 2)
    v = round(v * 100, 2)

    # Return the HSV color tuple
    return hue, s, v

```
