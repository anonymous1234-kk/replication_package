task_id:MbppEval/783
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rgb_to_hsv(r, g, b):
    '''
    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/
    '''
```

----------------------Assistant Message----------------------
```python
def rgb_to_hsv(r, g, b):
    '''
    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/
    '''

    max_color = max(r, g, b)
    min_color = min(r, g, b)
    diff = max_color - min_color

    # hue calculation
    if diff == 0:
        hue = 0
    elif max_color == r:
        hue = (60 * ((g - b) / diff) + 360) % 360
    elif max_color == g:
        hue = (60 * ((b - r) / diff) + 120) % 360
    else:  # max_color == b
        hue = (60 * ((r - g) / diff) + 240) % 360

    # saturation calculation
    if max_color == 0:
        saturation = 0
    else:
        saturation = (diff / max_color) * 100

    # value calculation
    value = (max_color / 255) * 100

    return hue, saturation, value

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-36<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rgb_to_hsv(70,130,180) == (207.27272727272728, 61.11111111111111, 70.58823529411765)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rgb_to_hsv(128,128,0) == (60.0, 100.0, 50.19607843137255)
assert rgb_to_hsv(255,255,255) == (0, 0.0, 100.0)
assert rgb_to_hsv(255,0,0) == (0.0, 100.0, 100.0)
assert rgb_to_hsv(0,255,0) == (120.0, 100.0, 100.0)
assert rgb_to_hsv(0,0,255) == (240.0, 100.0, 100.0)
assert rgb_to_hsv(255,255,0) == (60.0, 100.0, 100.0)
assert rgb_to_hsv(255,0,255) == (300.0, 100.0, 100.0)
assert rgb_to_hsv(0,255,255) == (180.0, 100.0, 100.0)
assert rgb_to_hsv(255,0,0) == (0.0, 100.0, 100.0)
assert rgb_to_hsv(128,128,128) == (0, 0.0, 50.19607843137255)
assert rgb_to_hsv(0,128,0) == (120.0, 100.0, 50.19607843137255)
assert rgb_to_hsv(0,255,255) == (180.0, 100.0, 100.0)
assert rgb_to_hsv(0,0,255) == (240.0, 100.0, 100.0)
assert rgb_to_hsv(255,255,0) == (60.0, 100.0, 100.0)
assert rgb_to_hsv(255,0,255) == (300.0, 100.0, 100.0)
assert rgb_to_hsv(255,255,255) == (0, 0.0, 100.0)
assert rgb_to_hsv(128,0,128) == (300.0, 100.0, 50.19607843137255)
assert rgb_to_hsv(255,255,255) == (0, 0.0, 100.0)
assert rgb_to_hsv(255,0,0) == (0.0, 100.0, 100.0)
assert rgb_to_hsv(0,255,0) == (120.0, 100.0, 100.0)
assert rgb_to_hsv(0,0,255) == (240.0, 100.0, 100.0)
assert rgb_to_hsv(255,255,0) == (60.0, 100.0, 100.0)
assert rgb_to_hsv(0,255,255) == (180.0, 100.0, 100.0)
assert rgb_to_hsv(255,0,255) == (300.0, 100.0, 100.0)
assert rgb_to_hsv(128,0,128) == (300.0, 100.0, 50.19607843137255)
assert rgb_to_hsv(127,127,127) == (0, 0.0, 49.80392156862745)
assert rgb_to_hsv(238,18,137) == (327.54545454545456, 92.43697478991596, 93.33333333333333)
assert rgb_to_hsv(255,192,203) == (349.5238095238095, 24.705882352941178, 100.0)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rgb_to_hsv(r, g, b):
    max_color = max(r, g, b)
    min_color = min(r, g, b)
    diff = max_color - min_color

    if diff == 0:
        hue = 0
    elif max_color == r:
        hue = (60 * ((g - b) / diff) + 360) % 360
    elif max_color == g:
        hue = (60 * ((b - r) / diff) + 120) % 360
    else:
        hue = (60 * ((r - g) / diff) + 240) % 360

    if max_color == 0:
        saturation = 0
    else:
        saturation = (diff / max_color) * 100

    value = (max_color / 255) * 100

    return round(hue, 9), round(saturation, 9), round(value, 9)
```
