task_id:MbppEval/415
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def max_Product(arr): 
    '''
    Write a python function to find a pair with highest product from a given array of integers.
    '''
```

----------------------Assistant Message----------------------
```python
def max_Product(arr): 
    '''
    Write a python function to find a pair with highest product from a given array of integers.
    '''

    max_product = float('-inf') # initialize max_product to negative infinity
    n = len(arr) # find the length of the given array
    
    # loop through each element of the array and find the maximum product of any two elements
    for i in range(n):
        for j in range(i+1, n):
            product = arr[i] * arr[j] # calculate the product of the two elements
            if product > max_product:
                max_product = product # update max_product if the product is greater than the current maximum
                
    return max_product # return the maximum product found

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-1<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert max_Product([7, -1, -2, 8, -2]) == (7, 8)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def max_Product(arr): 
    max_product = float('-inf')
    n = len(arr)
    
    for i in range(n):
        for j in range(i+1, n):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
    
    # Find the pair of integers with the highest product
    highest_pair = ()
    for i in range(n):
        for j in range(i+1, n):
            if arr[i] * arr[j] == max_product:
                highest_pair = (arr[i], arr[j])
    
    return highest_pair
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-8<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert max_Product([0, 0, 0, 0, 0, 1, 0]) == (0, 0)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert max_Product([7, -1, -2, 8, -2]) == (7, 8)
assert max_Product([9, 7, 6, 5, 2]) == (9, 7)
assert max_Product([4, 8, 9, 2, 20]) == (9, 20)
assert max_Product([0, -1, -2, -3, 1]) == (-2, -3)
assert max_Product([-1, -2, -3, 5, 0]) == (-2, -3)
assert max_Product([0, 2, 3, 5, 9]) == (5, 9)
assert max_Product([1, 2, 3, 4, 7, 0, 8, 9]) == (8, 9)
assert max_Product([0, 0, 0, 0, 0, 0, 0]) == (0, 0)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def max_Product(arr): 
    max_product = float('-inf')
    n = len(arr)
    
    for i in range(n):
        for j in range(i+1, n):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
    
    # Find the pair of integers with the highest product
    highest_pair = ()
    for i in range(n):
        for j in range(i+1, n):
            if arr[i] * arr[j] == max_product:
                highest_pair = (arr[i], arr[j])
    
    return highest_pair
```
