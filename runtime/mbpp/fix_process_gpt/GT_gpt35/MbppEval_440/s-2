task_id:MbppEval/440
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
import re
def find_adverb_position(text):
    '''
    Write a function to find the first adverb and their positions in a given sentence.
    '''
```

----------------------Assistant Message----------------------
```python
import re
def find_adverb_position(text):
    '''
    Write a function to find the first adverb and their positions in a given sentence.
    '''

    # Define a regular expression pattern to match adverbs
    adv_pattern = r"\b\w+ly\b"
    
    # Use the finditer() function to find all occurrences of the pattern
    matches = re.finditer(adv_pattern, text)

    # If no matches are found, return None
    if not matches:
        return None
    
    # If matches are found, return the position of the first match
    first_match = next(matches)
    return first_match.start()

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_adverb_position('I am early in the morning at the office') == (5, 10, 'early')
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import re
def find_adverb_position(text):
    '''
    Write a function to find the first adverb and their positions in a given sentence.
    '''

    # Define a regular expression pattern to match adverbs
    adv_pattern = r"\b\w+ly\b"
    
    # Use the finditer() function to find all occurrences of the pattern
    matches = re.finditer(adv_pattern, text)

    # If no matches are found, return None
    if not matches:
        return None
    
    # If matches are found, return the position of the first match
    first_match = next(matches)
    adv_start = first_match.start()
    adv_end = first_match.end()
    adverb = first_match.group()

    return (adv_start, adv_end, adverb)
```
