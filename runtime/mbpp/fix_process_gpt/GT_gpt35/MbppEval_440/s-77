task_id:MbppEval/440
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
import re
def find_adverb_position(text):
    '''
    Write a function to find the first adverb and their positions in a given sentence.
    '''
```

----------------------Assistant Message----------------------
```python
import re
def find_adverb_position(text):
    '''
    Write a function to find the first adverb and their positions in a given sentence.
    '''

    '''
    Write a function to find the first adverb and their positions in a given sentence.
    '''
    # Find the first adverb in the sentence using regex and store the index of its first character
    adverb_index = re.search(r"\b\w+ly\b", text)
    if adverb_index:
        adverb_index = adverb_index.start()
        
        # Create a list to store the positions of each character in the sentence
        positions = []
        for i in range(len(text)):
            positions.append(i)
        
        # Find the positions of the adverb by iterating over the positions list
        adverb_positions = []
        for i in range(len(text)):
            if i == adverb_index:
                adverb_positions.append(positions[i])
            elif text[i] == " ":
                # If the current character is a space, update the adverb_index to the next non-space character
                while i < len(text) and text[i] == " ":
                    i += 1
                if i < len(text):
                    adverb_index = i
        adverb_positions.append(positions[adverb_index])
        
        return adverb_positions
        
    else:
        # If no adverb is found, return None
        return None

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_adverb_position('I am early in the morning at the office') == (5, 10, 'early')
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import re
def find_adverb_position(text):
    '''
    Write a function to find the first adverb and their positions in a given sentence.
    '''

    adverb_index = re.search(r"\b\w+ly\b", text)
    if adverb_index:
        adverb_index = adverb_index.start()
        
        positions = []
        for i in range(len(text)):
            positions.append(i)
        
        adverb_positions = []
        for i in range(len(text)):
            if i == adverb_index:
                adverb_positions.append(positions[i])
            elif text[i] == " ":
                while i < len(text) and text[i] == " ":
                    i += 1
                if i < len(text):
                    adverb_index = i
        adverb_positions.append(positions[adverb_index])
        
        return tuple(adverb_positions), text[adverb_positions[0]:adverb_positions[1]+1]
        
    else:
        return None
```
