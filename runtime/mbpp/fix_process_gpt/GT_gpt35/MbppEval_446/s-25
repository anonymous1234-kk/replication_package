task_id:MbppEval/446
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
from collections import Counter 
def count_Occurrence(tup, lst): 
    '''
    Write a python function to count the occurence of all elements of list in a tuple.
    '''
```

----------------------Assistant Message----------------------
```python
from collections import Counter 
def count_Occurrence(tup, lst): 
    '''
    Write a python function to count the occurence of all elements of list in a tuple.
    '''
 
    return Counter(tup) 

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-19<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_Occurrence(('a', 'b', 'a', 'c', 'd', 'd', 'a', 'd', 'd', 'c', 'c', 'e', 'e', 'd', 'a'),['a', 'c', 'd']) == 12
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
from collections import Counter

def count_Occurrence(tup, lst):
    return sum([Counter(tup).get(elem, 0) for elem in lst])

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-23<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_Occurrence((1, 2, 3, 1, 2, 1, 4, 5, 6, 7, 8, 9, 9),[1, 1, 3, 3]) == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert count_Occurrence(('a', 'b', 'a', 'c', 'd', 'd', 'a', 'd', 'd', 'c', 'c', 'e', 'e', 'd', 'a'),['a', 'c', 'd']) == 12
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[2, 3]) == 3
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[8, 9]) == 0
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[1, 2, 3, 4, 5, 6, 7]) == 8
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[]) == 0
assert count_Occurrence((0, 0, 0, 0, 0, 0),[0]) == 6
assert count_Occurrence((),[1, 2, 3]) == 0
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[9]) == 0
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[2]) == 2
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[2, 3, 4]) == 4
assert count_Occurrence((1, 2, 3, 2, 4, 5, 6, 7),[7, 1, 3, 4, 2, 6, 5]) == 8
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[1, 2, 3]) == 3
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[1, 2, 3, 6]) == 6
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[1, 3]) == 2
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[0]) == 0
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[]) == 0
assert count_Occurrence((),[]) == 0
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[1, 2, 3, 4, 5, 6, 7]) == 10
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[2, 4]) == 3
assert count_Occurrence((1, 2, 3, 4, 4, 5, 6, 6, 6, 7),[1, 3, 5, 7]) == 4
assert count_Occurrence(('a', 'b', 'a', 'c', 'd', 'd', 'a', 'd', 'd', 'c', 'c', 'e', 'e', 'd', 'a'),['f']) == 0
assert count_Occurrence((1, 2, 3, 1, 2, 1, 4, 5, 6, 7, 8, 9, 9),[1, 3, 10]) == 4
assert count_Occurrence((1, 2, 3, 1, 2, 1, 4, 5, 6, 7, 8, 9, 9),[1, 3]) == 4
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Certainly! Here is the fixed code:

```python
from collections import Counter

def count_Occurrence(tup, lst):
    return sum([Counter(tup).get(elem, 0) for elem in lst])
```
