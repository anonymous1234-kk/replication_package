task_id:MbppEval/91
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_substring(str1, sub_str):
    '''
    Write a function to check if a string is present as a substring in a given list of string values.
    '''
```

----------------------Assistant Message----------------------
```python
def find_substring(str1, sub_str):
    '''
    Write a function to check if a string is present as a substring in a given list of string values.
    '''

    '''
    Write a function to check if a string is present as a substring in a given list of string values.
    '''
    if sub_str in str1:
        return True
    else:
        return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-19<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_substring('hoi hoi','hoi ho') == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_substring('I am not','e') == False
assert find_substring('I am not','i') == False
assert find_substring('I am not','r') == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_substring(str1, sub_str):
    if sub_str in str1:
        return True
    else:
        return False
```
Explanation: The code provided above is incorrect because it checks if `sub_str` is a substring of `str1` instead of checking if `sub_str` is a substring of each individual string in the given list of string values. To fix this, we need to modify the code to iterate over each string in the list and perform the substring check.

Here is the fixed code:
```python
def find_substring(str1, sub_str):
    for string in str1:
        if sub_str in string:
            return True
    return False
```
