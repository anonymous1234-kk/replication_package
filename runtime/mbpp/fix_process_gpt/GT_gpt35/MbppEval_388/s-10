task_id:MbppEval/388
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def highest_Power_of_2(n): 
    '''
    Write a python function to find the highest power of 2 that is less than or equal to n.
    '''
```

----------------------Assistant Message----------------------
```python
def highest_Power_of_2(n): 
    '''
    Write a python function to find the highest power of 2 that is less than or equal to n.
    '''
 
    # Using bitwise right shift operator to divide the number by 2 until it becomes 0
    # And keeping track of the count of right shifts required to make the number 0
    count = 0
    while n != 0: 
        n >>= 1
        count += 1

    # The highest power of 2 less than or equal to n will be 2 raised to the power of count-1
    return 2**(count-1)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-8<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert highest_Power_of_2(-10) == 0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def highest_Power_of_2(n): 
    '''
    Write a python function to find the highest power of 2 that is less than or equal to n.
    '''
 
    # Check if n is less than or equal to 0, return 0
    if n <= 0:
        return 0

    # Using bitwise right shift operator to divide the number by 2 until it becomes 0
    # And keeping track of the count of right shifts required to make the number 0
    count = 0
    while n != 0: 
        n >>= 1
        count += 1

    # The highest power of 2 less than or equal to n will be 2 raised to the power of count-1
    return 2**(count-1)
```
