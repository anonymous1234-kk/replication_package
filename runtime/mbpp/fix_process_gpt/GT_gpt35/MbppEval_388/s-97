task_id:MbppEval/388
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def highest_Power_of_2(n): 
    '''
    Write a python function to find the highest power of 2 that is less than or equal to n.
    '''
```

----------------------Assistant Message----------------------
```python
def highest_Power_of_2(n): 
    '''
    Write a python function to find the highest power of 2 that is less than or equal to n.
    '''
 
    # Initialize result
    res = 0
    
    # Iterate through all bits of n starting from the most significant bit (MSB)
    for i in range(n.bit_length() - 1, -1, -1):
        # If the current bit is set, then return the corresponding power of 2
        if n & (1 << i):
            return 1 << i
        
    # If no bits were set, then return 0
    return res

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-8<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert highest_Power_of_2(-10) == 0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def highest_Power_of_2(n): 
    '''
    Write a python function to find the highest power of 2 that is less than or equal to n.
    '''
 
    # Initialize result
    res = 0
    
    # If n is less than or equal to 0, return 0
    if n <= 0:
        return res
    
    # Iterate through all bits of n starting from the most significant bit (MSB)
    for i in range(n.bit_length() - 1, -1, -1):
        # If the current bit is set, then return the corresponding power of 2
        if n & (1 << i):
            return 1 << i
        
    # If no bits were set, then return 0
    return res
```
