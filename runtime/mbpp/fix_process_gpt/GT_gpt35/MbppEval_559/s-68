task_id:MbppEval/559
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def max_sub_array_sum(a, size):
    '''
    Write a function to find the sum of the largest contiguous sublist in the given list.
    '''
```

----------------------Assistant Message----------------------
```python
def max_sub_array_sum(a, size):
    '''
    Write a function to find the sum of the largest contiguous sublist in the given list.
    '''

    max_so_far = -float('inf') # Initialize the maximum sum so far to negative infinity
    max_ending_here = 0 # Initialize the maximum sum ending at the current position to 0

    # Iterate over each element in the list
    for i in range(size):
        # Add the current element to the maximum sum ending at the previous position
        max_ending_here += a[i]

        # If the maximum sum ending at the current position is negative, set it to 0
        if max_ending_here < 0:
            max_ending_here = 0

        # If the maximum sum so far is less than the maximum sum ending at the current position,
        # update the maximum sum so far
        if max_so_far < max_ending_here:
            max_so_far = max_ending_here

    return max_so_far

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-23<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert max_sub_array_sum([2, -3, 4, -1, -2, 1, 5, -3],0) == 0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert max_sub_array_sum([1, -2, 3, -4, 5, -6, 7, -8, 9, -10],10) == 9
assert max_sub_array_sum([7, -3, 4, -1, -2, 1, 5, -3],8) == 11
assert max_sub_array_sum([5, -4, 3, -2, 1],5) == 5
assert max_sub_array_sum([1, 3, -2, 4, -1, 2, 1, -5, 4],9) == 8
assert max_sub_array_sum([8, -7, -3, 5, 6, -2, 3, -4, 2],9) == 12
assert max_sub_array_sum([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 11],21) == 11
assert max_sub_array_sum([2, 3, -2, 4],4) == 7
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def max_sub_array_sum(a, size):
    max_so_far = float('-inf')
    max_ending_here = 0

    for i in range(size):
        max_ending_here += a[i]

        if max_ending_here < 0:
            max_ending_here = 0

        if max_so_far < max_ending_here:
            max_so_far = max_ending_here

    return max_so_far
```
