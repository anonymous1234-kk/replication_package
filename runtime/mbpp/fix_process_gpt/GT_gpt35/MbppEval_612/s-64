task_id:MbppEval/612
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def merge(lst):  
    '''
    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.
    '''
```

----------------------Assistant Message----------------------
```python
def merge(lst):  
    '''
    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.
    '''

    first_list = []
    second_list = []
    for sub_lst in lst:
        first_list.append(sub_lst[0])
        second_list.append(sub_lst[1])
    return [first_list, second_list]

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert merge([[], []]) == []
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def merge(lst):  
    '''
    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.
    '''

    first_list = []
    second_list = []
    for sub_lst in lst:
        if sub_lst:
            first_list.append(sub_lst[0])
            second_list.append(sub_lst[1])
    return [first_list, second_list]
```
