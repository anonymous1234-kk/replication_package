task_id:MbppEval/299
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
from collections import defaultdict
def max_aggregate(stdata):
    '''
    Write a function to calculate the maximum aggregate from the list of tuples.
    '''
```

----------------------Assistant Message----------------------
```python
from collections import defaultdict
def max_aggregate(stdata):
    '''
    Write a function to calculate the maximum aggregate from the list of tuples.
    '''

    marks = defaultdict(list)
    for name, subject, mark in stdata:
        marks[name].append(mark)
    return max(sum(marks[name]) for name in marks)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert max_aggregate([(1, 40), (2, 50), (3, 60), (1, 70), (2, 80), (3, 90)]) == (3, 150)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
from collections import defaultdict
def max_aggregate(stdata):
    '''
    Write a function to calculate the maximum aggregate from the list of tuples.
    '''

    marks = defaultdict(list)
    for name, mark in stdata:
        marks[name].append(mark)
    return max((name, sum(marks[name])) for name in marks)
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-13<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert max_aggregate([(1, 60), (2, 50), (3, 40), (1, 30), (2, 20), (3, 10)]) == (1, 90)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert max_aggregate([(1, 40), (2, 50), (3, 60), (1, 70), (2, 80), (3, 90)]) == (3, 150)
assert max_aggregate([(1, 20), (2, 10), (3, 30), (1, 40), (2, 50), (3, 60)]) == (3, 90)
assert max_aggregate([(1, 10), (2, 40), (3, 30), (1, 50), (2, 20), (3, 60)]) == (3, 90)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Here's the fixed code:
```python
from collections import defaultdict
def max_aggregate(stdata):
    marks = defaultdict(int)
    for name, mark in stdata:
        marks[name] += mark
    return max(marks.items(), key=lambda x: x[1])
```
