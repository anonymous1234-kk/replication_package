task_id:MbppEval/598
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def armstrong_number(number):
    '''
    Write a function to check whether the given number is armstrong or not.
    '''
```

----------------------Assistant Message----------------------
```python
def armstrong_number(number):
    '''
    Write a function to check whether the given number is armstrong or not.
    '''

    """
    A number is called Armstrong number if it is equal to the sum of its own digits
    raised to the power of the number of digits.

    Returns True if the given number is an Armstrong number, False otherwise.
    """
    # count the number of digits in the given number
    num_of_digits = len(str(number))

    # initialize the sum of the digit's cubes to 0
    sum_of_cubes = 0

    # iterate over each digit in the number and add its cube to the sum
    for digit in str(number):
        sum_of_cubes += int(digit) ** num_of_digits

    # check if the sum of digit's cubes is equal to the given number
    if sum_of_cubes == number:
        return True
    else:
        return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-21<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert armstrong_number(153.0) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert armstrong_number(10) == False
assert armstrong_number(3) == True
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Here is the fixed code:

```python
def armstrong_number(number):
    '''
    Write a function to check whether the given number is armstrong or not.
    '''

    """
    A number is called Armstrong number if it is equal to the sum of its own digits
    raised to the power of the number of digits.

    Returns True if the given number is an Armstrong number, False otherwise.
    """
    # count the number of digits in the given number
    num_of_digits = len(str(int(number)))

    # initialize the sum of the digit's cubes to 0
    sum_of_cubes = 0

    # iterate over each digit in the number and add its cube to the sum
    for digit in str(int(number)):
        sum_of_cubes += int(digit) ** num_of_digits

    # check if the sum of digit's cubes is equal to the given number
    if sum_of_cubes == int(number):
        return True
    else:
        return False

```
