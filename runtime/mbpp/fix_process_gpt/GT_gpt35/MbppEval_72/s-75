task_id:MbppEval/72
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def dif_Square(n): 
    '''
    Write a python function to check whether the given number can be represented as the difference of two squares or not.
    '''
```

----------------------Assistant Message----------------------
```python
def dif_Square(n): 
    '''
    Write a python function to check whether the given number can be represented as the difference of two squares or not.
    '''
 
    for i in range(1, int(n**0.5) + 1):
        diff = n - i*i
        if diff >= 0 and int(diff**0.5)**2 == diff:
            return True
    return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-11<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert dif_Square(10) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert dif_Square(14) == False
assert dif_Square(30) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def dif_Square(n): 
    '''
    Write a python function to check whether the given number can be represented as the difference of two squares or not.
    '''
 
    for i in range(1, int(n**0.5) + 1):
        diff = n - i*i
        if diff >= 0 and int(diff**0.5)**2 == diff:
            return True
    return False
```
