task_id:MbppEval/109
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def odd_Equivalent(s,n): 
    '''
    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
    '''
```

----------------------Assistant Message----------------------
```python
def odd_Equivalent(s,n): 
    '''
    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
    '''

    count = 0
    # convert the string to binary
    binary_str = bin(int(s, 2))
    # remove the prefix '0b' from the binary string
    binary_str = binary_str[2:]
    # rotate the binary string n times
    rotated_str = binary_str[n:] + binary_str[:n]
    # count the number of odd numbers in the rotated string
    for num in rotated_str:
        if int(num) % 2 != 0:
            count += 1
    return count

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-49<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert odd_Equivalent('1010101',3) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def odd_Equivalent(s,n): 
    '''
    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.
    '''

    count = 0
    # convert the string to binary
    binary_str = bin(int(s, 2))
    # remove the prefix '0b' from the binary string
    binary_str = binary_str[2:]
    # rotate the binary string n times
    rotated_str = binary_str[n:] + binary_str[:n]
    # count the number of odd numbers in the rotated string
    for num in rotated_str:
        if int(num) % 2 != 0:
            count += 1
    return count
```
