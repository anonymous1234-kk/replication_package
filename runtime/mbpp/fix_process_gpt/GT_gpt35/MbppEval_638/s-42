task_id:MbppEval/638
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
import math
def wind_chill(v,t):
    '''
    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.
    '''
```

----------------------Assistant Message----------------------
```python
import math
def wind_chill(v,t):
    '''
    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.
    '''

    '''
    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.
    '''
    if v < 0 or t > 10 or t < -50:
        return "Invalid Input"
    else:
        wci = (13.12 + (0.6215 * t) - (11.37 * math.pow(v, 0.16)) + (0.3965 * t * math.pow(v, 0.16)))
        return round(wci)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-1<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert wind_chill(10,20) == 21
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert wind_chill(20,10) == 7
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import math
def wind_chill(v,t):
    if v < 0 or t > 10 or t < -50:
        return "Invalid Input"
    else:
        wci = 13.12 + (0.6215 * t) - (11.37 * math.pow(v, 0.16)) + (0.3965 * t * math.pow(v, 0.16))
        return round(wci)
```
