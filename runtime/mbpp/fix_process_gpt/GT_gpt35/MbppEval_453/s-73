task_id:MbppEval/453
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
import math 
def sumofFactors(n) : 
    '''
    Write a python function to find the sum of even factors of a number.
    '''
```

----------------------Assistant Message----------------------
```python
import math 
def sumofFactors(n) : 
    '''
    Write a python function to find the sum of even factors of a number.
    '''

    # Initializing variables
    sum = 0
    i = 2
    
    # Looping through all the factors of n
    while i <= math.sqrt(n):
        if (n % i == 0) :
            # Adding even factor to the sum
            if (i == (n / i)):
                if (i % 2 == 0):
                    sum += i
            else :
                if ((i % 2 == 0) and ((n / i) % 2 == 0)):
                    sum += (i + n // i)
        i = i + 1
        
    return sum

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-1<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert sumofFactors(30) == 48
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import math 

def sumofFactors(n) : 
    sum = 0
    i = 2
    
    while i <= math.sqrt(n):
        if (n % i == 0) :
            if (i == (n / i)):
                if (i % 2 == 0):
                    sum += i
            else :
                if ((i % 2 == 0) and ((n / i) % 2 == 0)):
                    sum += (i + n // i)
        i = i + 1
        
    return sum
```
