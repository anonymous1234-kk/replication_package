task_id:MbppEval/9
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_Rotations(str): 
    '''
    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
    '''
```

----------------------Assistant Message----------------------
```python
def find_Rotations(str): 
    '''
    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
    '''
 
    n = len(str) 
  
    # Initialize count variable
    count = 0
  
    for i in range(1, n): 
        # Check if str[0..i] can be obtained 
        # by rotating str clockwise
        if (str[:i] == str[n-i:] and 
            str[i:] == str[:n-i]): 
            count = i 
            break 
    return count

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-5<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_Rotations('abba') == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_Rotations(str): 
    '''
    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
    '''
 
    n = len(str) 
  
    # Initialize count variable
    count = 0
  
    for i in range(1, n): 
        # Check if str[0..i] can be obtained 
        # by rotating str clockwise
        if (str[:i] == str[n-i:] and 
            str[i:] == str[:n-i]):
            if i == 1 and str[i] == str[i-1]:
                count = n
            else:
                count = i 
            break 
    return count
```
