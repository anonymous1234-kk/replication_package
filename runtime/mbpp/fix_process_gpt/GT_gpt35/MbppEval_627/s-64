task_id:MbppEval/627
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_First_Missing(array,start=0,end=None):
    '''
    Write a python function to find the smallest missing number from a sorted list of natural numbers.
    '''
```

----------------------Assistant Message----------------------
```python
def find_First_Missing(array,start=0,end=None):
    '''
    Write a python function to find the smallest missing number from a sorted list of natural numbers.
    '''

    if end is None:
        end = len(array) - 1
    
    while start <= end:
        mid = start + (end - start) // 2
        if array[mid] != mid + 1 and array[mid - 1] == mid:
            return mid + 1
        elif array[mid] != mid + 1:
            end = mid - 1
        else:
            start = mid + 1
    
    return len(array) + 1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-19<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_First_Missing([1],0,0) == 0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_First_Missing(array,start=0,end=None):
    '''
    Write a python function to find the smallest missing number from a sorted list of natural numbers.
    '''

    if end is None:
        end = len(array) - 1
    
    while start <= end:
        mid = start + (end - start) // 2
        if array[mid] != mid + 1 and (mid == 0 or array[mid - 1] == mid):
            return mid + 1
        elif array[mid] != mid + 1:
            end = mid - 1
        else:
            start = mid + 1
    
    return len(array) + 1
```
