task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    num_str = str(n)
    digits = list(num_str)
    for i in range(len(digits)-1, 0, -1):
        if digits[i] > digits[i-1]:
            pivot = i-1
            break
    else:
        return -1
    right = digits[pivot+1:]
    for i in range(len(right)-1, 0, -1):
        if right[i] > digits[pivot]:
            right[i], digits[pivot] = digits[pivot], right[i]
            break
    new_num_str = "".join(digits[:pivot+1] + right[::-1])
    return int(new_num_str)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-1<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(123) == 132
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    num_str = str(n)
    digits = list(num_str)
    for i in range(len(digits)-1, 0, -1):
        if digits[i] > digits[i-1]:
            pivot = i-1
            break
    else:
        return -1
    right = digits[pivot+1:]
    for i in range(len(right)-1, -1, -1):
        if right[i] > digits[pivot]:
            right[i], digits[pivot] = digits[pivot], right[i]
            break
    new_num_str = "".join(digits[:pivot+1] + right[::-1])
    return int(new_num_str)

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    def swap_digits(digits, i, j):
        digits[i], digits[j] = digits[j], digits[i]

    def reverse_digits(digits, start, end):
        while start < end:
            swap_digits(digits, start, end)
            start += 1
            end -= 1

    num_str = str(n)
    digits = list(num_str)
    for i in range(len(digits)-2, -1, -1):
        if digits[i] < digits[i+1]:
            pivot = i
            break
    else:
        return False
    for j in range(len(digits)-1, pivot, -1):
        if digits[j] > digits[pivot]:
            swap_digits(digits, j, pivot)
            break
    reverse_digits(digits, pivot+1, len(digits)-1)
    new_num_str = "".join(digits)
    return int(new_num_str)
```
