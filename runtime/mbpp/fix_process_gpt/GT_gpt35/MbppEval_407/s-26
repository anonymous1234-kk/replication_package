task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    digits = [int(d) for d in str(n)]  # convert the number to a list of its digits
    i = len(digits) - 1
    
    while i > 0 and digits[i-1] >= digits[i]:
        i -= 1
        
    if i <= 0:
        return -1  # If the number is already the largest possible, return -1
    
    j = len(digits) - 1
    
    while digits[j] <= digits[i-1]:
        j -= 1
    
    digits[i-1], digits[j] = digits[j], digits[i-1]  # swap the two digits
    
    # Reverse the suffix
    suffix = digits[i:]
    suffix.reverse()
    digits = digits[:i] + suffix
    
    # Convert the list of digits back to a number and return it
    return int(''.join([str(d) for d in digits]))

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    digits = [int(d) for d in str(n)]  # convert the number to a list of its digits
    i = len(digits) - 1
    
    while i > 0 and digits[i-1] >= digits[i]:
        i -= 1
        
    if i <= 0:
        return False  # If the number is already the largest possible, return False
    
    j = len(digits) - 1
    
    while digits[j] <= digits[i-1]:
        j -= 1
    
    digits[i-1], digits[j] = digits[j], digits[i-1]  # swap the two digits
    
    # Reverse the suffix
    suffix = digits[i:]
    suffix.reverse()
    digits = digits[:i] + suffix
    
    # Convert the list of digits back to a number and return it
    return int(''.join([str(d) for d in digits]))
```
