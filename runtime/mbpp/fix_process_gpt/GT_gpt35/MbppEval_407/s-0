task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    digits = [int(d) for d in str(n)]

    # Find the pivot point in the digits from right to left
    pivot = len(digits) - 2
    while pivot >= 0 and digits[pivot] >= digits[pivot+1]:
        pivot -= 1
    
    # If there is no pivot, n is already the biggest number
    if pivot < 0:
        return n
    
    # Find the smallest digit to the right of the pivot that is greater than the pivot
    successor = len(digits) - 1
    while digits[successor] <= digits[pivot]:
        successor -= 1
    
    # Swap the pivot and the successor
    digits[pivot], digits[successor] = digits[successor], digits[pivot]
    
    # Reverse the digits to the right of the pivot
    digits[pivot+1:] = reversed(digits[pivot+1:])
    
    # Return the new number
    return int(''.join(map(str, digits)))

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    digits = [int(d) for d in str(n)]

    # Find the pivot point in the digits from right to left
    pivot = len(digits) - 2
    while pivot >= 0 and digits[pivot] >= digits[pivot+1]:
        pivot -= 1
    
    # If there is no pivot, n is already the biggest number
    if pivot < 0:
        return False
    
    # Find the smallest digit to the right of the pivot that is greater than the pivot
    successor = len(digits) - 1
    while digits[successor] <= digits[pivot]:
        successor -= 1
    
    # Swap the pivot and the successor
    digits[pivot], digits[successor] = digits[successor], digits[pivot]
    
    # Reverse the digits to the right of the pivot
    digits[pivot+1:] = reversed(digits[pivot+1:])
    
    # Return the new number
    return int(''.join(map(str, digits)))
```
