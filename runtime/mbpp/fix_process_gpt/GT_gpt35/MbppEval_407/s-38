task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n = str(n)
    # Find the pivot point
    for i in range(len(n) - 2, -1, -1):
        if n[i] < n[i+1]:
            pivot = i
            break
    else:
        return -1

    # Find the smallest number to the right of the pivot that is greater than the pivot value
    for i in range(len(n) - 1, pivot, -1):
        if n[i] > n[pivot]:
            break

    # Swap the pivot value with the smallest number to the right of the pivot that is greater than the pivot value
    n = list(n)
    n[pivot], n[i] = n[i], n[pivot]

    # Reverse the digits to the right of the pivot
    n[pivot+1:] = reversed(n[pivot+1:])

    # Return the next bigger number
    return int(''.join(n))

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n = str(n)
    # Find the pivot point
    for i in range(len(n) - 2, -1, -1):
        if n[i] < n[i+1]:
            pivot = i
            break
    else:
        return False

    # Find the smallest number to the right of the pivot that is greater than the pivot value
    for i in range(len(n) - 1, pivot, -1):
        if n[i] > n[pivot]:
            break

    # Swap the pivot value with the smallest number to the right of the pivot that is greater than the pivot value
    n = list(n)
    n[pivot], n[i] = n[i], n[pivot]

    # Reverse the digits to the right of the pivot
    n[pivot+1:] = reversed(n[pivot+1:])

    # Return the next bigger number
    return int(''.join(n))
```
