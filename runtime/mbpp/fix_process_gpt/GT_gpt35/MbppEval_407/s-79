task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n_list = list(str(n))
    for i in range(len(n_list)-1, 0, -1):
        if n_list[i] > n_list[i-1]:
            index = i-1
            break
    else:
        return -1

    right_part = n_list[index:]
    pivot = right_part.pop(0)
    right_part.sort()

    for i in range(len(right_part)):
        if right_part[i] > pivot:
            pivot, right_part[i] = right_part[i], pivot
            break

    left_part = n_list[:index] + [pivot] + right_part
    res = int(''.join(left_part))
    return res

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n_list = list(str(n))
    for i in range(len(n_list)-1, 0, -1):
        if n_list[i] > n_list[i-1]:
            index = i-1
            break
    else:
        return False

    right_part = n_list[index:]
    pivot = right_part.pop(0)
    right_part.sort(reverse=True)

    for i in range(len(right_part)):
        if right_part[i] < pivot:
            pivot, right_part[i] = right_part[i], pivot
            break

    left_part = n_list[:index] + [pivot] + right_part
    res = int(''.join(left_part))
    return res
```
