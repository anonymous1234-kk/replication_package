task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    # Convert the number to a string so we can work with its digits
    n_str = str(n)
    
    # Find the index of the digit that needs to be changed
    for i in range(len(n_str)-1, 0, -1):
        if n_str[i] > n_str[i-1]:
            break
    else:
        # If we didn't find a digit to change, the number is already the biggest possible
        return n
    
    # Rearrange the digits to create the next bigger number
    pivot = i - 1
    suffix = sorted(n_str[pivot:])
    for i, digit in enumerate(suffix):
        if digit > n_str[pivot]:
            pivot_digit = suffix.pop(i)
            break
    next_bigger = int(n_str[:pivot] + pivot_digit + ''.join(suffix))
    
    return next_bigger

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    n_str = str(n)
    
    for i in range(len(n_str)-1, 0, -1):
        if n_str[i] > n_str[i-1]:
            break
    else:
        return False
    
    pivot = i - 1
    suffix = sorted(n_str[pivot:])
    for i, digit in enumerate(suffix):
        if digit > n_str[pivot]:
            pivot_digit = suffix.pop(i)
            break
    next_bigger = int(n_str[:pivot] + pivot_digit + ''.join(suffix))
    
    return next_bigger
```
