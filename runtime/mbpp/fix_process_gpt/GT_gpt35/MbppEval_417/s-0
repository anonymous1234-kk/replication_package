task_id:MbppEval/417
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def group_tuples(Input): 
    '''
    Write a function to find common first element in given list of tuple.
    '''
```

----------------------Assistant Message----------------------
```python
def group_tuples(Input): 
    '''
    Write a function to find common first element in given list of tuple.
    '''
 
    '''
    Write a function to find common first element in given list of tuple.
    '''
    dict = {}
    for i in Input:
        if i[0] in dict:
            dict[i[0]].append(i)
        else:
            dict[i[0]] = [i]
    return dict

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert group_tuples([(1, 3), (2, 6), (1, 6), (4, 7)]) == [(1, 3, 6), (2, 6), (4, 7)]
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def group_tuples(Input): 
    dict = {}
    for i in Input:
        if i[0] in dict:
            dict[i[0]].append(i[1])
        else:
            dict[i[0]] = [i[1]]
    result = []
    for key, value in dict.items():
        if len(value) > 1:
            result.append(tuple([key] + value))
        else:
            result.append(tuple([key, value[0]]))
    return result
```
