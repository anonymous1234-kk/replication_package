task_id:MbppEval/119
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''
```

----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    # If array has only one element, return it
    if len(arr) == 1:
        return arr[0]

    # If the first element is not equal to the second element, return the first element
    if arr[0] != arr[1]:
        return arr[0]

    # If the last element is not equal to the second-last element, return the last element
    if arr[-1] != arr[-2]:
        return arr[-1]

    # If none of the above conditions are true, do a binary search
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        # If the mid element is not equal to its adjacent elements, return the mid element
        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
            return arr[mid]

        # If the mid element is equal to its left adjacent element
        if arr[mid] == arr[mid - 1]:
            # If the left subarray has odd number of elements, make the mid the right endpoint of the left subarray
            if (mid - 1 - left) % 2 == 0:
                right = mid - 2
            # If the left subarray has even number of elements, make the mid-1 the right endpoint of the left subarray
            else:
                right = mid - 1
        # If the mid element is equal to its right adjacent element
        else:
            # If the right subarray has odd number of elements, make the mid the left endpoint of the right subarray
            if (right - mid - 1) % 2 == 0:
                left = mid + 2
            # If the right subarray has even number of elements, make the mid+1 the left endpoint of the right subarray
            else:
                left = mid + 1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-34<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140, 140]) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    # If array has only one element, return it
    if len(arr) == 1:
        return arr[0]

    # If the first element is not equal to the second element, return the first element
    if arr[0] != arr[1]:
        return arr[0]

    # If the last element is not equal to the second-last element, return the last element
    if arr[-1] != arr[-2]:
        return arr[-1]

    # If none of the above conditions are true, do a binary search
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        # If the mid element is not equal to its adjacent elements, return the mid element
        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
            return arr[mid]

        # If the mid element is equal to its left adjacent element
        if arr[mid] == arr[mid - 1]:
            # If the left subarray has odd number of elements, make the mid the right endpoint of the left subarray
            if (mid - 1 - left) % 2 == 0:
                right = mid - 2
            # If the left subarray has even number of elements, make the mid-1 the right endpoint of the left subarray
            else:
                right = mid - 1
        # If the mid element is equal to its right adjacent element
        else:
            # If the right subarray has odd number of elements, make the mid the left endpoint of the right subarray
            if (right - mid - 1) % 2 == 0:
                left = mid + 2
            # If the right subarray has even number of elements, make the mid+1 the left endpoint of the right subarray
            else:
                left = mid + 1

    return None  # Return None if no single element is found


assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140, 140]) == 2
```
