task_id:MbppEval/111
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def common_in_nested_lists(nestedlist):
    '''
    Write a function to find the common elements in given nested lists.
    '''
```

----------------------Assistant Message----------------------
```python
def common_in_nested_lists(nestedlist):
    '''
    Write a function to find the common elements in given nested lists.
    '''

    # Initialize a set with the first sublist
    common_elements = set(nestedlist[0])
    
    # Iterate over remaining sublists
    for sublist in nestedlist[1:]:
        # Convert the current sublist to a set
        current_set = set(sublist)
        # Find the intersection of the current set and the previous set of common elements
        common_elements = common_elements.intersection(current_set)
    
    # Return the set of common elements
    return common_elements

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-5<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9, 1, 2, 3]]) == []
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def common_in_nested_lists(nestedlist):
    '''
    Write a function to find the common elements in given nested lists.
    '''

    # Initialize a set with the first sublist
    common_elements = set(nestedlist[0])
    
    # Iterate over remaining sublists
    for sublist in nestedlist[1:]:
        # Convert the current sublist to a set
        current_set = set(sublist)
        # Find the intersection of the current set and the previous set of common elements
        common_elements = common_elements.intersection(current_set)
    
    # Return the list of common elements
    return list(common_elements)
```
