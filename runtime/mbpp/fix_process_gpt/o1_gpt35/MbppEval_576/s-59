task_id:MbppEval/576
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def is_Sub_Array(A,B): 
    '''
    Write a python function to check whether a list is sublist of another or not.
    '''
```

----------------------Assistant Message----------------------
```python
def is_Sub_Array(A,B): 
    '''
    Write a python function to check whether a list is sublist of another or not.
    '''

    # Two pointers to traverse the lists
    i = j = 0

    # Iterate over both lists
    while i < len(A) and j < len(B):
        # If the elements match, move both pointers
        if A[i] == B[j]:
            i += 1
            j += 1
        else:
            # Otherwise, move only the pointer in B
            j += 1

    # If all elements in A have been matched, A is a subarray of B
    return i == len(A)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Sub_Array([1, 1, 5],[1, 1, 2, 3, 5]) == It's a Match
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert is_Sub_Array([1, 1, 5],[5, 2, 3, 5]) == False
assert is_Sub_Array([1, 1, 5],[1, 5, 5, 2, 3, 5]) == False
assert is_Sub_Array([3, 2],[1, 2, 3, 4]) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Sub_Array(A,B): 
    '''
    Write a python function to check whether a list is sublist of another or not.
    '''

    i = j = 0

    while i < len(A) and j < len(B):
        if A[i] == B[j]:
            i += 1
            j += 1
        else:
            j += 1

    return "It's a Match" if i == len(A) else False
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-30<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Sub_Array([2, 5],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert is_Sub_Array([1, 1, 5],[5, 2, 3, 5]) == False
assert is_Sub_Array([1, 1, 5],[1, 5, 5, 2, 3, 5]) == False
assert is_Sub_Array([3, 2],[1, 2, 3, 4]) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Sub_Array(A,B): 
    '''
    Write a python function to check whether a list is sublist of another or not.
    '''

    # Two pointers to traverse the lists
    i = j = 0

    # Iterate over both lists
    while i < len(A) and j < len(B):
        # If the elements match, move both pointers
        if A[i] == B[j]:
            i += 1
            j += 1
        else:
            # Otherwise, move only the pointer in B
            j += 1

    # If all elements in A have been matched and pointer i is at the end of A, A is a subarray of B
    return i == len(A) and i > 0

```
