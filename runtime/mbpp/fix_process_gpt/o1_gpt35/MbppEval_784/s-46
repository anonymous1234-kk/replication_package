task_id:MbppEval/784
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def mul_even_odd(list1):
    '''
    Write a function to find the product of first even and odd number of a given list.
    '''
```

----------------------Assistant Message----------------------
```python
def mul_even_odd(list1):
    '''
    Write a function to find the product of first even and odd number of a given list.
    '''

    even_product = 1
    odd_product = 1
    
    for num in list1:
        if num % 2 == 0:
            even_product *= num
        else:
            odd_product *= num
    
    return even_product * odd_product

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-13<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert mul_even_odd([3, 4, 6, 9, 1, 2]) == 12
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def mul_even_odd(list1):
    '''
    Write a function to find the product of first even and odd number of a given list.
    '''

    even_product = None
    odd_product = None
    
    for num in list1:
        if num % 2 == 0:
            if even_product is None:
                even_product = num
            else:
                even_product *= num
        else:
            if odd_product is None:
                odd_product = num
            else:
                odd_product *= num
    
    return even_product * odd_product
```
