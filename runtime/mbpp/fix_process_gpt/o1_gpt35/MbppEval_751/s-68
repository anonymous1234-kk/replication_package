task_id:MbppEval/751
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def check_min_heap_helper(arr, i):
    '''
    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/
    '''
```

----------------------Assistant Message----------------------
```python
def check_min_heap_helper(arr, i):
    '''
    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/
    '''

    n = len(arr)
    # If the index is greater than the last element index, it's a leaf node and hence a min heap
    if i > (n - 2) / 2:
        return True
    # Check if the current node is less than or equal to its children and recursively check for its children
    if arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2] and check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2):
        return True
    # If the above two conditions are not met, it's not a min heap
    return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-29<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert check_min_heap_helper([1, 2, 4, 3],0) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert check_min_heap_helper([90, 15, 10, 7, 12, 2],0) == False
assert check_min_heap_helper([9, 8, 7, 6, 5, 4, 3, 2, 1],0) == False
assert check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8, 9],0) == True
assert check_min_heap_helper([],0) == True
assert check_min_heap_helper([1],0) == True
assert check_min_heap_helper([16, 14, 15, 13, 8, 5, 7, 4, 6, 3, 2, 1],0) == False
assert check_min_heap_helper([10, 8, 9, 7, 6, 5, 4, 3, 2, 1],0) == False
assert check_min_heap_helper([3, 5, 7, 9, 2, 8, 10, 1, 4, 6],2) == True
assert check_min_heap_helper([1, 3, 2, 4, 7, 5, 6],1) == True
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def check_min_heap_helper(arr, i):
    n = len(arr)
    if i > (n - 2) // 2:
        return True
    if arr[i] <= arr[2 * i + 1] and (2 * i + 2 >= n or arr[i] <= arr[2 * i + 2]) and check_min_heap_helper(arr, 2 * i + 1) and (2 * i + 2 >= n or check_min_heap_helper(arr, 2 * i + 2)):
        return True
    return False
```
