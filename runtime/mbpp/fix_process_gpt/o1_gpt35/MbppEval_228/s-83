task_id:MbppEval/228
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def all_Bits_Set_In_The_Given_Range(n,l,r):  
    '''
    Write a python function to check whether all the bits are unset in the given range or not.
    '''
```

----------------------Assistant Message----------------------
```python
def all_Bits_Set_In_The_Given_Range(n,l,r):  
    '''
    Write a python function to check whether all the bits are unset in the given range or not.
    '''

    # left shift 1 to (r-l+1) times and subtract 1 to get a number with r-l+1 bits set
    # we will then shift this number by l-1 bits to make sure the bits in the range are set
    mask = ((1 << (r-l+1)) - 1) << (l-1)

    # if the bitwise AND of n and mask is 0, all the bits in the range are unset
    if n & mask == 0:
        return True
    else:
        return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-9<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert all_Bits_Set_In_The_Given_Range(9,0,3) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def all_Bits_Set_In_The_Given_Range(n,l,r):  
    '''
    Write a python function to check whether all the bits are unset in the given range or not.
    '''

    # left shift 1 to (r-l+1) times and subtract 1 to get a number with r-l+1 bits set
    # we will then shift this number by l-1 bits to make sure the bits in the range are set
    mask = ((1 << (r-l+1)) - 1) << (l-1)

    # if the bitwise AND of n and mask is equal to mask, all the bits in the range are set
    if n & mask == mask:
        return True
    else:
        return False

```
