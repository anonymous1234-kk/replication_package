task_id:MbppEval/558
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def digit_distance_nums(n1, n2):
    '''
    Write a python function to find the sum of the per-digit difference between two integers.
    '''
```

----------------------Assistant Message----------------------
```python
def digit_distance_nums(n1, n2):
    '''
    Write a python function to find the sum of the per-digit difference between two integers.
    '''

    n1_str = str(n1)
    n2_str = str(n2)
    distance = 0
    for i in range(len(n1_str)):
        distance += abs(int(n1_str[i]) - int(n2_str[i]))
    return distance

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-3<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert digit_distance_nums(2000,489) == 23
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert digit_distance_nums(234,489) == 12
assert digit_distance_nums(200,489) == 19
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def digit_distance_nums(n1, n2):
    '''
    Write a python function to find the sum of the per-digit difference between two integers.
    '''

    n1_str = str(n1)
    n2_str = str(n2)
    distance = 0
    min_len = min(len(n1_str), len(n2_str))
    for i in range(min_len):
        distance += abs(int(n1_str[i]) - int(n2_str[i]))
    if len(n1_str) > len(n2_str):
        distance += sum([int(digit) for digit in n1_str[min_len:]])
    elif len(n1_str) < len(n2_str):
        distance += sum([int(digit) for digit in n2_str[min_len:]])
    return distance

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert digit_distance_nums(1234,488) == 12
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert digit_distance_nums(234,489) == 12
assert digit_distance_nums(200,489) == 19
assert digit_distance_nums(73812,73612) == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def digit_distance_nums(n1, n2):
    '''
    Write a python function to find the sum of the per-digit difference between two integers.
    '''

    n1_str = str(n1)
    n2_str = str(n2)
    distance = 0
    for i in range(min(len(n1_str), len(n2_str))):
        distance += abs(int(n1_str[i]) - int(n2_str[i]))
    return distance
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-11<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert digit_distance_nums(1,1000000) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert digit_distance_nums(234,489) == 12
assert digit_distance_nums(200,489) == 19
assert digit_distance_nums(73812,73612) == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def digit_distance_nums(n1, n2):
    '''
    Write a python function to find the sum of the per-digit difference between two integers.
    '''

    n1_str = str(n1)
    n2_str = str(n2)
    distance = 0
    for i in range(min(len(n1_str), len(n2_str))):
        distance += abs(int(n1_str[i]) - int(n2_str[i]))
    if len(n1_str) > len(n2_str):
        distance += sum([int(digit) for digit in n1_str[len(n2_str):]])
    elif len(n1_str) < len(n2_str):
        distance += sum([int(digit) for digit in n2_str[len(n1_str):]])
    return distance

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert digit_distance_nums(2324,489) == 14
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert digit_distance_nums(234,489) == 12
assert digit_distance_nums(200,489) == 19
assert digit_distance_nums(73812,73612) == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def digit_distance_nums(n1, n2):
    '''
    Write a python function to find the sum of the per-digit difference between two integers.
    '''

    n1_str = str(n1)
    n2_str = str(n2)
    distance = 0
    if len(n1_str) >= len(n2_str):
        for i in range(len(n2_str)):
            distance += abs(int(n1_str[i]) - int(n2_str[i]))
        distance += sum(int(digit) for digit in n1_str[len(n2_str):])
    else:
        for i in range(len(n1_str)):
            distance += abs(int(n1_str[i]) - int(n2_str[i]))
        distance += sum(int(digit) for digit in n2_str[len(n1_str):])
    return distance
```
