task_id:MbppEval/160
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''
```

----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-2<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,12) == (6, 0)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None

assert find_solution(2,3,12) == (6, 0)
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,10) == (5, 0)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-5<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,13) == (2, 3)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-7<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,-7) == (-5, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None

assert find_solution(2,3,-7) == (-5, 1)
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-9<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,15) == (6, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-15<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(1,2,3) == (3, 0)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-16<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,2,6) == (0, 3)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        y = (n - a*x) / b
        if y.is_integer():
            return (x, int(y))
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-17<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(1,3,6) == (0, 2)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-21<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(1,2,5) == (1, 2)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None

assert find_solution(1,2,5) == (1, 2)
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-25<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(3,2,8) == (2, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-28<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(-15,17,2) == (-16, -14)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,8) == (1, 2)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-30<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(5,3,11) == (1, 2)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-31<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(5,3,12) == (0, 4)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        y = (n - a*x) / b
        if int(y) == y:
            return (x, int(y))
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-33<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(50,25,75) == (0, 3)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-34<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(10,5,30) == (0, 6)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-36<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(10,5,40) == (0, 8)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-37<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(4,6,22) == (1, 3)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-38<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(7,5,9) == (2, -1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-39<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,7) == (2, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-43<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(-2,3,7) == (1, 3)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
assert find_solution(3,3,7) == None
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-49<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,4,10) == (5, 0)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
assert find_solution(3,3,7) == None
assert find_solution(1,1,2) == (0, 2)
assert find_solution(1,1,1) == (0, 1)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        if (n - a*x) % b == 0:
            y = (n - a*x) // b
            return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-22<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(-2,1,1) == (0, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
assert find_solution(3,3,7) == None
assert find_solution(1,1,2) == (0, 2)
assert find_solution(1,1,1) == (0, 1)
assert find_solution(0,0,0) == (0, 0)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-26<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(4,-3,5) == (2, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_solution(1,1,3) == (0, 3)
assert find_solution(-3,6,7) == None
assert find_solution(3,3,7) == None
assert find_solution(1,1,2) == (0, 2)
assert find_solution(1,1,1) == (0, 1)
assert find_solution(0,0,0) == (0, 0)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        for y in range(-n, n+1):
            if a*x + b*y == n:
                return (x, y)
    return None
```
