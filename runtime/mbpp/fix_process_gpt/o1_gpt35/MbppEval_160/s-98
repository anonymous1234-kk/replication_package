task_id:MbppEval/160
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''
```

----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        y = (n - a*x) / b
        if y.is_integer():
            return (int(x), int(y))
    return None

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-2<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,12) == (6, 0)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        y = (n - a*x) / b
        if y.is_integer() and y >= 0:
            return (int(x), int(y))
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,10) == (5, 0)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        y = (n - a*x) / b
        if y.is_integer() and y >= 0:
            return (int(x), int(y))
    return None

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-5<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,13) == (2, 3)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        y = (n - a*x) / b
        if y.is_integer() and y >= -n and y <= n:
            return (int(x), int(y))
    return None

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-7<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,-7) == (-5, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    for x in range(-n, n+1):
        if (n - a*x) % b == 0:
            y = (n - a*x) / b
            if y.is_integer():
                return (int(x), int(y))
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-9<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(2,3,15) == (6, 1)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    for x in range(-n, n+1):
        y = (n - a*x) / b
        if y.is_integer() and y >= 0:
            return (int(x), int(y))
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-14<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_solution(1,1,3) == (0, 3)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_solution(a, b, n):
    '''
    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.
    '''

    if n % gcd(a, b) != 0:
        return None

    x0, y0, _ = extended_gcd(a, b)
    x = x0 * (n // gcd(a, b))
    y = y0 * (n // gcd(a, b))
    return (x, y)
```
