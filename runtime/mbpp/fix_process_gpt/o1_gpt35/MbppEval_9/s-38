task_id:MbppEval/9
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_Rotations(str): 
    '''
    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
    '''
```

----------------------Assistant Message----------------------
```python
def find_Rotations(str): 
    '''
    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
    '''
 
    # Calculate the length of string
    n = len(str) 
  
    # Create a new string by concatenating 
    # the given string twice 
    temp = str + str 
  
    # Declare a list for calculating lps 
    lps = [0] * n 
  
    # Calculate lps array for the new string 
    computeLPSArray(temp, n, lps) 
  
    # Length of shortened string 
    length = n - lps[n - 1] 
  
    # If there exist some proper suffix 
    # which is also a prefix and shortens 
    # the original string 
    if length != n and str[:length] == str[n-length:]: 
        return True
    return False
  
# Function to calculate LPS array
def computeLPSArray(temp, n, lps): 
    length = 0
  
    # lps[0] is always 0 
    lps[0] = 0
  
    # Loop calculates lps[i] for i = 1 to n-1 
    i = 1
    while i < n: 
        if temp[i]== temp[length]: 
            length += 1
            lps[i] = length
            i += 1
        else: 
            if length != 0: 
                length = lps[length - 1] 
            else: 
                lps[i] = 0
                i += 1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-5<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_Rotations('abba') == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_Rotations(str): 
    n = len(str) 
    temp = str + str 
    lps = [0] * n 
    computeLPSArray(temp, n, lps) 
    length = n - lps[n - 1] 
    if length != n and str[:length] == str[n-length:]: 
        return n
    return n + 1
  
def computeLPSArray(temp, n, lps): 
    length = 0
    lps[0] = 0
    i = 1
    while i < n: 
        if temp[i]== temp[length]: 
            length += 1
            lps[i] = length
            i += 1
        else: 
            if length != 0: 
                length = lps[length - 1] 
            else: 
                lps[i] = 0
                i += 1
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_Rotations('abcabcabc') == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_Rotations(str): 
    '''
    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.
    '''
 
    # Calculate the length of string
    n = len(str) 
  
    # Create a new string by concatenating 
    # the given string twice 
    temp = str + str 
  
    # Declare a list for calculating lps 
    lps = [0] * (2*n)
  
    # Calculate lps array for the new string 
    computeLPSArray(temp, 2*n, lps) 
  
    # Length of shortened string 
    length = n - lps[2*n - 1] 
  
    # If there exist some proper suffix 
    # which is also a prefix and shortens 
    # the original string 
    if length != n and str[:length] == str[n-length:]: 
        return n // length
    return n
  

# Function to calculate LPS array
def computeLPSArray(temp, n, lps): 
    length = 0
  
    # lps[0] is always 0 
    lps[0] = 0
  
    # Loop calculates lps[i] for i = 1 to n-1 
    i = 1
    while i < n: 
        if temp[i]== temp[length]: 
            length += 1
            lps[i] = length
            i += 1
        else: 
            if length != 0: 
                length = lps[length - 1] 
            else: 
                lps[i] = 0
                i += 1
```
