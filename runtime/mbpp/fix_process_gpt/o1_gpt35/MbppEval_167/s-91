task_id:MbppEval/167
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def next_power_of_2(n): 
    '''
    Write a python function to find the smallest power of 2 greater than or equal to n.
    '''
```

----------------------Assistant Message----------------------
```python
def next_power_of_2(n): 
    '''
    Write a python function to find the smallest power of 2 greater than or equal to n.
    '''

    # If n is already a power of 2, return n
    if (n and not (n & (n - 1))):
        return n
     
    # Find position of leftmost set bit in n (using log2)
    pos = int(math.log2(n)) + 1
     
    # Return 2^pos
    return int(pow(2, pos))

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-9<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert next_power_of_2(36) == 64
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
import math

def next_power_of_2(n): 
    '''
    Write a python function to find the smallest power of 2 greater than or equal to n.
    '''

    # If n is already a power of 2, return n
    if (n and not (n & (n - 1))):
        return n
     
    # Find position of leftmost set bit in n (using log2)
    pos = int(math.log2(n)) + 1
     
    # Return 2^pos
    return int(pow(2, pos))
```
