task_id:MbppEval/445
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def index_multiplication(test_tup1, test_tup2):
    '''
    Write a function to perform index wise multiplication of tuple elements in the given two tuples.
    '''
```

----------------------Assistant Message----------------------
```python
def index_multiplication(test_tup1, test_tup2):
    '''
    Write a function to perform index wise multiplication of tuple elements in the given two tuples.
    '''

    res = []
    for i in range(len(test_tup1)):
        res.append(test_tup1[i] * test_tup2[i])
    return tuple(res)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-3<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert index_multiplication((1, 2, 3, 4, 5),(5, 6, 7, 8)) == (5, 12, 21, 32)
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert index_multiplication((1, 2, 3, 4),(5, 6, 7, 8, 9)) == (5, 12, 21, 32)
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def index_multiplication(test_tup1, test_tup2):
    '''
    Write a function to perform index wise multiplication of tuple elements in the given two tuples.
    '''

    res = []
    min_len = min(len(test_tup1), len(test_tup2))
    for i in range(min_len):
        res.append(test_tup1[i] * test_tup2[i])
    return tuple(res)
```
