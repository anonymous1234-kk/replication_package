task_id:MbppEval/438
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def count_bidirectional(test_list):
    '''
    Write a function to count bidirectional tuple pairs.
    '''
```

----------------------Assistant Message----------------------
```python
def count_bidirectional(test_list):
    '''
    Write a function to count bidirectional tuple pairs.
    '''

    count = 0
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:
                count += 1
    return count

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-2<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_bidirectional([(1, 2), (2, 1), (2, 3), (3, 2)]) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def count_bidirectional(test_list):
    '''
    Write a function to count bidirectional tuple pairs.
    '''

    count = 0
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if (test_list[i][0], test_list[i][1]) == (test_list[j][1], test_list[j][0]):
                count += 1
    return count
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-16<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_bidirectional([(1, 2), (2, 3), (4, 3), (2, 1), (4, 5), (5, 4), (6, 7), (7, 6), (9, 9), (2, 5), (8, 8)]) == 5
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def count_bidirectional(test_list):
    '''
    Write a function to count bidirectional tuple pairs.
    '''

    count = 0
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if (test_list[i][0], test_list[i][1]) == (test_list[j][1], test_list[j][0]):
                count += 1
    return count


assert count_bidirectional([(1, 2), (2, 3), (4, 3), (2, 1), (4, 5), (5, 4), (6, 7), (7, 6), (9, 9), (2, 5), (8, 8)]) == 5
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-29<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert count_bidirectional([(1, 2), (2, 3), (3, 4), (5, 4), (6, 5), (7, 8), (9, 7), (9, 7), (8, 7), (4, 5), (4, 6), (5, 6), (6, 7), (6, 8), (8, 9), (7, 9)]) == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert count_bidirectional([(1, 2)]) == 0
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def count_bidirectional(test_list):
    '''
    Write a function to count bidirectional tuple pairs.
    '''

    count = 0
    for i in range(len(test_list)):
        for j in range(i+1, len(test_list)):
            if (test_list[i][0], test_list[i][1]) == (test_list[j][1], test_list[j][0]) or (test_list[i][0], test_list[i][1]) == (test_list[j][0], test_list[j][1]):
                count += 1
    return count
```
