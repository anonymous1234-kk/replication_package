task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # get the length of the strings
    n = len(str1)

    # initialize the count of swaps to 0
    count = 0

    # loop through the strings
    for i in range(n):
        # if the characters at the same position in both strings are different
        if str1[i] != str2[i]:
            # increment the count of swaps
            count += 1

    # return half of the count (since we swap two bits at a time)
    return count // 2

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-2<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('111','010') == -1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('1101010','0011101') == 3
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # get the length of the strings
    n = len(str1)

    # check if the number of 1s in str1 is equal to the number of 1s in str2
    if str1.count('1') != str2.count('1'):
        return -1

    # initialize the count of swaps to 0
    count = 0

    # loop through the strings
    for i in range(n):
        # if the characters at the same position in both strings are different
        if str1[i] != str2[i]:
            # increment the count of swaps
            count += 1

    # return half of the count (since we swap two bits at a time)
    return count // 2
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-21<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('1110001010','0100011100') == -1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('1101010','0011101') == 3
assert min_Swaps('110011','001111') == 2
assert min_Swaps('0000','1111') == 2
assert min_Swaps('110000','000011') == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1, str2):
    n = len(str1)
    count = 0

    # Count the number of zeros and ones in str1 and str2
    zeros_str1 = zeros_str2 = ones_str1 = ones_str2 = 0
    for i in range(n):
        if str1[i] == '0':
            zeros_str1 += 1
        else:
            ones_str1 += 1
        if str2[i] == '0':
            zeros_str2 += 1
        else:
            ones_str2 += 1

    # If the number of zeros or ones is not equal in str1 and str2, it is not possible to convert one to the other
    if zeros_str1 != zeros_str2 or ones_str1 != ones_str2:
        return -1

    # Count the number of swaps required to convert str1 to str2
    for i in range(n):
        if str1[i] != str2[i]:
            count += 1

    return count // 2
```
