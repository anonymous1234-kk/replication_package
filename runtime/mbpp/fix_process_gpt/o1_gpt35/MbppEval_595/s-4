task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # initialize swap counter and index
    swap_count = 0
    i = 0
  
    # loop through the binary strings
    while i < len(str1):
        
        # if the bits at the current index are different, swap them and increment the swap counter
        if str1[i] != str2[i]:
            str1 = str1[:i] + str2[i] + str1[i+1:]
            swap_count += 1
        
        # move to the next index
        i += 1
    
    return swap_count

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-26<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('1101010','0011101') == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # initialize swap counter and index
    swap_count = 0
    i = 0
  
    # loop through the binary strings
    while i < len(str1):
        
        # if the bits at the current index are different, swap them and increment the swap counter
        if str1[i] != str2[i]:
            # find the next index with different bit
            j = i + 1
            while j < len(str1) and str1[j] == str1[i]:
                j += 1
            
            # if a different bit is found, swap the bits from index i to j-1
            if j < len(str1):
                str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]
                swap_count += 1
        
        # move to the next index
        i += 1
    
    return swap_count

assert min_Swaps('1101010','0011101') == 3
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-2<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('111','010') == -1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('1101010','0011101') == 3
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    def swap_bits(s, i, j):
        '''
        Helper function to swap bits in a string
        '''
        s = list(s)
        s[i], s[j] = s[j], s[i]
        return ''.join(s)

    # check if the strings have the same number of 1s and 0s
    if str1.count('0') != str2.count('0') or str1.count('1') != str2.count('1'):
        return -1

    # create a list of indices where the bits differ
    indices = [i for i in range(len(str1)) if str1[i] != str2[i]]

    # initialize swap counter
    swap_count = 0

    # iterate through the indices and swap the bits
    while indices:
        i = indices.pop(0)
        j = indices.pop(0)
        str1 = swap_bits(str1, i, j)
        swap_count += 1

    return swap_count

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-4<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('0000','1111') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert min_Swaps('1101010','0011101') == 3
assert min_Swaps('110011','001111') == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    swap_count = 0
    i = 0
    while i < len(str1):
        if str1[i] != str2[i]:
            j = i + 1
            while j < len(str1) and str1[j] == str1[i]:
                j += 1
            if j < len(str1):
                str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]
                swap_count += 1
            else:
                break
        i += 1
    return swap_count
```
