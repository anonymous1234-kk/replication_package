task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # count the number of zeros and ones in both strings
    count_0_str1 = count_1_str1 = count_0_str2 = count_1_str2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            count_0_str1 += 1
        else:
            count_1_str1 += 1
        if str2[i] == '0':
            count_0_str2 += 1
        else:
            count_1_str2 += 1
    
    # if the counts of zeros and ones in both strings are not equal, return -1
    if count_0_str1 != count_0_str2 or count_1_str1 != count_1_str2:
        return -1
    
    # count the number of swaps required to convert str1 to str2
    count_swaps = 0
    i = j = 0
    while i < len(str1):
        # find the next mismatched pair of characters
        while str1[i] == str2[i]:
            i += 1
        while str1[j] == str2[j]:
            j += 1
        # swap the characters at positions i and j
        if str1[i] != str2[i] and str1[j] != str2[j]:
            str1 = str1[:i] + str2[j] + str1[i+1:]
            str2 = str2[:j] + str1[i] + str2[j+1:]
            count_swaps += 1
        # if only one of the characters needs to be swapped, return -1
        else:
            return -1
    return count_swaps

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-26<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('1101010','0011101') == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # count the number of zeros and ones in both strings
    count_0_str1 = count_1_str1 = count_0_str2 = count_1_str2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            count_0_str1 += 1
        else:
            count_1_str1 += 1
        if str2[i] == '0':
            count_0_str2 += 1
        else:
            count_1_str2 += 1
    
    # if the counts of zeros and ones in both strings are not equal, return -1
    if count_0_str1 != count_0_str2 or count_1_str1 != count_1_str2:
        return -1
    
    # count the number of swaps required to convert str1 to str2
    count_swaps = 0
    i = j = 0
    while i < len(str1):
        # find the next mismatched pair of characters
        while str1[i] == str2[i]:
            i += 1
        while str1[j] == str2[j]:
            j += 1
        # swap the characters at positions i and j
        if str1[i] != str2[i] and str1[j] != str2[j]:
            str1 = str1[:i] + str2[j] + str1[i+1:]
            str2 = str2[:j] + str1[i] + str2[j+1:]
            count_swaps += 1
        # if only one of the characters needs to be swapped, swap them
        elif str1[i] != str2[i]:
            str1 = str1[:i] + str2[i] + str1[i+1:]
            str2 = str2[:i] + str1[i] + str2[i+1:]
            count_swaps += 1
        elif str1[j] != str2[j]:
            str1 = str1[:j] + str2[j] + str1[j+1:]
            str2 = str2[:j] + str1[j] + str2[j+1:]
            count_swaps += 1
        # if both characters are already the same, return -1
        else:
            return -1
    return count_swaps

assert min_Swaps('1101010','0011101') == 3
```
