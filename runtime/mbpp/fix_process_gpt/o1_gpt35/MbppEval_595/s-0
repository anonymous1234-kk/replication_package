task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
 
    # find the positions where str1 and str2 differ
    diff = [i for i in range(len(str1)) if str1[i] != str2[i]]
    # if the number of differences is odd, return -1
    if len(diff) % 2 != 0:
        return -1
    # count the number of swaps required
    count = 0
    for i in range(0,len(diff),2):
        if str1[diff[i]] == str1[diff[i+1]]:
            count += 1
        else:
            count += 2
    return count//2

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-26<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('1101010','0011101') == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
 
    # find the positions where str1 and str2 differ
    diff = [i for i in range(len(str1)) if str1[i] != str2[i]]
    # if the number of differences is odd, return -1
    if len(diff) % 2 != 0:
        return -1
    # count the number of swaps required
    count = 0
    for i in range(0,len(diff),2):
        if str1[diff[i]] == str2[diff[i+1]] and str1[diff[i+1]] == str2[diff[i]]:
            count += 1
        else:
            count += 2
    return count//2

assert min_Swaps('1101010','0011101') == 3
```

