task_id:MbppEval/595
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''
```

----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count number of zeros and ones in both strings
    zero_count1 = zero_count2 = one_count1 = one_count2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zero_count1 += 1
        else:
            one_count1 += 1
        if str2[i] == '0':
            zero_count2 += 1
        else:
            one_count2 += 1

    # If number of zeros or ones is not same in both strings, it is impossible to convert one to another
    if zero_count1 != zero_count2 or one_count1 != one_count2:
        return -1

    # Initialize two pointers, one for each string
    ptr1 = ptr2 = 0
    swap_count = 0

    # Loop through both strings
    while ptr1 < len(str1):
        # If characters at the current positions are same, move to next position
        if str1[ptr1] == str2[ptr2]:
            ptr1 += 1
            ptr2 += 1
        else:
            # If characters are different, find the next position in str1 where the character matches with str2[ptr2]
            next_ptr1 = ptr1 + 1
            while next_ptr1 < len(str1) and str1[next_ptr1] != str2[ptr2]:
                next_ptr1 += 1

            # If no such position is found, it is impossible to convert one to another
            if next_ptr1 == len(str1):
                return -1

            # Swap the characters in str1 to bring the matching character to ptr1
            while next_ptr1 > ptr1:
                str1 = str1[:next_ptr1-1] + str1[next_ptr1-1] + str1[next_ptr1:]
                swap_count += 1
                next_ptr1 -= 1

    return swap_count

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-26<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert min_Swaps('1101010','0011101') == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def min_Swaps(str1,str2) : 
    '''
    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.
    '''

    # Count number of zeros and ones in both strings
    zero_count1 = zero_count2 = one_count1 = one_count2 = 0
    for i in range(len(str1)):
        if str1[i] == '0':
            zero_count1 += 1
        else:
            one_count1 += 1
        if str2[i] == '0':
            zero_count2 += 1
        else:
            one_count2 += 1

    # If number of zeros or ones is not same in both strings, it is impossible to convert one to another
    if zero_count1 != zero_count2 or one_count1 != one_count2:
        return -1

    # Initialize two pointers, one for each string
    ptr1 = ptr2 = 0
    swap_count = 0

    # Loop through both strings
    while ptr1 < len(str1):
        # If characters at the current positions are same, move to next position
        if str1[ptr1] == str2[ptr2]:
            ptr1 += 1
            ptr2 += 1
        else:
            # If characters are different, find the next position in str1 where the character matches with str2[ptr2]
            next_ptr1 = ptr1 + 1
            while next_ptr1 < len(str1) and str1[next_ptr1] != str2[ptr2]:
                next_ptr1 += 1

            # If no such position is found, it is impossible to convert one to another
            if next_ptr1 == len(str1):
                return -1

            # Swap the characters in str1 to bring the matching character to ptr1
            while next_ptr1 > ptr1:
                str1 = str1[:next_ptr1-1] + str1[next_ptr1-1] + str1[next_ptr1:]
                swap_count += 1
                next_ptr1 -= 1

    return swap_count

assert min_Swaps('1101010','0011101') == 3
```

