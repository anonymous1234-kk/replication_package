task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n = list(str(n))
    for i in range(len(n)-1, -1, -1):
        if n[i-1] < n[i]:
            for j in range(len(n)-1, i-1, -1):
                if n[j] > n[i-1]:
                    n[i-1], n[j] = n[j], n[i-1]
                    n[i:] = n[:i-1:-1]
                    return int(''.join(n))
    return -1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-8<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(3000) == -1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
assert rearrange_bigger(999999999) == -1
assert rearrange_bigger(22) == -1
assert rearrange_bigger(9) == -1
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n = list(str(n))
    for i in range(len(n)-1, 0, -1):
        if n[i-1] < n[i]:
            for j in range(len(n)-1, i-1, -1):
                if n[j] > n[i-1]:
                    n[i-1], n[j] = n[j], n[i-1]
                    n[i:] = n[:i-1:-1]
                    return int(''.join(n))
    return -1
```
