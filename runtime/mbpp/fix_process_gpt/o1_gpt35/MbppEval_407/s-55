task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    # Convert the number to a list of digits
    digits = list(str(n))
    
    # Find the index where the non-increasing sequence starts
    i = len(digits) - 1
    while i > 0 and digits[i-1] >= digits[i]:
        i -= 1
    
    # If the entire sequence is non-increasing, return the original number
    if i == 0:
        return n
    
    # Find the smallest digit to the right of the non-increasing sequence that is greater than the last digit in the sequence
    j = len(digits) - 1
    while digits[j] <= digits[i-1]:
        j -= 1
    
    # Swap the last digit in the non-increasing sequence with the smallest digit to its right that is greater than it
    digits[i-1], digits[j] = digits[j], digits[i-1]
    
    # Reverse the digits to the right of the non-increasing sequence
    digits[i:] = digits[:i-1:-1]
    
    # Convert the list of digits back to an integer and return it
    return int(''.join(digits))

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == -1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    # Convert the number to a list of digits
    digits = list(str(n))
    
    # Find the index where the non-increasing sequence starts
    i = len(digits) - 1
    while i > 0 and digits[i-1] >= digits[i]:
        i -= 1
    
    # If the entire sequence is non-increasing, return -1
    if i == 0:
        return -1
    
    # Find the smallest digit to the right of the non-increasing sequence that is greater than the last digit in the sequence
    j = len(digits) - 1
    while digits[j] <= digits[i-1]:
        j -= 1
    
    # Swap the last digit in the non-increasing sequence with the smallest digit to its right that is greater than it
    digits[i-1], digits[j] = digits[j], digits[i-1]
    
    # Reverse the digits to the right of the non-increasing sequence
    digits[i:] = digits[:i-1:-1]
    
    # Convert the list of digits back to an integer and return it
    return int(''.join(digits))
```
