task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n = str(n)
    for i in range(len(n) - 1, 0, -1):
        if n[i] > n[i - 1]:
            pivot = i - 1
            break
    else:
        return int(n)
    right = n[pivot + 1:]
    for i in range(len(right) - 1, 0, -1):
        if right[i] > n[pivot]:
            break
    right = right[:i + 1] + ''.join(sorted(right[i + 1:]))
    return int(n[:pivot] + right)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-1<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(123) == 132
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n = list(str(n))
    for i in range(len(n) - 1, 0, -1):
        if n[i] > n[i - 1]:
            pivot = i - 1
            break
    else:
        return int(''.join(n))
    right = n[pivot + 1:]
    for i in range(len(right) - 1, 0, -1):
        if right[i] > n[pivot]:
            break
    right[i], n[pivot] = n[pivot], right[i]
    right = sorted(right)
    result = int(''.join(n[:pivot] + [right[0]] + right[1:]))
    return result
```
