task_id:MbppEval/407
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''
```

----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    # Convert the number to a string so we can manipulate the digits
    n_str = str(n)
    
    # Find the index of the first digit that is smaller than the digit to its right
    for i in range(len(n_str)-2, -1, -1):
        if n_str[i] < n_str[i+1]:
            break
    else:
        # If we didn't find such a digit, the number is already the largest possible permutation
        return n
    
    # Find the smallest digit to the right of n_str[i] that is greater than it
    j = min(range(i+1, len(n_str)), key=lambda x: n_str[x])
    
    # Swap the digits at positions i and j
    n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]
    
    # Reverse the digits to the right of position i
    n_str = n_str[:i+1] + n_str[i+1:][::-1]
    
    # Convert the string back to an integer and return it
    return int(n_str)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(999999999) == -1
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    '''
    Write a function to create the next bigger number by rearranging the digits of a given number.
    '''

    n_str = str(n)

    for i in range(len(n_str)-2, -1, -1):
        if n_str[i] < n_str[i+1]:
            break
    else:
        return -1

    j = min(range(i+1, len(n_str)), key=lambda x: (n_str[x], x))
    
    n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]
    
    n_str = n_str[:i+1] + n_str[i+1:][::-1]
    
    return int(n_str)
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-32<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert rearrange_bigger(53421) == 54123
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert rearrange_bigger(123) == 132
assert rearrange_bigger(132) == 213
assert rearrange_bigger(999999999) == -1
assert rearrange_bigger(22) == -1
assert rearrange_bigger(9) == -1
assert rearrange_bigger(3000) == -1
assert rearrange_bigger(54321) == -1
assert rearrange_bigger(1) == -1
assert rearrange_bigger(53214) == 53241
assert rearrange_bigger(999) == -1
assert rearrange_bigger(531) == -1
assert rearrange_bigger(754298) == 754829
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def rearrange_bigger(n):
    n_str = str(n)

    for i in range(len(n_str)-2, -1, -1):
        if n_str[i] < n_str[i+1]:
            break
    else:
        return -1

    j = min(range(i+1, len(n_str)), key=lambda x: (n_str[x], x))
    
    n_str = n_str[:i] + n_str[j] + n_str[i+1:j] + n_str[i] + n_str[j+1:]
    
    n_str = n_str[:i+1] + n_str[i+1:][::-1]
    
    return int(n_str)
```
