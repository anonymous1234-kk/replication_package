task_id:MbppEval/472
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def check_Consecutive(l): 
    '''
    Write a python function to check whether the given list contains consecutive numbers or not.
    '''
```

----------------------Assistant Message----------------------
```python
def check_Consecutive(l): 
    '''
    Write a python function to check whether the given list contains consecutive numbers or not.
    '''
 
    '''
    Write a python function to check whether the given list contains consecutive numbers or not.
    '''
    n = len(l)
    if n == 1:
        return True

    for i in range(1, n):
        if l[i] - l[i-1] != 1:
            return False

    return True

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-24<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert check_Consecutive([6, 5, 4, 3, 2, 1]) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert check_Consecutive([2, 5, 4, 8, 6]) == False
assert check_Consecutive([1, 3, 4, 5, 6]) == False
assert check_Consecutive([7, 8, 9]) == True
assert check_Consecutive([10, 20, 30, 40, 50, 60, 70, 80, 90]) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def check_Consecutive(l): 
    n = len(l)
    if n == 1:
        return True

    l.sort()
    for i in range(1, n):
        if l[i] - l[i-1] != 1:
            return False

    return True
```
