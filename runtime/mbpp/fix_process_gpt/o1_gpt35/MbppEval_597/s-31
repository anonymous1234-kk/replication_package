task_id:MbppEval/597
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_kth(arr1, arr2, k):
    '''
    Write a function to find kth element from the given two sorted arrays.
    '''
```

----------------------Assistant Message----------------------
```python
def find_kth(arr1, arr2, k):
    '''
    Write a function to find kth element from the given two sorted arrays.
    '''

    '''
    Write a function to find kth element from the given two sorted arrays.
    '''
    m, n = len(arr1), len(arr2)
    if m > n:
        arr1, arr2, m, n = arr2, arr1, n, m
    i_min, i_max, half_len = 0, m, (m + n + 1) // 2
    while i_min <= i_max:
        i = (i_min + i_max) // 2
        j = half_len - i
        if i < m and arr2[j-1] > arr1[i]:
            i_min = i + 1
        elif i > 0 and arr1[i-1] > arr2[j]:
            i_max = i - 1
        else:
            if i == 0: max_of_left = arr2[j-1]
            elif j == 0: max_of_left = arr1[i-1]
            else: max_of_left = max(arr1[i-1], arr2[j-1])
            if (m + n) % 2 == 1:
                return max_of_left
            if i == m: min_of_right = arr2[j]
            elif j == n: min_of_right = arr1[i]
            else: min_of_right = min(arr1[i], arr2[j])
            return (max_of_left + min_of_right) / 2.0

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-49<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_kth([1, 2, 3, 4, 5, 6, 7, 8, 9],[9, 10, 11, 12, 13],14) == 13
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_kth(arr1, arr2, k):
    '''
    Write a function to find kth element from the given two sorted arrays.
    '''

    m, n = len(arr1), len(arr2)
    if m > n:
        arr1, arr2, m, n = arr2, arr1, n, m
    i_min, i_max, half_len = 0, m, (m + n + 1) // 2
    while i_min <= i_max:
        i = (i_min + i_max) // 2
        j = half_len - i
        if i < m and arr2[j-1] > arr1[i]:
            i_min = i + 1
        elif i > 0 and arr1[i-1] > arr2[j]:
            i_max = i - 1
        else:
            if i == 0: max_of_left = arr2[j-1]
            elif j == 0: max_of_left = arr1[i-1]
            else: max_of_left = max(arr1[i-1], arr2[j-1])
            if (m + n) % 2 == 1:
                return max_of_left
            if i == m: min_of_right = arr2[j]
            elif j == n: min_of_right = arr1[i]
            else: min_of_right = min(arr1[i], arr2[j])
            return (max_of_left + min_of_right) / 2.0

    return None
```
