task_id:MbppEval/92
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def is_undulating(n): 
    '''
    Write a function to check whether the given number is undulating or not.
    '''
```

----------------------Assistant Message----------------------
```python
def is_undulating(n): 
    '''
    Write a function to check whether the given number is undulating or not.
    '''
 
    '''
    Write a function to check whether the given number is undulating or not.
    '''
    digits = [int(d) for d in str(n)] # convert number to list of digits
    if len(digits) < 3: # if number has less than 3 digits, return False
        return False
    prev_diff = digits[1] - digits[0] # calculate difference between first two digits
    for i in range(2, len(digits)):
        curr_diff = digits[i] - digits[i-1] # calculate difference between current and previous digit
        if prev_diff == 0 or curr_diff == 0 or prev_diff == curr_diff: # check if there are consecutive zeros or if the differences are equal
            return False
        prev_diff = curr_diff # update the previous difference for next iteration
    return True # if all conditions are met, return True

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-47<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_undulating(121213) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert is_undulating(4554) == False
assert is_undulating(7887) == False
assert is_undulating(1221) == False
assert is_undulating(123456789) == False
assert is_undulating(121234) == False
assert is_undulating(1234567890987654321) == False
assert is_undulating(76557567) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_undulating(n): 
    digits = [int(d) for d in str(n)]
    if len(digits) < 3:
        return False
    prev_diff = digits[1] - digits[0]
    for i in range(2, len(digits)):
        curr_diff = digits[i] - digits[i-1]
        if prev_diff == 0 or curr_diff == 0 or prev_diff == curr_diff:
            return False
        if i % 2 == 0 and curr_diff > 0:
            return False
        if i % 2 == 1 and curr_diff < 0:
            return False
        prev_diff = curr_diff
    return True
```
