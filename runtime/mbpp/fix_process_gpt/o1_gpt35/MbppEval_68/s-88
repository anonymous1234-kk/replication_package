task_id:MbppEval/68
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def is_Monotonic(A): 
    '''
    Write a python function to check whether the given array is monotonic or not.
    '''
```

----------------------Assistant Message----------------------
```python
def is_Monotonic(A): 
    '''
    Write a python function to check whether the given array is monotonic or not.
    '''

    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))
```

Note: This implementation assumes that the given array is strictly monotonic, i.e., it does not contain repeated elements. If the array can contain repeated elements, we can modify the implementation as follows:

```python
def is_Monotonic(A):
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)) or len(set(A)) == 1)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-36<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_Monotonic([1, 4, 3, 3]) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def is_Monotonic(A): 
    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)) or A == sorted(A)
```
