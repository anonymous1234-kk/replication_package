task_id:MbppEval/119
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''
```

----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    """
    Find the element that appears only once in a sorted array.

    Args:
    arr (list): A sorted list of integers.

    Returns:
    int: The element that appears only once in the array.
    """
    # Check if the length of the array is odd
    if len(arr) % 2 == 1:
        # Perform binary search
        left = 0
        right = len(arr) - 1
        while left < right:
            mid = (left + right) // 2
            if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
                return arr[mid]
            elif arr[mid] == arr[mid - 1]:
                if (mid - 1 - left) % 2 == 0:
                    right = mid - 2
                else:
                    left = mid + 1
            else:
                if (right - mid - 1) % 2 == 0:
                    left = mid + 2
                else:
                    right = mid - 1
        return arr[left]
    else:
        return None

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-34<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140, 140]) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    """
    Find the element that appears only once in a sorted array.

    Args:
    arr (list): A sorted list of integers.

    Returns:
    int: The element that appears only once in the array.
    """
    # Check if the length of the array is odd
    if len(arr) % 2 == 1:
        # Perform binary search
        left = 0
        right = len(arr) - 1
        while left <= right:
            if left == right:
                return arr[left]
            mid = (left + right) // 2
            if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
                return arr[mid]
            elif arr[mid] == arr[mid - 1]:
                if (mid - left) % 2 == 0:
                    left = mid + 1
                else:
                    right = mid - 2
            else:
                if (right - mid) % 2 == 0:
                    right = mid - 1
                else:
                    left = mid + 2
    else:
        return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-39<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 150]) == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    """
    Find the element that appears only once in a sorted array.

    Args:
    arr (list): A sorted list of integers.

    Returns:
    int: The element that appears only once in the array.
    """
    # Check if the length of the array is odd
    if len(arr) % 2 == 1:
        # Perform binary search
        left = 0
        right = len(arr) - 1
        while left <= right:
            mid = (left + right) // 2
            if mid == 0 or mid == len(arr) - 1:
                return arr[mid]
            if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
                return arr[mid]
            elif arr[mid] == arr[mid - 1]:
                if (mid - 1 - left) % 2 == 0:
                    right = mid - 2
                else:
                    left = mid + 1
            else:
                if (right - mid - 1) % 2 == 0:
                    left = mid + 2
                else:
                    right = mid - 1
    return None

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-33<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Certainly! Here's the updated code that will pass the provided test case:
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    """
    Find the element that appears only once in a sorted array.

    Args:
    arr (list): A sorted list of integers.

    Returns:
    int: The element that appears only once in the array.
    """
    # Check if the length of the array is odd
    if len(arr) % 2 == 1:
        # Perform binary search
        left = 0
        right = len(arr) - 1
        while left < right:
            mid = (left + right) // 2
            if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
                return arr[mid]
            elif arr[mid] == arr[mid - 1]:
                if (mid - left) % 2 == 0:
                    right = mid - 2
                else:
                    left = mid + 1
            else:
                if (right - mid) % 2 == 0:
                    left = mid + 2
                else:
                    right = mid - 1
        return arr[left]
    else:
        return None
```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-35<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    """
    Find the element that appears only once in a sorted array.

    Args:
    arr (list): A sorted list of integers.

    Returns:
    int: The element that appears only once in the array.
    """
    # Check if the length of the array is odd
    if len(arr) % 2 == 1:
        # Perform binary search
        left = 0
        right = len(arr) - 1
        while left < right:
            mid = (left + right) // 2
            if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
                return arr[mid]
            elif arr[mid] == arr[mid - 1]:
                if (mid - left + 1) % 2 == 0:
                    right = mid - 2
                else:
                    left = mid + 1
            else:
                if (right - mid + 1) % 2 == 0:
                    left = mid + 2
                else:
                    right = mid - 1
        return arr[left]
    else:
        return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-38<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 140, 150]) == [3, 150]
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
assert search([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]) == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    """
    Find the element that appears only once in a sorted array.

    Args:
    arr (list): A sorted list of integers.

    Returns:
    int or list: The element that appears only once in the array, or a list of two elements if there are two unique elements.
    """
    if len(arr) % 2 == 1:
        left = 0
        right = len(arr) - 1
        while left < right:
            mid = (left + right) // 2
            if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
                return arr[mid]
            elif arr[mid] == arr[mid - 1]:
                if (mid - left) % 2 == 0:
                    right = mid - 2
                else:
                    left = mid + 1
            else:
                if (right - mid) % 2 == 0:
                    left = mid + 2
                else:
                    right = mid - 1
        return [arr[left], arr[right]]
    else:
        return None
```
