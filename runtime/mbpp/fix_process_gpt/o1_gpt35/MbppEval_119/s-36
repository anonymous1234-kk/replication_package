task_id:MbppEval/119
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''
```

----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    # If the array is empty or contains only one element, then return that element
    if len(arr) == 1:
        return arr[0]
    
    # Check the first element
    if arr[0] != arr[1]:
        return arr[0]
    
    # Check the last element
    if arr[-1] != arr[-2]:
        return arr[-1]
    
    # Perform binary search
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        # Check if the middle element is the answer
        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:
            return arr[mid]
        
        # Check the left side of the array
        if mid % 2 == 0:
            if arr[mid] == arr[mid-1]:
                right = mid - 1
            else:
                left = mid + 1
        # Check the right side of the array
        else:
            if arr[mid] == arr[mid-1]:
                left = mid + 1
            else:
                right = mid - 1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-34<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140, 140]) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    if len(arr) == 1:
        return arr[0]
    
    if arr[0] != arr[1]:
        return arr[0]
    
    if arr[-1] != arr[-2]:
        return arr[-1]
    
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:
            return arr[mid]
        
        if mid % 2 == 0:
            if arr[mid] == arr[mid-1]:
                left = mid + 1
            else:
                right = mid - 1
        else:
            if arr[mid] == arr[mid-1]:
                right = mid - 1
            else:
                left = mid + 1
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-39<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 150]) == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    # If the array is empty or contains only one element, then return that element
    if len(arr) == 1:
        return arr[0]
    
    # Check the first element
    if arr[0] != arr[1]:
        return arr[0]
    
    # Check the last element
    if arr[-1] != arr[-2]:
        return arr[-1]
    
    # Perform binary search
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        # Check if the middle element is the answer
        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:
            return arr[mid]
        
        # Check the left side of the array
        if mid % 2 == 0:
            if arr[mid] == arr[mid-1]:
                right = mid - 2
            else:
                left = mid + 2
        # Check the right side of the array
        else:
            if arr[mid] == arr[mid-1]:
                left = mid + 1
            else:
                right = mid - 1
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-38<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 140, 150]) == [3, 150]
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
assert search([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]) == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    if len(arr) == 1:
        return arr[0]
    
    if arr[0] != arr[1]:
        return arr[0]
    
    if arr[-1] != arr[-2]:
        return arr[-1]
    
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if mid > 0 and arr[mid] == arr[mid-1]:
            mid -= 1
        
        if mid < len(arr)-1 and arr[mid] == arr[mid+1]:
            mid += 1
        
        if mid == 0 or mid == len(arr)-1:
            return arr[mid]
        
        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:
            return arr[mid]
        
        if (mid - left) % 2 == 0:
            if arr[mid] == arr[mid+1]:
                left = mid + 2
            else:
                right = mid - 1
        else:
            if arr[mid] == arr[mid-1]:
                left = mid + 1
            else:
                right = mid - 1
```
