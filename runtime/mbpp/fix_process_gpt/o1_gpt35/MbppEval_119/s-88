task_id:MbppEval/119
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''
```

----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    n = len(arr)
    # Traverse the input array. Since array is sorted,
    # all occurrences of a element will be together
    i = 0
    while i < n:
        # If this is not the last element and the next element is
        # the same as arr[i], then increment i
        if i < n - 1 and arr[i] == arr[i + 1]:
            i += 2
        else:
            # This is the element that appears only once
            return arr[i]
    return None

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-39<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 150]) == 3
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    n = len(arr)
    i = 0
    while i < n:
        if i < n - 1 and arr[i] == arr[i + 1]:
            i += 2
        else:
            return arr[i]
    return None

assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 150]) == 3
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-35<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    n = len(arr)
    # Traverse the input array. Since array is sorted,
    # all occurrences of a element will be together
    i = 0
    while i < n:
        # If this is not the last element and the next element is
        # the same as arr[i], then increment i
        if i < n - 1 and arr[i] == arr[i + 1]:
            i += 2
        else:
            # This is the element that appears only once
            if i == 0 or arr[i] != arr[i-1]:
                return arr[i]
            else:
                i += 1
    return None
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-38<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 140, 150]) == [3, 150]
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
assert search([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]) == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    n = len(arr)
    # Traverse the input array. Since array is sorted,
    # all occurrences of a element will be together
    i = 0
    while i < n:
        # If this is not the last element and the next element is
        # the same as arr[i], then increment i
        if i < n - 1 and arr[i] == arr[i + 1]:
            i += 2
        else:
            # This is the element that appears only once
            if (i == 0 or arr[i] != arr[i-1]) and (i == n-1 or arr[i] != arr[i+1]):
                return arr[i]
            else:
                i += 1
    return None
```
