task_id:MbppEval/119
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''
```

----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    # Initialize variables
    left = 0
    right = len(arr) - 1

    # Loop until the left index is less than or equal to the right index
    while left <= right:
        # Calculate the mid index
        mid = (left + right) // 2

        # Check if the mid index is the single occurrence element
        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] != arr[mid]):
            return arr[mid]

        # If the left to mid subarray is sorted
        if arr[mid - 1] == arr[mid]:
            # If the number of elements in the left to mid subarray is odd
            # Then the single occurrence element is in the right subarray
            if (mid - left + 1) % 2 == 0:
                left = mid + 1
            # Else the single occurrence element is in the left subarray
            else:
                right = mid - 1

        # If the mid to right subarray is sorted
        elif arr[mid + 1] == arr[mid]:
            # If the number of elements in the mid to right subarray is odd
            # Then the single occurrence element is in the left subarray
            if (right - mid + 1) % 2 == 0:
                right = mid - 1
            # Else the single occurrence element is in the right subarray
            else:
                left = mid + 1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-34<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140, 140]) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Sure, here is the fixed code:

```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] != arr[mid]):
            return arr[mid]

        if arr[mid - 1] == arr[mid]:
            if (mid - left + 1) % 2 == 0:
                left = mid + 2
            else:
                right = mid - 1

        elif arr[mid + 1] == arr[mid]:
            if (right - mid + 1) % 2 == 0:
                right = mid - 2
            else:
                left = mid + 1
```

This code should now correctly pass the provided test case `assert search([1, 1, 2, 2, 2, 3, 3, 50, 50, 60, 60, 140, 140]) == 2`, as well as the previously passed test cases.
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-33<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    '''
    Write a python function to find the element that appears only once in a sorted array.
    '''

    # Initialize variables
    left = 0
    right = len(arr) - 1

    # Loop until the left index is less than or equal to the right index
    while left <= right:
        # Calculate the mid index
        mid = (left + right) // 2

        # Check if the mid index is the single occurrence element
        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] != arr[mid]):
            return arr[mid]

        # If the left to mid subarray is sorted
        if arr[mid - 1] == arr[mid]:
            # If the number of elements in the left to mid subarray is odd
            # Then the single occurrence element is in the right subarray
            if (mid - left + 1) % 2 == 0:
                left = mid + 1
            # Else the single occurrence element is in the left subarray
            else:
                right = mid - 2

        # If the mid to right subarray is sorted
        elif arr[mid + 1] == arr[mid]:
            # If the number of elements in the mid to right subarray is odd
            # Then the single occurrence element is in the left subarray
            if (right - mid + 1) % 2 == 0:
                right = mid - 1
            # Else the single occurrence element is in the right subarray
            else:
                left = mid + 2
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-38<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 2, 3, 50, 50, 60, 60, 140, 140, 150]) == [3, 150]
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert search([1, 1, 2, 2, 3, 3, 50, 50, 60, 60, 140]) == 140
assert search([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]) == 2
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(arr):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if (mid == 0 or arr[mid - 1] != arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] != arr[mid]):
            return arr[mid]

        if arr[mid - 1] == arr[mid]:
            if (mid - left + 1) % 2 == 0:
                left = mid + 2
            else:
                right = mid - 1

        elif arr[mid + 1] == arr[mid]:
            if (right - mid + 1) % 2 == 0:
                right = mid - 2
            else:
                left = mid + 1
```

