task_id:MbppEval/598
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def armstrong_number(number):
    '''
    Write a function to check whether the given number is armstrong or not.
    '''
```

----------------------Assistant Message----------------------
```python
def armstrong_number(number):
    '''
    Write a function to check whether the given number is armstrong or not.
    '''

    """
    Checks if a given number is an Armstrong number or not.

    An Armstrong number is a number that is equal to the sum of its own digits
    each raised to the power of the number of digits.

    :param number: An integer to check if it is an Armstrong number
    :return: True if `number` is an Armstrong number, else False
    """

    # Calculate the number of digits in the number
    num_digits = len(str(number))

    # Calculate the sum of each digit raised to the power of the number of digits
    digit_sum = 0
    for digit in str(number):
        digit_sum += int(digit) ** num_digits

    # Check if the sum is equal to the number
    if digit_sum == number:
        return True
    else:
        return False

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-29<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert armstrong_number(3) == Armstrong Number
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert armstrong_number(10) == False
assert armstrong_number('123') == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def armstrong_number(number):
    '''
    Write a function to check whether the given number is armstrong or not.
    '''

    """
    Checks if a given number is an Armstrong number or not.

    An Armstrong number is a number that is equal to the sum of its own digits
    each raised to the power of the number of digits.

    :param number: An integer to check if it is an Armstrong number
    :return: True if `number` is an Armstrong number, else False
    """

    # Calculate the number of digits in the number
    num_digits = len(str(number))

    # Calculate the sum of each digit raised to the power of the number of digits
    digit_sum = 0
    for digit in str(number):
        digit_sum += int(digit) ** num_digits

    # Check if the sum is equal to the number
    if digit_sum == number:
        return "Armstrong Number"
    else:
        return False
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-1<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert armstrong_number(9474) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert armstrong_number(10) == False
assert armstrong_number('123') == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def armstrong_number(number):
    '''
    Write a function to check whether the given number is armstrong or not.
    '''

    """
    Checks if a given number is an Armstrong number or not.

    An Armstrong number is a number that is equal to the sum of its own digits
    each raised to the power of the number of digits.

    :param number: An integer to check if it is an Armstrong number
    :return: True if `number` is an Armstrong number, else False
    """

    # Calculate the number of digits in the number
    num_digits = len(str(number))

    # Calculate the sum of each digit raised to the power of the number of digits
    digit_sum = 0
    for digit in str(number):
        digit_sum += int(digit) ** num_digits

    # Check if the sum is equal to the number
    return digit_sum == number
```
