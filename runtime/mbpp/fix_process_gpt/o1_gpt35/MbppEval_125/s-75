task_id:MbppEval/125
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
```

----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''

    n = len(string)
    count = [0]*(n+1)
    count[0] = 1 if string[0] == '0' else -1
    max_len = 0

    for i in range(1, n):
        count[i] = count[i-1] + (1 if string[i] == '0' else -1)

    min_val = min(count)
    max_val = max(count)

    if max_val - min_val > 1:
        for i in range(n):
            for j in range(i+1, n):
                if count[j] - count[i] == max_val - min_val:
                    max_len = max(max_len, j-i)

    return max_len

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('11001110101011') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''

    n = len(string)
    count = [0]*(n+1)
    count[0] = 1 if string[0] == '0' else -1
    max_len = 0

    for i in range(1, n):
        count[i] = count[i-1] + (1 if string[i] == '0' else -1)

    min_val = min(count)
    max_val = max(count)

    if max_val - min_val >= 1:
        for i in range(n):
            for j in range(i+1, n):
                if count[j] - count[i] == max_val - min_val:
                    max_len = max(max_len, j-i)

    return max_len
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-28<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('11111000000000000000000000000001111100000000000000') == 35
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Here is the fixed code:
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''

    n = len(string)
    count = [0]*(n+1)
    count[0] = 1 if string[0] == '0' else -1
    max_len = 0

    for i in range(1, n):
        count[i] = count[i-1] + (1 if string[i] == '0' else -1)

    min_val = min(count)
    max_val = max(count)

    if max_val - min_val > 1:
        for i in range(n):
            for j in range(i+1, n):
                if count[j] - count[i] == max_val - min_val:
                    max_len = max(max_len, j-i+1)

    return max_len

assert find_length('11111000000000000000000000000001111100000000000000') == 35
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-29<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('1010011100001110100101110111111100110001111101111011') == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''

    n = len(string)
    count = [0]*(n+1)
    count[0] = 0
    max_len = 0
    count_map = {0: -1}

    for i in range(1, n+1):
        count[i] = count[i-1] + (1 if string[i-1] == '0' else -1)
        if count[i] in count_map:
            max_len = max(max_len, i - count_map[count[i]])
        else:
            count_map[count[i]] = i

    return max_len
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-31<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('0000100') == 5
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''

    n = len(string)
    count = [0]*(n+1)
    count[0] = 0
    max_len = 0
    seen = {0: -1}

    for i in range(1, n+1):
        count[i] = count[i-1] + (1 if string[i-1] == '1' else -1)
        if count[i] not in seen:
            seen[count[i]] = i
        else:
            max_len = max(max_len, i - seen[count[i]])

    return max_len
```
