task_id:MbppEval/125
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
```

----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = 0
    ans = -1
    mp = {} 
    mp[0] = -1 
    for i in range(n): 
        if (string[i] == '0'): 
            count += 1
        else: 
            count -= 1
        if(count in mp): 
            if (ans < i - mp[count]): 
                ans = i - mp[count] 
        else: 
            mp[count] = i  
    return ans

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('11001110101011') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = 0
    ans = 0
    mp = {} 
    mp[0] = -1 
    for i in range(n): 
        if (string[i] == '0'): 
            count += 1
        else: 
            count -= 1
        if(count in mp): 
            if (ans < i - mp[count]): 
                ans = i - mp[count] 
        else: 
            mp[count] = i  
    return ans
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-27<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('11111110000000000000') == 13
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = 0
    ans = 0
    mp = {} 
    mp[0] = -1 
    for i in range(n): 
        if (string[i] == '0'): 
            count += 1
        else: 
            count -= 1
        if(count in mp): 
            if (ans < i - mp[count]): 
                ans = i - mp[count] 
        else: 
            mp[count] = i  
    return ans
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-28<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('11111000000000000000000000000001111100000000000000') == 35
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = 0
    ans = -1
    mp = {} 
    mp[0] = -1 
    for i in range(n): 
        if (string[i] == '0'): 
            count += 1
        else: 
            count -= 1
        if(count in mp): 
            if (ans < i - mp[count]): 
                ans = i - mp[count] 
        else: 
            mp[count] = i  
    return ans
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-29<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('1010011100001110100101110111111100110001111101111011') == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = 0
    ans = 0
    mp = {} 
    mp[0] = -1 
    for i in range(n): 
        if (string[i] == '0'): 
            count += 1
        else: 
            count -= 1
        if(count in mp): 
            if (ans < i - mp[count]): 
                ans = i - mp[count] 
        else: 
            mp[count] = i  
    return ans
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-31<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('0000100') == 5
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = 0
    ans = -1
    mp = {} 
    mp[0] = -1 
    for i in range(n): 
        if (string[i] == '0'): 
            count += 1
        else: 
            count -= 1
        if(count in mp): 
            if (ans < i - mp[count]): 
                ans = i - mp[count] 
        else: 
            mp[count] = i  
    if ans == -1:
        return 0
    return ans

```
