task_id:MbppEval/125
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
```

----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = [0]*(n+1)
    count[0] = 1 if string[0]=='1' else -1
    ans = 0
    for i in range(1,n):
        count[i] = count[i-1] + (1 if string[i]=='1' else -1)
        max_so_far = count[i]
        min_so_far = count[i]
        for j in range(i):
            max_so_far = max(max_so_far, count[j])
            min_so_far = min(min_so_far, count[j])
        ans = max(ans, max_so_far - min_so_far)
    return ans

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('11001110101011') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = [0]*(n+1)
    count[0] = 0
    ans = 0
    for i in range(1,n+1):
        count[i] = count[i-1] + (1 if string[i-1]=='1' else -1)
    min_prefix = [0]*(n+1)
    for i in range(1,n+1):
        min_prefix[i] = min(min_prefix[i-1], count[i])
    for i in range(1,n+1):
        ans = max(ans, count[i]-min_prefix[i])
    return ans
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-29<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('1010011100001110100101110111111100110001111101111011') == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = [0]*(n+1)
    count[0] = 0
    ans = 0
    for i in range(1,n+1):
        count[i] = count[i-1] + (1 if string[i-1]=='1' else -1)
        max_so_far = count[i]
        min_so_far = count[i]
        for j in range(i):
            max_so_far = max(max_so_far, count[j])
            min_so_far = min(min_so_far, count[j])
        ans = max(ans, max_so_far - min_so_far)
    return ans
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-31<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('0000100') == 5
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = [0]*(n+1)
    count[0] = 0
    ans = 0
    for i in range(1,n+1):
        count[i] = count[i-1] + (1 if string[i-1]=='1' else -1)
        max_so_far = count[i]
        min_so_far = count[i]
        for j in range(i):
            max_so_far = max(max_so_far, count[j])
            min_so_far = min(min_so_far, count[j])
        ans = max(ans, max_so_far - min_so_far)
    return ans
```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-0<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert find_length('0011101') == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert find_length('0000100') == 5
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def find_length(string): 
    '''
    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.
    '''
 
    n = len(string)
    count = [0]*(n+1)
    count[0] = 0
    ans = 0
    for i in range(1,n+1):
        count[i] = count[i-1] + (1 if string[i-1]=='1' else -1)
        max_so_far = count[i]
        min_so_far = count[i]
        for j in range(i):
            max_so_far = max(max_so_far, count[j])
            min_so_far = min(min_so_far, count[j])
        ans = max(ans, max_so_far - min_so_far)
    return ans
```
