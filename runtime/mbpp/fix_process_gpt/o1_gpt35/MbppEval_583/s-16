task_id:MbppEval/583
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def catalan_number(num):
    '''
    Write a function which returns nth catalan number.
    '''
```

----------------------Assistant Message----------------------
```python
def catalan_number(num):
    '''
    Write a function which returns nth catalan number.
    '''

    if num <= 1:
        return 1

    # Calculate the nth catalan number using the formula
    # C(n) = (2n)! / (n+1)! * n!
    else:
        factorial_n = 1
        factorial_nplus1 = 1

        for i in range(2, num + 1):
            factorial_n *= i
        for i in range(2, num * 2 + 1):
            factorial_nplus1 *= i

        return factorial_nplus1 // (factorial_n * (num + 1))

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-12<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert catalan_number(11) == 58786
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def catalan_number(num):
    '''
    Write a function which returns nth catalan number.
    '''

    if num <= 1:
        return 1

    else:
        factorial_n = 1
        factorial_nplus1 = 1

        for i in range(2, num + 1):
            factorial_n *= i
        for i in range(num + 2, num * 2 + 1):
            factorial_nplus1 *= i

        return factorial_nplus1 // (factorial_n * (num + 1))
```
