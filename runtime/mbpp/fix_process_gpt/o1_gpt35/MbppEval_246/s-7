task_id:MbppEval/246
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def babylonian_squareroot(number):
    '''
    Write a function for computing square roots using the babylonian method.
    '''
```

----------------------Assistant Message----------------------
```python
def babylonian_squareroot(number):
    '''
    Write a function for computing square roots using the babylonian method.
    '''

    """
    Return the square root of a positive number using the Babylonian method.
    """
    # Check if the number is positive
    if number < 0:
        return "Cannot compute square root of a negative number"
    
    # Initialize the guess value
    guess = number/2.0
    
    # Perform iterations until the desired level of accuracy is achieved
    while abs(number - (guess**2)) > 1e-12:
        guess = (guess + number/guess)/2.0
    
    # Return the calculated square root
    return guess

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-26<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert babylonian_squareroot(37) == 6.082207001484488
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def babylonian_squareroot(number):
    '''
    Write a function for computing square roots using the babylonian method.
    '''

    """
    Return the square root of a positive number using the Babylonian method.
    """
    # Check if the number is positive
    if number < 0:
        return "Cannot compute square root of a negative number"
    
    # Initialize the guess value
    guess = number/2.0
    
    # Perform iterations until the desired level of accuracy is achieved
    while abs(number - (guess**2)) > 1e-12:
        guess = (guess + number/guess)/2.0
    
    # Return the calculated square root
    return round(guess, 15)
```
