task_id:MbppEval/721
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''
```

----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''

    N = len(cost)
    
    # Create a 2D array to store the sum of costs of all paths from (0, 0) to (i, j)
    sum_cost = [[0 for j in range(N)] for i in range(N)]
    
    # Initialize the first row and first column of sum_cost
    sum_cost[0][0] = cost[0][0]
    for j in range(1, N):
        sum_cost[0][j] = sum_cost[0][j-1] + cost[0][j]
    for i in range(1, N):
        sum_cost[i][0] = sum_cost[i-1][0] + cost[i][0]
        
    # Compute the sum of costs of all paths from (0, 0) to (i, j) using dynamic programming
    for i in range(1, N):
        for j in range(1, N):
            sum_cost[i][j] = cost[i][j] + max(sum_cost[i-1][j], sum_cost[i][j-1])
    
    # Compute the maximum average
    return sum_cost[N-1][N-1] / (2*N-1)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-24<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert maxAverageOfPath([[1, 2, 3], [4, 5, 6]]) == 4.0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert maxAverageOfPath([[1, 2], [3, 4]]) == 2.6666666666666665
assert maxAverageOfPath([[1, 0], [1, 0]]) == 0.6666666666666666
assert maxAverageOfPath([[1, 2, 3], [1, 3, 1], [1, 1, 1]]) == 1.6
assert maxAverageOfPath([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 3.888888888888889
assert maxAverageOfPath([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [-6, 2, 3, 4, 5]]) == 3.888888888888889
assert maxAverageOfPath([[1, 2, 3, 4, 5], [-6, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 3.888888888888889
assert maxAverageOfPath([[-6, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 3.111111111111111
assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8
assert maxAverageOfPath([[3, 7, 9, 2], [2, 8, 1, 5], [1, 6, 1, 8], [2, 6, 9, 4]]) == 6.142857142857143
assert maxAverageOfPath([[1, 2], [4, 5]]) == 3.3333333333333335
assert maxAverageOfPath([[3, 5], [9, 6]]) == 6.0
assert maxAverageOfPath([[3, 5], [9, 4]]) == 5.333333333333333
assert maxAverageOfPath([[3, 4], [2, 5]]) == 4.0
assert maxAverageOfPath([[3, 4, 7], [2, 5, 3], [6, 2, 9]]) == 5.2
assert maxAverageOfPath([[1, -10, 3], [-20, 5, 6], [7, 8, 9]]) == 2.6
assert maxAverageOfPath([[-1, 2, -3], [4, -5, 6], [7, 8, -9]]) == 1.8
assert maxAverageOfPath([[1, 2], [3, 4]]) == 2.6666666666666665
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    N = len(cost)
    sum_cost = [[0 for j in range(N)] for i in range(N)]
    sum_cost[0][0] = cost[0][0]
    for j in range(1, N):
        sum_cost[0][j] = sum_cost[0][j-1] + cost[0][j]
    for i in range(1, N):
        sum_cost[i][0] = sum_cost[i-1][0] + cost[i][0]
    for i in range(1, N):
        for j in range(1, N):
            sum_cost[i][j] = cost[i][j] + max(sum_cost[i-1][j], sum_cost[i][j-1])
    return sum_cost[N-1][N-1] / (2*N-1)
```
