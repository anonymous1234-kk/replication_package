task_id:MbppEval/721
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''
```

----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    '''
    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.
    '''

    n = len(cost)
    dp = [[0] * (n+1) for _ in range(n+1)]
    dp[1][1] = cost[0][0]
    
    for i in range(1, n+1):
        for j in range(1, n+1):
            if i == 1 and j == 1:
                continue
            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]
    
    return dp[n][n] / (2*n - 1)

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-9<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert maxAverageOfPath([[-6, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 3.111111111111111
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert maxAverageOfPath([[1, 2], [3, 4]]) == 2.6666666666666665
assert maxAverageOfPath([[1, 0], [1, 0]]) == 0.6666666666666666
assert maxAverageOfPath([[1, 2, 3], [1, 3, 1], [1, 1, 1]]) == 1.6
assert maxAverageOfPath([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 3.888888888888889
assert maxAverageOfPath([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [-6, 2, 3, 4, 5]]) == 3.888888888888889
assert maxAverageOfPath([[1, 2, 3, 4, 5], [-6, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 3.888888888888889
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def maxAverageOfPath(cost):
    n = len(cost)
    dp = [[0] * (n+1) for _ in range(n+1)]
    dp[1][1] = cost[0][0]

    for i in range(1, n+1):
        for j in range(1, n+1):
            if i == 1 and j == 1:
                continue
            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]

    return dp[n][n] / (2*n - 1)
```
