{
    "task_id": "HumanEval/77",
    "iter_num": 50,
    "already_test_oracle_gt": {},
    "pass_num_dict": {
        "s-0": [],
        "s-1": [],
        "s-2": [],
        "s-3": [],
        "s-4": [],
        "s-5": [],
        "s-6": [],
        "s-7": [],
        "s-8": [],
        "s-9": [],
        "s-10": [],
        "s-11": [],
        "s-12": [],
        "s-13": [],
        "s-14": [],
        "s-15": [],
        "s-16": [],
        "s-17": [],
        "s-18": [],
        "s-19": [],
        "s-20": [],
        "s-21": [],
        "s-22": [],
        "s-23": [],
        "s-24": [],
        "s-25": [],
        "s-26": [],
        "s-27": [],
        "s-28": [],
        "s-29": [],
        "s-30": [],
        "s-31": [],
        "s-32": [],
        "s-33": [],
        "s-34": [],
        "s-35": [],
        "s-36": [],
        "s-37": [],
        "s-38": [],
        "s-39": [],
        "s-40": [],
        "s-41": [],
        "s-42": [],
        "s-43": [],
        "s-44": [],
        "s-45": [],
        "s-46": [],
        "s-47": [],
        "s-48": [],
        "s-49": [],
        "s-50": [],
        "s-51": [],
        "s-52": [],
        "s-53": [],
        "s-54": [],
        "s-55": [],
        "s-56": [],
        "s-57": [],
        "s-58": [],
        "s-59": [],
        "s-60": [],
        "s-61": [],
        "s-62": [],
        "s-63": [],
        "s-64": [],
        "s-65": [],
        "s-66": [],
        "s-67": [],
        "s-68": [],
        "s-69": [],
        "s-70": [],
        "s-71": [],
        "s-72": [],
        "s-73": [],
        "s-74": [],
        "s-75": [],
        "s-76": [],
        "s-77": [],
        "s-78": [],
        "s-79": [],
        "s-80": [],
        "s-81": [],
        "s-82": [],
        "s-83": [],
        "s-84": [],
        "s-85": [],
        "s-86": [],
        "s-87": [],
        "s-88": [],
        "s-89": [],
        "s-90": [],
        "s-91": [],
        "s-92": [],
        "s-93": [],
        "s-94": [],
        "s-95": [],
        "s-96": [],
        "s-97": [],
        "s-98": [],
        "s-99": []
    },
    "code_test_output": {
        "s-0": {},
        "s-1": {},
        "s-2": {},
        "s-3": {},
        "s-4": {},
        "s-5": {},
        "s-6": {},
        "s-7": {},
        "s-8": {},
        "s-9": {},
        "s-10": {},
        "s-11": {},
        "s-12": {},
        "s-13": {},
        "s-14": {},
        "s-15": {},
        "s-16": {},
        "s-17": {},
        "s-18": {},
        "s-19": {},
        "s-20": {},
        "s-21": {},
        "s-22": {},
        "s-23": {},
        "s-24": {},
        "s-25": {},
        "s-26": {},
        "s-27": {},
        "s-28": {},
        "s-29": {},
        "s-30": {},
        "s-31": {},
        "s-32": {},
        "s-33": {},
        "s-34": {},
        "s-35": {},
        "s-36": {},
        "s-37": {},
        "s-38": {},
        "s-39": {},
        "s-40": {},
        "s-41": {},
        "s-42": {},
        "s-43": {},
        "s-44": {},
        "s-45": {},
        "s-46": {},
        "s-47": {},
        "s-48": {},
        "s-49": {},
        "s-50": {},
        "s-51": {},
        "s-52": {},
        "s-53": {},
        "s-54": {},
        "s-55": {},
        "s-56": {},
        "s-57": {},
        "s-58": {},
        "s-59": {},
        "s-60": {},
        "s-61": {},
        "s-62": {},
        "s-63": {},
        "s-64": {},
        "s-65": {},
        "s-66": {},
        "s-67": {},
        "s-68": {},
        "s-69": {},
        "s-70": {},
        "s-71": {},
        "s-72": {},
        "s-73": {},
        "s-74": {},
        "s-75": {},
        "s-76": {},
        "s-77": {},
        "s-78": {},
        "s-79": {},
        "s-80": {},
        "s-81": {},
        "s-82": {},
        "s-83": {},
        "s-84": {},
        "s-85": {},
        "s-86": {},
        "s-87": {},
        "s-88": {},
        "s-89": {},
        "s-90": {},
        "s-91": {},
        "s-92": {},
        "s-93": {},
        "s-94": {},
        "s-95": {},
        "s-96": {},
        "s-97": {},
        "s-98": {},
        "s-99": {}
    },
    "code_test_res": {
        "s-0": {},
        "s-1": {},
        "s-2": {},
        "s-3": {},
        "s-4": {},
        "s-5": {},
        "s-6": {},
        "s-7": {},
        "s-8": {},
        "s-9": {},
        "s-10": {},
        "s-11": {},
        "s-12": {},
        "s-13": {},
        "s-14": {},
        "s-15": {},
        "s-16": {},
        "s-17": {},
        "s-18": {},
        "s-19": {},
        "s-20": {},
        "s-21": {},
        "s-22": {},
        "s-23": {},
        "s-24": {},
        "s-25": {},
        "s-26": {},
        "s-27": {},
        "s-28": {},
        "s-29": {},
        "s-30": {},
        "s-31": {},
        "s-32": {},
        "s-33": {},
        "s-34": {},
        "s-35": {},
        "s-36": {},
        "s-37": {},
        "s-38": {},
        "s-39": {},
        "s-40": {},
        "s-41": {},
        "s-42": {},
        "s-43": {},
        "s-44": {},
        "s-45": {},
        "s-46": {},
        "s-47": {},
        "s-48": {},
        "s-49": {},
        "s-50": {},
        "s-51": {},
        "s-52": {},
        "s-53": {},
        "s-54": {},
        "s-55": {},
        "s-56": {},
        "s-57": {},
        "s-58": {},
        "s-59": {},
        "s-60": {},
        "s-61": {},
        "s-62": {},
        "s-63": {},
        "s-64": {},
        "s-65": {},
        "s-66": {},
        "s-67": {},
        "s-68": {},
        "s-69": {},
        "s-70": {},
        "s-71": {},
        "s-72": {},
        "s-73": {},
        "s-74": {},
        "s-75": {},
        "s-76": {},
        "s-77": {},
        "s-78": {},
        "s-79": {},
        "s-80": {},
        "s-81": {},
        "s-82": {},
        "s-83": {},
        "s-84": {},
        "s-85": {},
        "s-86": {},
        "s-87": {},
        "s-88": {},
        "s-89": {},
        "s-90": {},
        "s-91": {},
        "s-92": {},
        "s-93": {},
        "s-94": {},
        "s-95": {},
        "s-96": {},
        "s-97": {},
        "s-98": {},
        "s-99": {}
    },
    "solution_dict": {
        "s-0": "\n    return round(a**(1/3))**3 == a\n",
        "s-1": "\n    return int(a**(1/3))**3 == a\n",
        "s-2": "\n    if a == 0 or a == 1:\n        return True\n    elif a < 0:\n        a = -a\n    else:\n        pass\n\n    lo = 1\n    hi = a\n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if mid ** 3 == a:\n            return True\n        elif mid ** 3 < a:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n    return False\n",
        "s-3": "\n    return (a**(1/3)).is_integer()\n",
        "s-4": "\n    cube_root = abs(a) ** (1/3)\n    return int(cube_root + 0.5) ** 3 == abs(a)\n",
        "s-5": "\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n\n    left = 1\n    right = a\n    while left <= right:\n        mid = (left + right) // 2\n        if mid**3 == a:\n            return True\n        elif mid**3 > a:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return False\n",
        "s-6": "\n    if a < 0:\n        a = -a\n    if a == 0 or a == 1:\n        return True\n    else:\n        for i in range(2, int(a**(1/3))+1):\n            if i**3 == a:\n                return True\n        return False\n",
        "s-7": "\n    return (a ** (1/3)).is_integer()\n",
        "s-8": "\n    return (a**(1/3)).is_integer()\n",
        "s-9": "\n    if a < 0:\n        a = -a\n    root = round(a ** (1 / 3))\n    return root ** 3 == a\n",
        "s-10": "\n    return (a >= 0 and int(a**(1/3))**3 == a) or (a < 0 and int(abs(a)**(1/3))**3 == abs(a))\n",
        "s-11": "\n    return (a >= 0 and round(a ** (1/3)) ** 3 == a) or (a < 0 and round((-a) ** (1/3)) ** 3 == -a)\n",
        "s-12": "\n    if a == 0:\n        return True\n    else:\n        cube_root = round(a**(1/3))\n        return cube_root**3 == a\n",
        "s-13": "\n    return (abs(a)**(1/3)).is_integer()\n",
        "s-14": "\n    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        root = round(a ** (1 / 3))\n        return root ** 3 == a\n",
        "s-15": "\n    cube_root = abs(a) ** (1/3)\n    return round(cube_root) ** 3 == abs(a)\n",
        "s-16": "\n    if a == 0 or a == 1:\n        return True\n    for i in range(abs(a)):\n        if i*i*i == abs(a):\n            return True\n        elif i*i*i > abs(a):\n            return False\n    return False\n",
        "s-17": "\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n    for i in range(1, a):\n        if i * i * i == a:\n            return True\n        elif i * i * i > a:\n            return False\n    return False\n",
        "s-18": "\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    for i in range(1, int(a ** (1 / 3)) + 1):\n        if i ** 3 == a:\n            return True\n    return False\n",
        "s-19": "\n    return (a >= 0 and int(a**(1/3))**3 == a) or (a < 0 and int((-a)**(1/3))**3 == -a)\n",
        "s-20": "\n    return (a >= 0) and (int(a**(1/3))**3 == a)\n",
        "s-21": "\n    if a == 0:\n        return True\n    elif a < 0:\n        a = abs(a)\n    for i in range(1, a+1):\n        cube = i ** 3\n        if cube == a:\n            return True\n        elif cube > a:\n            return False\n",
        "s-22": "\n    return (a >= 0 and round(a ** (1.0/3)) ** 3 == a) or (a < 0 and round((-a) ** (1.0/3)) ** 3 == -a)\n",
        "s-23": "\n    return (a ** (1/3)) % 1 == 0\n",
        "s-24": "\n    return round(a**(1/3))**3 == a\n",
        "s-25": "\n    if a == 0:\n        return True\n    for i in range(abs(a)):\n        if i**3 == abs(a):\n            return True\n    return False\n",
        "s-26": "\n    return (a**(1/3)).is_integer()\n",
        "s-27": "\n    return a < 0 or round(a**(1/3))**3 == a\n",
        "s-28": "\n    return (a ** (1/3)).is_integer()\n",
        "s-29": "\n    return a >= 0 and round(a**(1/3)) ** 3 == a\n",
        "s-30": "\n    return (a**(1/3)).is_integer()\n",
        "s-31": "\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return (a >= 0) and (round(a**(1/3))**3 == a)\n",
        "s-32": "\n    if a < 0:\n        a = abs(a)\n\n    cube_root = a**(1/3)\n    if cube_root == int(cube_root):\n        return True\n    else:\n        return False\n",
        "s-33": "\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n    x = 1\n    while x**3 < a:\n        x += 1\n    return x**3 == a\n",
        "s-34": "\n    return (a >= 0) and (int(round(a ** (1 / 3.0)))) ** 3 == a\n",
        "s-35": "\n    return round(a**(1/3))**3 == a\n",
        "s-36": "\n    return int(a**(1/3))**3 == a\n",
        "s-37": "\n    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        x = int(round(a**(1/3)))\n        return x**3 == a\n",
        "s-38": "\n    return (a >= 0) and ((a**(1/3)) % 1 == 0)\n",
        "s-39": "\n    # Get the absolute value of the input integer\n    a = abs(a)\n    \n    # Check if the cube root of the input integer is an integer\n    if int(a ** (1/3)) ** 3 == a:\n        return True\n    else:\n        return False\n",
        "s-40": "\n    return abs(round(a**(1/3)))**3 == abs(a)\n",
        "s-41": "\n    cube_root = abs(a) ** (1 / 3)\n    if int(cube_root) ** 3 == abs(a):\n        return True\n    else:\n        return False\n",
        "s-42": "\n    return (a**(1/3)).is_integer()\n",
        "s-43": "\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a) or (a < 0 and int((-a) ** (1/3)) ** 3 == -a)\n",
        "s-44": "\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a) or (a < 0 and int((-a) ** (1/3)) ** 3 == -a)\n",
        "s-45": "\n    return a >= 0 and round(a ** (1/3)) ** 3 == a\n",
        "s-46": "\n    return round(a ** (1/3)) ** 3 == a\n",
        "s-47": "\n    return (a >= 0 and int(round(a ** (1 / 3))) ** 3 == a) or (a < 0 and int(round(-(-a) ** (1 / 3))) ** 3 == -a)\n",
        "s-48": "\n    return (a**(1/3)).is_integer()\n",
        "s-49": "\n    return (a ** (1/3)).is_integer()\n",
        "s-50": "\n    if a == 0 or a == 1:\n        return True\n    low, high = 0, a\n    while low <= high:\n        mid = (low + high) // 2\n        if mid**3 == abs(a):\n            return True\n        elif mid**3 > abs(a):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n",
        "s-51": "\n    return round(a**(1/3))**3 == a\n",
        "s-52": "\n    return (a >= 0 and (int(a**(1/3)))**3 == a) or (a < 0 and (int((-a)**(1/3)))**3 == -a)\n",
        "s-53": "\n    return (a >= 0 and round(a**(1/3))**3 == a) or (a < 0 and round((-a)**(1/3))**3 == -a)\n",
        "s-54": "\n    return (a >= 0 and round(a**(1/3))**3 == a) or (a < 0 and round((-a)**(1/3))**3 == -a)\n",
        "s-55": "\n    if a < 0:\n        a = -a\n    if a == 1 or a == 0:\n        return True\n    left, right = 1, a\n    while left <= right:\n        mid = (left + right) // 2\n        cube = mid * mid * mid\n        if cube == a:\n            return True\n        elif cube > a:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n",
        "s-56": "\n    if a == 0 or abs(a) ** (1 / 3) % 1 == 0:\n        return True\n    else:\n        return False\n",
        "s-57": "\n    if a == 0:\n        return True\n    else:\n        return (a**(1/3)).is_integer()\n",
        "s-58": "\n    return (a >= 0 and round(a**(1/3))**3 == a)\n",
        "s-59": "\n    return (a**(1/3)).is_integer()\n",
        "s-60": "\n    return (a >= 0 and round(a ** (1/3)) ** 3 == a)\n",
        "s-61": "\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0: # If the input number is zero\n        return True # Return True, since zero is a cube of 0\n    elif a < 0: # If the input number is negative\n        return iscube(-a) # Return the result of iscube with the absolute value of the input\n    else: # If the input number is positive\n        n = round(a**(1/3)) # Calculate the cube root of the input and round it to the nearest integer\n        return n**3 == a # Check if n cubed is equal to the input, and return True or False accordingly\n",
        "s-62": "\n    if a < 0:\n        a = -a\n    if a == 0 or a == 1:\n        return True\n    else:\n        for i in range(2, a):\n            if i**3 == a:\n                return True\n    return False\n",
        "s-63": "\n    return int(a**(1/3))**3 == a\n",
        "s-64": "\n    if a < 0:\n        a = -a\n    x = int(a ** (1/3))\n    return x ** 3 == a\n",
        "s-65": "\n    return (a >= 0 and round(a ** (1 / 3)) ** 3 == a) or (a < 0 and round((-a) ** (1 / 3)) ** 3 == -a)\n",
        "s-66": "\n    return (a >= 0 and round(a**(1/3))**3 == a) or (a < 0 and round((-a)**(1/3))**3 == -a)\n",
        "s-67": "\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return (a >= 0 and round(a**(1/3))**3 == a)\n",
        "s-68": "\n    return int(a**(1/3))**3 == a\n",
        "s-69": "\n    return a >= 0 and round(a ** (1/3)) ** 3 == a\n",
        "s-70": "\n    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        n = int(round(a**(1/3)))\n        return n**3 == a\n",
        "s-71": "\n    cube_root = abs(a) ** (1/3)\n    return int(cube_root) ** 3 == abs(a)\n",
        "s-72": "\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a) or (a < 0 and int(abs(a) ** (1/3)) ** 3 == abs(a))\n",
        "s-73": "\n    return (a >= 0) and (round(a**(1/3))**3 == a)\n",
        "s-74": "\n    return a >= 0 and (a == 0 or round(a ** (1. / 3)) ** 3 == a)\n",
        "s-75": "\n    if a == 0:\n        return True\n    elif a < 0:\n        a = abs(a)\n    for i in range(1, a+1):\n        if i**3 == a:\n            return True\n    return False\n",
        "s-76": "\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return (abs(a)**(1/3)).is_integer()\n",
        "s-77": "\n    return (a**(1/3)).is_integer() or a == 0\n",
        "s-78": "\n    return abs(a)**(1/3) % 1 == 0\n",
        "s-79": "\n    if a == 0:\n        return True\n    \n    # check if a is a perfect cube\n    cube_root = abs(a) ** (1/3)\n    \n    if int(cube_root + 0.5) ** 3 == abs(a):\n        return True\n    else:\n        return False\n",
        "s-80": "\n    if a == 0 or a == 1:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        i = 1\n        while i**3 <= a:\n            if i**3 == a:\n                return True\n            i += 1\n        return False\n",
        "s-81": "\n    return (a**(1/3)).is_integer()\n",
        "s-82": "\n    return (a**(1/3)).is_integer()\n",
        "s-83": "\n    cube_root = abs(a) ** (1 / 3)\n    return int(cube_root) ** 3 == abs(a)\n",
        "s-84": "\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return int(a**(1/3))**3 == a or int((-a)**(1/3))**3 == -a\n",
        "s-85": "\n    if a == 0 or a == 1:\n        return True\n\n    low = 0\n    high = a\n\n    while low <= high:\n        mid = (low + high) // 2\n        cube = mid ** 3\n        if cube == a:\n            return True\n        elif cube < a:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False\n",
        "s-86": "\n    return abs(a)**(1/3) == int(abs(a)**(1/3))\n",
        "s-87": "\n    return (a >= 0) and (int(a ** (1/3)) ** 3 == a)\n",
        "s-88": "\n    return round(a ** (1.0/3)) ** 3 == a\n",
        "s-89": "\n    return (a**(1/3)).is_integer()\n",
        "s-90": "\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a >= 0 and round(a**(1/3))**3 == a\n",
        "s-91": "\n    return abs(round(a**(1/3)))**3 == abs(a)\n",
        "s-92": "\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    return a >= 0 and round(a ** (1 / 3)) ** 3 == a\n",
        "s-93": "\n    return (abs(a))**(1/3) % 1 == 0\n",
        "s-94": "\n    # Get the absolute value of a to handle negative numbers\n    a = abs(a)\n    # Find the cube root of a\n    cube_root = a ** (1/3)\n    # Round the cube root to the nearest integer\n    cube_root_rounded = round(cube_root)\n    # Check if the cube of the rounded cube root is equal to a\n    if cube_root_rounded ** 3 == a:\n        return True\n    else:\n        return False\n",
        "s-95": "\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    if a == 0:\n        return True\n    elif a < 0:\n        return iscube(-a)\n    else:\n        for i in range(abs(a)):\n            if i**3 == a:\n                return True\n    return False\n",
        "s-96": "\n    return (a >= 0 and (int(a**(1/3)))**3 == a) or (a < 0 and (int(abs(a)**(1/3)))**3 == abs(a))\n",
        "s-97": "\n    return (a >= 0) and (round(a**(1/3)) ** 3 == a)\n",
        "s-98": "\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return (a >= 0) and (round(a**(1/3))**3 == a)\n",
        "s-99": "\n    if a == 0:      # handle 0 as a special case\n        return True\n    elif a < 0:     # handle negative numbers by first converting them to positive\n        a = abs(a)\n    i = 1           # start with the first integer\n    while i*i*i <= a:   # keep checking cubes until i^3 is greater than a\n        if i*i*i == a:  # if we found a perfect cube, return True\n            return True\n        i += 1      # increment i for next iteration of while loop\n    return False    # if we exhausted all possible cubes, return False\n```\n\nYou can test the function with the provided test cases:\n\n```python\nprint(iscube(1))     # True\nprint(iscube(2))     # False\nprint(iscube(-1))    # True\nprint(iscube(64))    # True\nprint(iscube(0))     # True\nprint(iscube(180))   # False\n"
    }
}