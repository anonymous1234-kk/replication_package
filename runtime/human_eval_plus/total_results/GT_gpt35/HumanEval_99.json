{
    "task_id": "HumanEval/99",
    "iter_num": 50,
    "already_test_oracle_gt": {},
    "pass_num_dict": {
        "s-0": [],
        "s-1": [],
        "s-2": [],
        "s-3": [],
        "s-4": [],
        "s-5": [],
        "s-6": [],
        "s-7": [],
        "s-8": [],
        "s-9": [],
        "s-10": [],
        "s-11": [],
        "s-12": [],
        "s-13": [],
        "s-14": [],
        "s-15": [],
        "s-16": [],
        "s-17": [],
        "s-18": [],
        "s-19": [],
        "s-20": [],
        "s-21": [],
        "s-22": [],
        "s-23": [],
        "s-24": [],
        "s-25": [],
        "s-26": [],
        "s-27": [],
        "s-28": [],
        "s-29": [],
        "s-30": [],
        "s-31": [],
        "s-32": [],
        "s-33": [],
        "s-34": [],
        "s-35": [],
        "s-36": [],
        "s-37": [],
        "s-38": [],
        "s-39": [],
        "s-40": [],
        "s-41": [],
        "s-42": [],
        "s-43": [],
        "s-44": [],
        "s-45": [],
        "s-46": [],
        "s-47": [],
        "s-48": [],
        "s-49": [],
        "s-50": [],
        "s-51": [],
        "s-52": [],
        "s-53": [],
        "s-54": [],
        "s-55": [],
        "s-56": [],
        "s-57": [],
        "s-58": [],
        "s-59": [],
        "s-60": [],
        "s-61": [],
        "s-62": [],
        "s-63": [],
        "s-64": [],
        "s-65": [],
        "s-66": [],
        "s-67": [],
        "s-68": [],
        "s-69": [],
        "s-70": [],
        "s-71": [],
        "s-72": [],
        "s-73": [],
        "s-74": [],
        "s-75": [],
        "s-76": [],
        "s-77": [],
        "s-78": [],
        "s-79": [],
        "s-80": [],
        "s-81": [],
        "s-82": [],
        "s-83": [],
        "s-84": [],
        "s-85": [],
        "s-86": [],
        "s-87": [],
        "s-88": [],
        "s-89": [],
        "s-90": [],
        "s-91": [],
        "s-92": [],
        "s-93": [],
        "s-94": [],
        "s-95": [],
        "s-96": [],
        "s-97": [],
        "s-98": [],
        "s-99": []
    },
    "code_test_output": {
        "s-0": {},
        "s-1": {},
        "s-2": {},
        "s-3": {},
        "s-4": {},
        "s-5": {},
        "s-6": {},
        "s-7": {},
        "s-8": {},
        "s-9": {},
        "s-10": {},
        "s-11": {},
        "s-12": {},
        "s-13": {},
        "s-14": {},
        "s-15": {},
        "s-16": {},
        "s-17": {},
        "s-18": {},
        "s-19": {},
        "s-20": {},
        "s-21": {},
        "s-22": {},
        "s-23": {},
        "s-24": {},
        "s-25": {},
        "s-26": {},
        "s-27": {},
        "s-28": {},
        "s-29": {},
        "s-30": {},
        "s-31": {},
        "s-32": {},
        "s-33": {},
        "s-34": {},
        "s-35": {},
        "s-36": {},
        "s-37": {},
        "s-38": {},
        "s-39": {},
        "s-40": {},
        "s-41": {},
        "s-42": {},
        "s-43": {},
        "s-44": {},
        "s-45": {},
        "s-46": {},
        "s-47": {},
        "s-48": {},
        "s-49": {},
        "s-50": {},
        "s-51": {},
        "s-52": {},
        "s-53": {},
        "s-54": {},
        "s-55": {},
        "s-56": {},
        "s-57": {},
        "s-58": {},
        "s-59": {},
        "s-60": {},
        "s-61": {},
        "s-62": {},
        "s-63": {},
        "s-64": {},
        "s-65": {},
        "s-66": {},
        "s-67": {},
        "s-68": {},
        "s-69": {},
        "s-70": {},
        "s-71": {},
        "s-72": {},
        "s-73": {},
        "s-74": {},
        "s-75": {},
        "s-76": {},
        "s-77": {},
        "s-78": {},
        "s-79": {},
        "s-80": {},
        "s-81": {},
        "s-82": {},
        "s-83": {},
        "s-84": {},
        "s-85": {},
        "s-86": {},
        "s-87": {},
        "s-88": {},
        "s-89": {},
        "s-90": {},
        "s-91": {},
        "s-92": {},
        "s-93": {},
        "s-94": {},
        "s-95": {},
        "s-96": {},
        "s-97": {},
        "s-98": {},
        "s-99": {}
    },
    "code_test_res": {
        "s-0": {},
        "s-1": {},
        "s-2": {},
        "s-3": {},
        "s-4": {},
        "s-5": {},
        "s-6": {},
        "s-7": {},
        "s-8": {},
        "s-9": {},
        "s-10": {},
        "s-11": {},
        "s-12": {},
        "s-13": {},
        "s-14": {},
        "s-15": {},
        "s-16": {},
        "s-17": {},
        "s-18": {},
        "s-19": {},
        "s-20": {},
        "s-21": {},
        "s-22": {},
        "s-23": {},
        "s-24": {},
        "s-25": {},
        "s-26": {},
        "s-27": {},
        "s-28": {},
        "s-29": {},
        "s-30": {},
        "s-31": {},
        "s-32": {},
        "s-33": {},
        "s-34": {},
        "s-35": {},
        "s-36": {},
        "s-37": {},
        "s-38": {},
        "s-39": {},
        "s-40": {},
        "s-41": {},
        "s-42": {},
        "s-43": {},
        "s-44": {},
        "s-45": {},
        "s-46": {},
        "s-47": {},
        "s-48": {},
        "s-49": {},
        "s-50": {},
        "s-51": {},
        "s-52": {},
        "s-53": {},
        "s-54": {},
        "s-55": {},
        "s-56": {},
        "s-57": {},
        "s-58": {},
        "s-59": {},
        "s-60": {},
        "s-61": {},
        "s-62": {},
        "s-63": {},
        "s-64": {},
        "s-65": {},
        "s-66": {},
        "s-67": {},
        "s-68": {},
        "s-69": {},
        "s-70": {},
        "s-71": {},
        "s-72": {},
        "s-73": {},
        "s-74": {},
        "s-75": {},
        "s-76": {},
        "s-77": {},
        "s-78": {},
        "s-79": {},
        "s-80": {},
        "s-81": {},
        "s-82": {},
        "s-83": {},
        "s-84": {},
        "s-85": {},
        "s-86": {},
        "s-87": {},
        "s-88": {},
        "s-89": {},
        "s-90": {},
        "s-91": {},
        "s-92": {},
        "s-93": {},
        "s-94": {},
        "s-95": {},
        "s-96": {},
        "s-97": {},
        "s-98": {},
        "s-99": {}
    },
    "solution_dict": {
        "s-0": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-1": "\n    number = float(value)\n    rounded = round(number)\n    if abs(number - rounded) == 0.5:\n        return int(rounded + 0.5 * abs(rounded) / rounded)\n    return int(rounded)\n",
        "s-2": "\n    abs_val = abs(float(value))\n    lower_int = int(abs_val)\n    upper_int = lower_int + 1\n    if abs_val - lower_int < upper_int - abs_val:\n        return -lower_int if float(value) < 0 else lower_int\n    else:\n        return -upper_int if float(value) < 0 else upper_int\n",
        "s-3": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-4": "\n    # Convert value to float\n    f_value = float(value)\n    \n    # Round the float to the nearest integer\n    rounded_value = round(f_value)\n    \n    # If the rounded value is greater than the original float,\n    # return the ceiling of the float, otherwise return the floor\n    if rounded_value > f_value:\n        return math.ceil(f_value)\n    else:\n        return math.floor(f_value)\n",
        "s-5": "\n    value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    elif value < 0:\n        return int(value - 0.5)\n    else:\n        return 0\n",
        "s-6": "\n    # Convert value to float\n    f_value = float(value)\n\n    # If the value is negative, use ceil instead of floor\n    if f_value < 0:\n        integer = math.ceil(f_value)\n    else:\n        integer = math.floor(f_value)\n\n    # Calculate the distance to the two nearest integers\n    dist_lower = abs(integer - f_value)\n    dist_upper = abs(integer + 1 - f_value)\n\n    # If equidistant from two integers, return the one farther from zero\n    if dist_lower == dist_upper:\n        if f_value < 0:\n            return integer\n        else:\n            return integer + 1\n\n    # Otherwise, return the closest integer\n    elif dist_lower < dist_upper:\n        return integer\n    else:\n        return integer + 1\n",
        "s-7": "\n    # First, convert the string value to a float\n    num = float(value)\n    \n    # Get the floor and ceiling of the float\n    floor = int(num)\n    ceil = int(num + 1)\n    \n    # Check which integer is closer to the original float\n    if abs(num - floor) < abs(num - ceil):\n        return floor\n    elif abs(num - floor) > abs(num - ceil):\n        return ceil\n    else:\n        # If equidistant, round away from zero\n        if floor < 0:\n            return ceil\n        else:\n            return floor\n",
        "s-8": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-9": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-10": "\n    number = float(value)  # convert the input value to float\n    if number >= 0:\n        return int(number + 0.5)  # round up if decimal part >= 0.5\n    else:\n        return int(number - 0.5)  # round down if decimal part < 0.5\n",
        "s-11": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-12": "\n    number = float(value)\n    if number >= 0:\n        integer = int(number + 0.5)\n    else:\n        integer = int(number - 0.5)\n    return integer\n",
        "s-13": "\n    num = float(value)\n    if num >= 0:\n        closest_int = int(num + 0.5)\n    else:\n        closest_int = int(num - 0.5)\n    return closest_int\n",
        "s-14": "\n    number = float(value)\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    if decimal_part < 0.5:\n        return integer_part\n    elif decimal_part > 0.5:\n        return integer_part + 1\n    else:\n        if integer_part >= 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1\n",
        "s-15": "\n    number = float(value)\n    if number > 0:\n        closest_int = int(number + 0.5)\n    elif number < 0:\n        closest_int = int(number - 0.5)\n    else:\n        closest_int = 0\n    return closest_int\n",
        "s-16": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-17": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-18": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-19": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-20": "\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)\n",
        "s-21": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-22": "\n    value = float(value)\n    integer_value = int(value)\n    if integer_value - value == 0.5:\n        return int(value + 0.5)\n    elif integer_value - value == -0.5:\n        return int(value - 0.5)\n    else:\n        return round(value)\n",
        "s-23": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-24": "\n    num = float(value)\n    if num < 0:\n        integer = int(num - 0.5)\n    else:\n        integer = int(num + 0.5)\n    return integer\n",
        "s-25": "\n    # Convert the string input to float\n    float_value = float(value)\n\n    # Round the float value to the nearest integer\n    rounded_value = round(float_value)\n\n    # Calculate the difference between the rounded value and the original value\n    diff = abs(rounded_value - float_value)\n\n    # If the difference is exactly 0.5, round away from zero\n    if diff == 0.5:\n        if rounded_value > float_value:\n            return int(rounded_value - 1)\n        else:\n            return int(rounded_value + 1)\n\n    # If the difference is less than 0.5, return the rounded value\n    elif diff < 0.5:\n        return int(rounded_value)\n\n    # If the difference is greater than 0.5, round away from zero\n    else:\n        if rounded_value > float_value:\n            return int(rounded_value - 1)\n        else:\n            return int(rounded_value + 1)\n",
        "s-26": "\n    value = float(value)\n    if value >= 0:\n        integer_part = int(value)\n        if value - integer_part >= 0.5:\n            return integer_part + 1\n        else:\n            return integer_part\n    else:\n        integer_part = int(abs(value))\n        if abs(value) - integer_part >= 0.5:\n            return -1 * (integer_part + 1)\n        else:\n            return -1 * integer_part\n",
        "s-27": "\n    value = float(value)\n    if value >= 0:\n        integer_part = int(value)\n        if value - integer_part >= 0.5:\n            return integer_part + 1\n        else:\n            return integer_part\n    else:\n        integer_part = int(value)\n        if integer_part - value >= 0.5:\n            return integer_part - 1\n        else:\n            return integer_part\n",
        "s-28": "\n    num = float(value)\n    if num < 0:\n        num = -num\n        return -int(num + 0.5)\n    else:\n        return int(num + 0.5)\n",
        "s-29": "\n    # Convert value to float\n    value = float(value)\n    \n    # Get the absolute value of the number\n    abs_val = abs(value)\n    \n    # Get the integer closest to the absolute value of the number\n    closest_int = int(abs_val + 0.5)\n    \n    # If the original value was negative, make the closest integer negative\n    if value < 0:\n        closest_int *= -1\n    \n    return closest_int\n",
        "s-30": "\n    value = float(value)\n    if value < 0:\n        result = int(value - 0.5)\n    else:\n        result = int(value + 0.5)\n    return result\n",
        "s-31": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-32": "\n    value = float(value)\n    if value > 0:\n        integer_part = int(value + 0.5)\n    else:\n        integer_part = int(value - 0.5)\n    return integer_part\n",
        "s-33": "\n    if \".\" not in value:\n        return int(value)\n    else:\n        pos = value.find('.')\n        left = int(value[:pos])\n        right = float(value[pos:])\n        if right > 0.5 or right == 0.5 and left % 2 == 1:\n            return left + 1\n        elif right < -0.5 or right == -0.5 and left % 2 == -1:\n            return left - 1\n        else:\n            return left\n",
        "s-34": "\n    # Convert the given value to a float\n    num = float(value)\n\n    # If the number is positive or zero, round it up. Otherwise, round it down.\n    if num >= 0:\n        integer = int(num + 0.5)\n    else:\n        integer = int(num - 0.5)\n\n    return integer\n",
        "s-35": "\n    value = float(value)\n    if value >= 0:\n        integer = int(value + 0.5)\n    else:\n        integer = int(value - 0.5)\n    return integer\n",
        "s-36": "\n    number = float(value)\n    integer = int(number)\n    fraction = number - integer\n    if fraction > 0.5:\n        return integer + 1\n    elif fraction < -0.5:\n        return integer - 1\n    else:\n        return integer\n",
        "s-37": "\n    value = float(value)\n    if value >= 0:\n        integer_value = int(value + 0.5)\n    else:\n        integer_value = int(value - 0.5)\n    return integer_value\n",
        "s-38": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0\n",
        "s-39": "\n    number = float(value)\n    if number >= 0:\n        integer = int(number + 0.5)\n    else:\n        integer = int(number - 0.5)\n    return integer\n",
        "s-40": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-41": "\n    value = float(value)\n    if value >= 0:\n        int_value = int(value + 0.5)\n    else:\n        int_value = int(value - 0.5)\n    return int_value\n",
        "s-42": "\n    # Convert the input value to float\n    f_value = float(value)\n\n    # Get the floor and ceil of the float value\n    floor_value = int(f_value) if f_value >= 0 else -int(abs(f_value))\n    ceil_value = int(f_value) + 1 if f_value >= 0 else -int(abs(f_value)) - 1\n\n    # Calculate the difference from input value to floor and ceil\n    diff_floor = abs(f_value - floor_value)\n    diff_ceil = abs(f_value - ceil_value)\n\n    # Return the closest integer based on the calculated differences\n    if diff_floor < diff_ceil:\n        return floor_value\n    elif diff_ceil < diff_floor:\n        return ceil_value\n    else:\n        return ceil_value if ceil_value < 0 else floor_value\n",
        "s-43": "\n    value = float(value)\n    if value >= 0:\n        integer = int(value + 0.5)\n    else:\n        integer = int(value - 0.5)\n    return integer\n",
        "s-44": "\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)\n",
        "s-45": "\n    num = float(value)\n    int_num = int(num)\n    if num - int_num >= 0.5:\n        return int_num + 1\n    elif num - int_num <= -0.5:\n        return int_num - 1\n    else:\n        return int_num\n",
        "s-46": "\n    # Convert the string to a float\n    float_value = float(value)\n\n    # Calculate the floor and ceiling of the float\n    floor_value = int(float_value - 0.5)\n    ceil_value = int(float_value + 0.5)\n\n    # Calculate the distances from the float to the floor and ceiling\n    dist_floor = abs(float_value - floor_value)\n    dist_ceil = abs(float_value - ceil_value)\n\n    # If the distances are equal, round away from zero\n    if dist_floor == dist_ceil:\n        return ceil_value if float_value > 0 else floor_value\n\n    # Otherwise, return the closest integer\n    return ceil_value if dist_ceil < dist_floor else floor_value\n",
        "s-47": "\n    if float(value) >= 0:\n        return int(float(value) + 0.5)\n    else:\n        return int(float(value) - 0.5)\n",
        "s-48": "\n    # Convert the input string to a float\n    value = float(value)\n\n    # Check if the value is already an integer\n    if value.is_integer():\n        return int(value)\n\n    # Round the value to the nearest integer\n    rounded_value = round(value)\n\n    # If the rounded value is greater than the input value,\n    # return the next lowest integer\n    if rounded_value > value:\n        return int(rounded_value - 1)\n\n    # Otherwise, return the next highest integer\n    return int(rounded_value + 1)\n",
        "s-49": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-50": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-51": "\n    value = float(value)\n    if value >= 0:\n        closest_int = int(value + 0.5)\n    else:\n        closest_int = int(value - 0.5)\n    return closest_int\n",
        "s-52": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-53": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0\n",
        "s-54": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-55": "\n    value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-56": "\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)\n",
        "s-57": "\n    value = float(value)\n    int_value = int(value)\n    if value - int_value >= 0.5:\n        return int_value + 1\n    elif value - int_value <= -0.5:\n        return int_value - 1\n    else:\n        return int_value\n",
        "s-58": "\n    value = float(value)\n    if value >= 0:\n        integer = int(value + 0.5)\n    else:\n        integer = int(value - 0.5)\n\n    return integer\n",
        "s-59": "\n    number = float(value)\n    if number >= 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)\n",
        "s-60": "\n    # Convert string value to float\n    value = float(value)\n\n    # Check if value is already an integer\n    if value.is_integer():\n        return int(value)\n\n    # If not, round it to the nearest integer\n    rounded_value = round(value)\n\n    # Check if rounded value is closer to value or (value - 1)\n    if abs(value - rounded_value) < abs(value - (rounded_value - 1)):\n        return rounded_value\n    else:\n        return rounded_value - 1\n",
        "s-61": "\n    value = float(value)\n    if value >= 0:\n        integer = int(value + 0.5)\n    else:\n        integer = int(value - 0.5)\n\n    return integer\n",
        "s-62": "\n    # Convert the string value to a float\n    float_value = float(value)\n    \n    # Check if the float value is negative\n    if float_value < 0:\n        # If it's negative, round it down to the nearest integer\n        integer_value = int(float_value - 0.5)\n    else:\n        # If it's positive, round it up to the nearest integer\n        integer_value = int(float_value + 0.5)\n        \n    # Return the integer value\n    return integer_value\n",
        "s-63": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-64": "\n    number = float(value)\n    if number >= 0:\n        integer = int(number + 0.5)\n    else:\n        integer = int(number - 0.5)\n    return integer\n",
        "s-65": "\n    # Convert the input value to float data type\n    value = float(value)\n    \n    # Get the floor and ceil values of the input value\n    floor_value = int(value)\n    ceil_value = floor_value + 1\n    \n    # Find the distances of the input value from both floor and ceil values\n    distance_from_floor = value - floor_value\n    distance_from_ceil = ceil_value - value\n    \n    # Check which integer is closest and return it\n    if distance_from_floor < distance_from_ceil:\n        return floor_value\n    else:\n        return ceil_value\n",
        "s-66": "\n    value = float(value)\n    if value >= 0:\n        integer = int(value + 0.5)\n    else:\n        integer = int(value - 0.5)\n    return integer\n",
        "s-67": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-68": "\n    number = float(value)\n    if number >= 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)\n",
        "s-69": "\n    number = float(value)\n    if number >= 0:\n        integer_part = int(number)\n        if number - integer_part >= 0.5:\n            return integer_part + 1\n        else:\n            return integer_part\n    else:\n        integer_part = int(number)\n        if integer_part - number >= 0.5:\n            return integer_part - 1\n        else:\n            return integer_part\n",
        "s-70": "\n    value = float(value)\n    if value < 0:\n        result = int(value - 0.5)\n    else:\n        result = int(value + 0.5)\n    return result\n",
        "s-71": "\n    # Convert the string value into a float number\n    number = float(value)\n\n    # Check if the number is already an integer and return it if so\n    if number.is_integer():\n        return int(number)\n\n    # Calculate the distance to the nearest two integers\n    dist_to_floor = abs(number - int(number))\n    dist_to_ceil = abs(number - int(number) - 1)\n\n    # Choose the closest integer based on the calculated distances\n    if dist_to_floor < dist_to_ceil:\n        return int(number)\n    else:\n        return int(number) + 1 if number > 0 else int(number) - 1\n",
        "s-72": "\n    value = float(value)\n    if value >= 0:\n        if value - int(value) >= 0.5:\n            return int(value) + 1\n        else:\n            return int(value)\n    else:\n        if abs(value - int(value)) >= 0.5:\n            return int(value) - 1\n        else:\n            return int(value)\n",
        "s-73": "\n    num = float(value)\n    if num >= 0:\n        integer = int(num + 0.5)\n    else:\n        integer = int(num - 0.5)\n    return integer\n",
        "s-74": "\n    number = float(value)\n    if number >= 0:\n        integer = int(number + 0.5)\n    else:\n        integer = int(number - 0.5)\n    return integer\n",
        "s-75": "\n    # Convert the input string to a float\n    number = float(value)\n    \n    # Calculate the distance to the closest integers\n    lower_int = int(number)\n    upper_int = lower_int + 1\n    distance_to_lower_int = abs(number - lower_int)\n    distance_to_upper_int = abs(number - upper_int)\n    \n    # Round the number away from zero if it's equidistant to two integers\n    if distance_to_lower_int == distance_to_upper_int:\n        if number > 0:\n            return upper_int\n        else:\n            return lower_int * -1\n    # Return the closest integer\n    elif distance_to_lower_int < distance_to_upper_int:\n        return lower_int\n    else:\n        return upper_int\n",
        "s-76": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0\n",
        "s-77": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-78": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-79": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-80": "\n    # Convert string to float\n    f_value = float(value)\n    # Round the float value\n    rounded_value = round(f_value)\n    # Check if the rounded value is greater than or equal to original value\n    if rounded_value >= f_value:\n        return int(rounded_value)\n    else:\n        # Round it up to the next integer away from zero\n        return int(rounded_value + abs(rounded_value - f_value) / (rounded_value - f_value)))\n",
        "s-81": "\n    # convert the input value to a float\n    f_value = float(value)\n    \n    # check if the value is exactly an integer\n    if f_value.is_integer():\n        return int(f_value)\n    else:\n        # find the nearest integer to the value\n        lower_int = int(f_value)\n        upper_int = lower_int + 1\n\n        if abs(f_value - lower_int) < abs(f_value - upper_int):\n            return lower_int\n        else:\n            return upper_int\n",
        "s-82": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-83": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-84": "\n    value = float(value)\n    if value > 0:\n        integer = int(value + 0.5)\n    else:\n        integer = int(value - 0.5)\n    return integer\n",
        "s-85": "\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)\n",
        "s-86": "\n    num = float(value)\n    if num < 0:\n        integer = int(num - 0.5)\n    else:\n        integer = int(num + 0.5)\n    return integer\n",
        "s-87": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-88": "\n    # Convert the value to a float to allow decimal numbers\n    value = float(value)\n    \n    # Find the closest integer to the value\n    closest_int = round(value)\n    \n    # If the value is equidistant from two integers, round it away from zero\n    if abs(closest_int - value) == 0.5:\n        closest_int += int(closest_int > 0) * 2 - 1\n        \n    return closest_int\n",
        "s-89": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-90": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-91": "\n    if \".\" not in value:  # if the number is already an integer\n        return int(value)\n    else:\n        whole_part = int(value.split(\".\")[0])  # get the whole part of the number\n        decimal_part = float(\"0.\" + value.split(\".\")[1])  # get the decimal part of the number\n        if decimal_part < 0.5:  # round down\n            return whole_part\n        elif decimal_part > 0.5:  # round up\n            return whole_part + 1\n        else:  # if the decimal part is exactly 0.5, round away from zero\n            if whole_part >= 0:\n                return whole_part + 1\n            else:\n                return whole_part - 1\n",
        "s-92": "\n    num = float(value)\n    if num >= 0:\n        if num - int(num) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if abs(num) - abs(int(num)) >= 0.5:\n            return int(num) - 1\n        else:\n            return int(num)\n",
        "s-93": "\n    num = float(value)\n    if num >= 0:\n        if (num - int(num)) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if (int(abs(num)) - abs(num)) >= 0.5:\n            return -int(abs(num)) - 1\n        else:\n            return -int(abs(num))\n",
        "s-94": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-95": "\n    value = float(value)\n    if value >= 0:\n        integer_part = int(value)\n        if value - integer_part >= 0.5:\n            return integer_part + 1\n        else:\n            return integer_part\n    else:\n        integer_part = int(abs(value))\n        if abs(value) - integer_part >= 0.5:\n            return -1 * (integer_part + 1)\n        else:\n            return -1 * integer_part\n",
        "s-96": "\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-97": "\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n",
        "s-98": "\n    value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "s-99": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n"
    }
}