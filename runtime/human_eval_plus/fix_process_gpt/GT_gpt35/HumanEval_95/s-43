task_id:HumanEval/95
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
```

----------------------Assistant Message----------------------
```python

def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """

    if len(dict) == 0:  # If the dictionary is empty, return False
        return False
    else:
        lower_count = 0  # Initialize counters for lower case and upper case keys
        upper_count = 0

        for key in dict.keys():
            if isinstance(key, str):  # Only consider string keys
                if key.islower():  # If key is in lower case, increment lower_count
                    lower_count += 1
                elif key.isupper():  # If key is in upper case, increment upper_count
                    upper_count += 1
                else:  # If key is neither in lower case nor upper case, return False
                    return False

        if lower_count == 0 or upper_count == 0:  # If all keys are not in the same case, return False
            return False

    return True  # If all keys are in the same case, return True

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-9<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert check_dict_case({'a': 'apple', 8: 'banana', 'G': 'apple'}) == False
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python

```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
Here is the fixed code:

```python

def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """

    if len(dict) == 0:  # If the dictionary is empty, return False
        return False
    else:
        lower_count = 0  # Initialize counters for lower case and upper case keys
        upper_count = 0

        for key in dict.keys():
            if isinstance(key, str):  # Only consider string keys
                if key.islower():  # If key is in lower case, increment lower_count
                    lower_count += 1
                elif key.isupper():  # If key is in upper case, increment upper_count
                    upper_count += 1
                else:  # If key is neither in lower case nor upper case, return False
                    return False
            else:  # If key is not a string, return False
                return False

        if lower_count == 0 or upper_count == 0:  # If all keys are not in the same case, return False
            return False

    return True  # If all keys are in the same case, return True

```
>>>>>>>>>>>>>>>>>>>>>>fix test id: t-14<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert check_dict_case({'a': 'apple', 'b': 'banana', 'state': 'NC'}) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert check_dict_case({'a': 'apple', 8: 'banana', 'G': 'apple'}) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def check_dict_case(dict):
    if len(dict) == 0:
        return False
    else:
        lower_count = 0
        upper_count = 0

        for key in dict.keys():
            if isinstance(key, str):
                if key.islower():
                    lower_count += 1
                elif key.isupper():
                    upper_count += 1
                else:
                    return False
            else:
                return False

        if lower_count > 0 and upper_count > 0:
            return False

    return True
```
