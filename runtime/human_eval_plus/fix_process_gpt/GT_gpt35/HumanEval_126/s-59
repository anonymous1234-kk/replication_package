task_id:HumanEval/126
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
```

----------------------Assistant Message----------------------
```python

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

    # check if the length of the list is greater than 1
    if len(lst) > 1:
        # Initialize a variable to keep track of the previous number
        prev_num = lst[0]
        # Initialize a variable to count the number of duplicates of the same number
        dup_count = 0
        # Iterate over the list starting at the second element
        for num in lst[1:]:
            # If the current number is less than or equal to the previous number,
            # or if there is more than one duplicate of the same number, return False.
            if num <= prev_num or dup_count > 1:
                return False
            # If the current number is equal to the previous number,
            # increment the duplicate count
            elif num == prev_num:
                dup_count += 1
            # If the current number is greater than the previous number,
            # update the previous number
            else:
                prev_num = num
        # If the function has not returned False, the list is sorted in ascending order
        return True
    # If the length of the list is less than or equal to 1, the list is sorted
    else:
        return True

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_sorted([1, 2, 3, 3, 4, 4]) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert is_sorted([5, 4, 3, 2, 1]) == False
assert is_sorted([]) == True
assert is_sorted([1, 2, 2, 2, 3, 3, 3, 4, 4]) == False
assert is_sorted([1, 2, 2, 2, 3, 3, 4]) == False
assert is_sorted([1, 2, 2, 2, 3, 4, 4, 5]) == False
assert is_sorted([1, 2, 2, 2, 3, 4]) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python

def is_sorted(lst):
    if len(lst) > 1:
        prev_num = lst[0]
        dup_count = 0
        for num in lst[1:]:
            if num < prev_num or dup_count > 1:
                return False
            elif num == prev_num:
                dup_count += 1
            else:
                prev_num = num
        return True
    else:
        return True

```
