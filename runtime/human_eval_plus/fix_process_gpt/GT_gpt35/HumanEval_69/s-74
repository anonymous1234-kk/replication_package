task_id:HumanEval/69
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
```

----------------------Assistant Message----------------------
```python

def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''

    max_val = max(lst)
    freq = [0] * (max_val + 1)  # Create a list to hold the frequency of each integer
    for val in lst:
        if val > 0:
            freq[val] += 1  # Increment the frequency of the integer in the list
    for i in range(1, max_val + 1):
        if freq[i] >= i:
            return i
    return -1

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-15<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert search([1, 1, 2, 2, 3, 3, 4, 4, 4]) == 2
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert search([22, 11, 22, 11]) == -1
assert search([5, 5, 4, 4, 4, 3]) == -1
assert search([1, 1, 3, 3, 5, 5, 5]) == 1
assert search([4, 4, 4, 4, 4]) == 4
assert search([10, 10, 10, 10, 10, 1, 1, 1]) == 1
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def search(lst):
    max_val = max(lst)
    freq = [0] * (max_val + 1)
    for val in lst:
        if val > 0:
            freq[val] += 1
    for i in range(1, max_val + 1):
        if freq[i] > i:
            return i
    return -1
```
