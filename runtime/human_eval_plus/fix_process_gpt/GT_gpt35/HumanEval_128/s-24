task_id:HumanEval/128
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
```

----------------------Assistant Message----------------------
```python

def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """

    if not arr:
        return None
    product = 1
    magnitude_sum = 0
    for num in arr:
        if num == 0:
            continue
        product *= num/abs(num)
        magnitude_sum += abs(num)
    return product * magnitude_sum

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-34<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert prod_signs([-1, 2, 3, 0, -1, 4, -5, -6, -7, -7]) == 0
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert prod_signs([1, 2, 3, -4, -5]) == 15
assert prod_signs([1, 2, 3, -4, -5]) == 15
assert prod_signs([10, 10, 10, 2, -2]) == -34
assert prod_signs([7, 7, -2]) == -16
assert prod_signs([7, 8, 9]) == 24
assert prod_signs([-1, -2, 2, -4]) == -9
assert prod_signs([2, 2, 2, 1, -1, -1]) == 9
assert prod_signs([1, 2, 3, 4, 5]) == 15
assert prod_signs([2, 3, -1, -2]) == 8
assert prod_signs([1, 2, 3, 4, 5]) == 15
assert prod_signs([1, 2, 2, 4, -5]) == -14
assert prod_signs([-1, -2, 3, 2]) == 8
assert prod_signs([1, 2, 4, 5]) == 12
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python

def prod_signs(arr):
    if not arr:
        return None
    product = 1
    magnitude_sum = 0
    for num in arr:
        if num == 0:
            return 0
        product *= num/abs(num)
        magnitude_sum += abs(num)
    return product * magnitude_sum

```
