task_id:HumanEval/116
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
```

----------------------Assistant Message----------------------
```python

def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """

    def count_bits(num):
        # helper function to count number of set bits in binary representation of a number
        count = 0
        while num:
            count += num & 1
            num >>= 1
        return count

    return sorted(arr, key=lambda x: (count_bits(x), x))

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-5<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert sort_array([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert sort_array([0, 0, 1, 2, 3, 4]) == [0, 0, 1, 2, 4, 3]
assert sort_array([32, 31, 64, 100, 1024]) == [32, 64, 1024, 100, 31]
assert sort_array([6, 7, 8, 10, 16, 18, 20]) == [8, 16, 6, 10, 18, 20, 7]
assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 4, 8, 3, 5, 6, 9, 7]
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python

def sort_array(arr):
    def count_bits(num):
        count = 0
        while num:
            count += num & 1
            num >>= 1
        return count

    return sorted(arr, key=lambda x: (count_bits(x), x))

```
