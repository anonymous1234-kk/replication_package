task_id:HumanEval/115
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
```

----------------------Assistant Message----------------------
```python

def max_fill(grid, capacity):
    import math
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """

    import math
    
    def count_bumps(row):
        """
        counts the number of consecutive 1s in a row
        
        Example:
            Input: [0,0,1,1,0,1,1,1,0]
            Output: [2,3,1]
        """
        bumps = []
        count = 0
        for i in range(len(row)):
            if row[i] == 1:
                count += 1
            else:
                if count > 0:
                    bumps.append(count)
                    count = 0
        if count > 0:
            bumps.append(count)
        return bumps
    
    def empty_well(well, bucket_capacity):
        """
        empties a well using a bucket
        
        Example:
            Input: [1,1,1,0,1,0], 2
            Output: 4
        """
        num_buckets = 0
        bumps = count_bumps(well)
        for bump in bumps:
            num_buckets += math.ceil(bump / bucket_capacity)
        return num_buckets
    
    num_buckets = 0
    for well in grid:
        num_buckets += empty_well(well, capacity)
    return num_buckets

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-2<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert max_fill([[1, 0, 1, 0], [1, 1, 1, 1], [0, 1, 0, 1]],2) == 4
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert max_fill([[1, 1, 1, 0], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 0, 1]],1) == 8
assert max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],3) == 4
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python

def max_fill(grid, capacity):
    import math
    
    def count_bumps(row):
        bumps = []
        count = 0
        for i in range(len(row)):
            if row[i] == 1:
                count += 1
            else:
                if count > 0:
                    bumps.append(count)
                    count = 0
        if count > 0:
            bumps.append(count)
        return bumps
    
    def empty_well(well, bucket_capacity):
        num_buckets = 0
        bumps = count_bumps(well)
        for bump in bumps:
            num_buckets += math.ceil(bump / bucket_capacity)
        return num_buckets
    
    num_buckets = 0
    for well in grid:
        num_buckets += empty_well(well, capacity)
    return num_buckets

```
