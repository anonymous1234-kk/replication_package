{'task_id': 'HumanEval/32', 'iter_num': 14, 'already_test_oracle_gt': {'t-0': -0.71, 't-6': 1.0, 't-11': 0.5, 't-12': -2.0, 't-14': 1.82, 't-16': -1.0, 't-18': 1000.0, 't-19': 0.41, 't-21': 1000.0, 't-23': 1000.0, 't-24': -1.13, 't-25': -0.0, 't-26': 1000.0, 't-27': -0.13, 't-29': 1.0, 't-30': -0.0, 't-31': 0.67, 't-32': -1.62, 't-33': -1.0, 't-34': 1.32, 't-35': 0.0, 't-36': 1000.0, 't-38': 1000.0, 't-39': 0.0, 't-40': -0.8, 't-41': 1000.0, 't-42': -0.2, 't-43': -1.0, 't-44': 1000.0, 't-45': 0.0, 't-46': 1000.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 'pass_num_dict': {'s-74': ['t-0', 't-4', 't-5', 't-6', 't-10', 't-11', 't-12', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-21', 't-23', 't-24', 't-25', 't-26', 't-27', 't-28', 't-29', 't-30', 't-31', 't-32', 't-33', 't-34', 't-35', 't-36', 't-37', 't-38', 't-39', 't-40', 't-41', 't-42', 't-43', 't-44', 't-45', 't-46', 't-47', 't-48', 't-49'], 's-96': ['t-0', 't-4', 't-5', 't-6', 't-10', 't-11', 't-12', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-21', 't-23', 't-24', 't-25', 't-26', 't-27', 't-28', 't-29', 't-30', 't-31', 't-32', 't-33', 't-34', 't-35', 't-36', 't-37', 't-38', 't-39', 't-40', 't-41', 't-42', 't-43', 't-44', 't-45', 't-46', 't-47', 't-48', 't-49']}, 'code_test_output': {'s-0': {'t-0': -1.1066198319741083, 't-4': 2.0, 't-5': -0.16666666666666666, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': None, 't-15': 0.5454545454545454, 't-16': None, 't-17': None, 't-18': None, 't-19': -11.1, 't-21': None, 't-23': None, 't-24': -0.912751677852349, 't-25': 0.0, 't-26': 1.0, 't-27': None, 't-28': -0.16666666666666666, 't-29': 1.0, 't-30': None, 't-31': 1.5, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.0968984194488878, 't-41': None, 't-42': 0.3349972054657236, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-1': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': 0, 't-36': None, 't-37': 0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': 0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-2': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -0.9999942779541016, 't-17': -0.9999942779541016, 't-18': 9.999990463256836, 't-19': None, 't-21': 9.999990463256836, 't-23': 9.999990463256836, 't-24': None, 't-25': None, 't-26': None, 't-27': -0.1322460174560547, 't-28': None, 't-29': None, 't-30': 0.0, 't-31': None, 't-32': None, 't-33': -0.9999942779541016, 't-34': None, 't-35': None, 't-36': 9.999990463256836, 't-37': None, 't-38': 9.999990463256836, 't-39': None, 't-40': None, 't-41': 9.999990463256836, 't-42': None, 't-43': None, 't-44': 9.999990463256836, 't-45': None, 't-46': 9.999990463256836, 't-47': -0.9999942779541016, 't-48': -0.9999942779541016, 't-49': -1.7320537567138672}, 's-3': {'t-0': -0.71, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': 0.5, 't-12': -2.0, 't-14': None, 't-15': 1.0, 't-16': None, 't-17': 1.0, 't-18': None, 't-19': 0.41, 't-21': None, 't-23': 1.0, 't-24': -1.13, 't-25': None, 't-26': 1.0, 't-27': -0.13, 't-28': 1.0, 't-29': 1.0, 't-30': 0.75, 't-31': 0.67, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.8, 't-41': 0.5, 't-42': 0.75, 't-43': None, 't-44': None, 't-45': None, 't-46': 1.0, 't-47': None, 't-48': None, 't-49': None}, 's-4': {'t-0': -0.3463743359126148, 't-4': None, 't-5': 1.0, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 1.0, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': -0.49992219536061405, 't-25': None, 't-26': 1.0, 't-27': None, 't-28': 1.0, 't-29': 1.0, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.4085861120350294, 't-41': None, 't-42': 0.9168179030972968, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-5': {'t-0': -0.71, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': 0, 't-11': 0.25, 't-12': -2.0, 't-14': None, 't-15': 0.33, 't-16': None, 't-17': -1.0, 't-18': None, 't-19': -0.11, 't-21': None, 't-23': 1.0, 't-24': -1.13, 't-25': 0, 't-26': 1.0, 't-27': -0.13, 't-28': 1.0, 't-29': None, 't-30': 0, 't-31': 0.67, 't-32': 0.62, 't-33': None, 't-34': 1.32, 't-35': 0, 't-36': None, 't-37': 0, 't-38': None, 't-39': 0, 't-40': -0.8, 't-41': 0.5, 't-42': -0.2, 't-43': None, 't-44': None, 't-45': 0, 't-46': 1.0, 't-47': None, 't-48': None, 't-49': None}, 's-6': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.1039125638299665, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-7': {'t-0': -0.71, 't-4': 0.5, 't-5': 3.0, 't-6': 1.0, 't-10': None, 't-11': 0.25, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': -1.0, 't-17': -1.0, 't-18': 10.0, 't-19': 0.41, 't-21': 10.0, 't-23': 10.0, 't-24': -1.13, 't-25': 10.0, 't-26': 10.0, 't-27': -0.13, 't-28': 3.0, 't-29': 1.0, 't-30': 10.0, 't-31': 0.67, 't-32': -1.62, 't-33': -1.0, 't-34': 1.32, 't-35': 10.0, 't-36': 10.0, 't-37': 10.0, 't-38': 10.0, 't-39': None, 't-40': -0.8, 't-41': 10.0, 't-42': -0.2, 't-43': -1.0, 't-44': 10.0, 't-45': 10.0, 't-46': 10.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 's-8': {'t-0': -1.5714285714285714, 't-4': 2.0, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': None, 't-15': 3.2727272727272725, 't-16': None, 't-17': None, 't-18': None, 't-19': -9.0, 't-21': None, 't-23': None, 't-24': -0.5833333333333333, 't-25': None, 't-26': None, 't-27': None, 't-28': 1.0, 't-29': 1.0, 't-30': None, 't-31': 1.5, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.3125, 't-41': None, 't-42': -1.5222222222222221, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-9': {'t-0': -0.71, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 0.5, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.41, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': 0.9999999925494194, 't-27': None, 't-28': 1.0, 't-29': 1.0, 't-30': None, 't-31': 0.67, 't-32': 0.62, 't-33': None, 't-34': None, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': 0, 't-40': -0.8, 't-41': None, 't-42': None, 't-43': 1.0, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-10': {'t-0': 1.1711353659629822, 't-4': None, 't-5': 0.5454545617103577, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 0.1666666865348816, 't-16': None, 't-17': None, 't-18': None, 't-19': 9.0, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.5454545617103577, 't-29': None, 't-30': None, 't-31': None, 't-32': 0.5, 't-33': None, 't-34': None, 't-35': 1.0, 't-36': None, 't-37': 0.5, 't-38': None, 't-39': None, 't-40': 1.1456697583198547, 't-41': None, 't-42': 0.7802683711051941, 't-43': None, 't-44': None, 't-45': 1.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-11': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -1.0000000000582077, 't-17': -1.0000000000582077, 't-18': 9.999999999708962, 't-19': None, 't-21': 9.999999999708962, 't-23': 9.999999999708962, 't-24': None, 't-25': None, 't-26': None, 't-27': -0.1322418820927851, 't-28': None, 't-29': None, 't-30': 0.0, 't-31': None, 't-32': None, 't-33': -1.0000000000582077, 't-34': None, 't-35': None, 't-36': 9.999999999708962, 't-37': None, 't-38': 9.999999999708962, 't-39': None, 't-40': None, 't-41': 9.999999999708962, 't-42': None, 't-43': None, 't-44': 9.999999999708962, 't-45': None, 't-46': 9.999999999708962, 't-47': -1.0000000000582077, 't-48': -1.0000000000582077, 't-49': -1.732050807622727}, 's-12': {'t-0': -0.605829586188268, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': nan, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.1111111111111111, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': -1.2676506002282294e+30, 't-30': None, 't-31': None, 't-32': 0.5, 't-33': None, 't-34': -1.0, 't-35': 0.0, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.7293231430114581, 't-41': None, 't-42': 0.7802683838625192, 't-43': None, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-13': {'t-0': -1.1428571428571428, 't-4': 2.0, 't-5': 0.16666666666666666, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': None, 't-15': 0.5454545454545454, 't-16': None, 't-17': None, 't-18': None, 't-19': -9.0, 't-21': None, 't-23': None, 't-24': -0.6666666666666666, 't-25': None, 't-26': 0.0, 't-27': None, 't-28': 0.16666666666666666, 't-29': 2.0, 't-30': None, 't-31': 1.5, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.125, 't-41': None, 't-42': 0.35555555555555557, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-14': {'t-0': nan, 't-4': 1.0, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': 3.802951800684688e+30, 't-14': None, 't-15': 1.0, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': 7.65427608703837e+47, 't-25': None, 't-26': None, 't-27': None, 't-28': 1.0, 't-29': 1.0, 't-30': None, 't-31': 5.356460147529967e+59, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-15': {'t-0': None, 't-4': None, 't-5': 1, 't-6': 1, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 1, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': 1, 't-29': 1, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': 0, 't-36': None, 't-37': 0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': -1, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-16': {'t-0': 0.8333333333333334, 't-4': None, 't-5': -6.0, 't-6': None, 't-10': 0, 't-11': -1.0833333333333333, 't-12': None, 't-14': 0, 't-15': -1.8333333333333333, 't-16': 0, 't-17': 0, 't-18': 0.3333333333333333, 't-19': 0.1111111111111111, 't-21': -1.0, 't-23': 2.0, 't-24': -1.6666666666666667, 't-25': 0, 't-26': 'Infinity', 't-27': -1.8333333333333333, 't-28': -6.0, 't-29': -0.5, 't-30': 0.75, 't-31': None, 't-32': 0, 't-33': 0, 't-34': 0, 't-35': 0, 't-36': 0, 't-37': 0, 't-38': 0, 't-39': 0, 't-40': 0.8571428571428571, 't-41': 1.0, 't-42': 0.5222222222222223, 't-43': 0, 't-44': 0.75, 't-45': 0, 't-46': 4.0, 't-47': 0, 't-48': 0, 't-49': 0}, 's-17': {'t-0': None, 't-4': 0.5, 't-5': None, 't-6': 0.9999999925494194, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 0.5, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.40824829041957855, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': 0.9999999981373549, 't-30': None, 't-31': None, 't-32': 0.6180339902639389, 't-33': None, 't-34': None, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': 0.7463773526251316, 't-43': None, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-18': {'t-0': 7.99999999627471, 't-4': 0.4999999990686774, 't-5': 0.999999996740371, 't-6': -0.9999999962747097, 't-10': None, 't-11': None, 't-12': 1.0000000037252903, 't-14': 0.9999999962747097, 't-15': 0.33333333185873926, 't-16': None, 't-17': None, 't-18': None, 't-19': -53.99999999720603, 't-21': None, 't-23': None, 't-24': 2.0000000037252903, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.999999996740371, 't-29': -1.9999999972060323, 't-30': None, 't-31': 0.6666666707023978, 't-32': 0.6180339865386486, 't-33': None, 't-34': -0.9999999962747097, 't-35': -3.9999999962747097, 't-36': None, 't-37': 0.9999999962747097, 't-38': None, 't-39': None, 't-40': 8.99999999627471, 't-41': None, 't-42': -0.19652614672668267, 't-43': 0.9999999962747097, 't-44': None, 't-45': -0.9999999962747097, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-19': {'t-0': -1.0, 't-4': 0.5, 't-5': -1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': None, 't-15': -0.9980750721847931, 't-16': None, 't-17': None, 't-18': None, 't-19': -1.000077860829329, 't-21': None, 't-23': None, 't-24': -0.9999999714858543, 't-25': None, 't-26': -1.0, 't-27': None, 't-28': -1.0, 't-29': -1.0, 't-30': None, 't-31': 0.6666666666666666, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.0, 't-41': None, 't-42': -1.0000000000251206, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-20': {'t-0': -1.3995062289633526, 't-4': 2.0, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': 0.5503212081491045, 't-15': 3.0, 't-16': None, 't-17': None, 't-18': None, 't-19': -9.000000000000009, 't-21': None, 't-23': None, 't-24': -0.8873266615190035, 't-25': 0.0, 't-26': 1.0, 't-27': None, 't-28': 1.0, 't-29': 1.0000000000000002, 't-30': None, 't-31': 1.5, 't-32': 1.6180339887498936, 't-33': None, 't-34': 0.7548776662466927, 't-35': 1.1547005383792515, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.2546413005364967, 't-41': None, 't-42': -5.088381524828161, 't-43': -1.0, 't-44': None, 't-45': -1.0000000000000004, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-21': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-22': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': 2.5794731460181897, 't-47': None, 't-48': None, 't-49': -0.3942398917920106}, 's-23': {'t-0': None, 't-4': None, 't-5': 1, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 1, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': 1, 't-29': 1, 't-30': None, 't-31': None, 't-32': 1, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': 0.7463771707232466, 't-43': None, 't-44': None, 't-45': 1, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-24': {'t-0': -7.0, 't-4': 2.0, 't-5': None, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': -0.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.11088342345191649, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': 1.0, 't-30': None, 't-31': 1.5, 't-32': -1.0, 't-33': None, 't-34': 0.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -3.2807764064044154, 't-41': None, 't-42': -8.51413210223457, 't-43': -1.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-25': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-26': {'t-0': -0.5491933384829668, 't-4': -0.0, 't-5': -0.3333333333333333, 't-6': -0.0, 't-10': None, 't-11': None, 't-12': 0.0, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': 2.2802569487115676, 't-21': None, 't-23': None, 't-24': -0.1306623862918075, 't-25': None, 't-26': 0.0, 't-27': None, 't-28': -0.3333333333333333, 't-29': None, 't-30': None, 't-31': 0.0, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.47480963363268397, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-27': {'t-0': -1.0, 't-4': 2.0, 't-5': -1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': None, 't-15': -1.0, 't-16': None, 't-17': None, 't-18': None, 't-19': -1.0, 't-21': None, 't-23': None, 't-24': -1.0, 't-25': None, 't-26': None, 't-27': None, 't-28': -1.0, 't-29': 2.0, 't-30': None, 't-31': 1.5, 't-32': -1.0, 't-33': None, 't-34': -1.0, 't-35': -1.0, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.0, 't-41': None, 't-42': -1.0, 't-43': None, 't-44': None, 't-45': -1.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-28': {'t-0': None, 't-4': 0.5, 't-5': -17.108298299236967, 't-6': 0.5, 't-10': None, 't-11': None, 't-12': 4.0, 't-14': -6.375951415100753, 't-15': 2.5150618927069233, 't-16': None, 't-17': None, 't-18': None, 't-19': 16.731582291303194, 't-21': None, 't-23': None, 't-24': 10.687852189297999, 't-25': 1.0, 't-26': 1.0000000000000258, 't-27': None, 't-28': -17.108298299236967, 't-29': 1.4505401701440697, 't-30': None, 't-31': None, 't-32': 0.9067953030328075, 't-33': None, 't-34': 1.0, 't-35': 2.449489742783178, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': 5.213432435192258, 't-43': None, 't-44': None, 't-45': 0.8408964152537172, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-29': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': 3.414213562373096, 't-24': None, 't-25': None, 't-26': None, 't-27': -23.468709203585913, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': 7.162277660168383, 't-39': None, 't-40': None, 't-41': 1.0, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': 23.489125293076054, 't-47': None, 't-48': None, 't-49': 1.2679491924311228}, 's-30': {'t-0': -0.4375, 't-4': 0.25, 't-5': 3.0, 't-6': 0.5, 't-10': None, 't-11': None, 't-12': -1.0, 't-14': 0.0, 't-15': 0.9166666666666666, 't-16': 0.0, 't-17': -0.5, 't-18': -0.375, 't-19': -0.05555555555555555, 't-21': -0.5, 't-23': 1.0, 't-24': -0.75, 't-25': None, 't-26': None, 't-27': 3.0, 't-28': 3.0, 't-29': 0.25, 't-30': 0.375, 't-31': 0.3333333333333333, 't-32': 0.0, 't-33': 0.0, 't-34': 0.0, 't-35': 0.0, 't-36': 0.0, 't-37': 0.0, 't-38': 0.0, 't-39': None, 't-40': -0.4444444444444444, 't-41': 0.5, 't-42': 1.40625, 't-43': 0.0, 't-44': -0.4, 't-45': 0.0, 't-46': 2.0, 't-47': 0.0, 't-48': 0.0, 't-49': 0.0}, 's-31': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-32': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -1.0, 't-17': 1.0, 't-18': None, 't-19': None, 't-21': None, 't-23': 118433.35807829387, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': -1.0, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': 3501830165.574828, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': 0.9837754959894649, 't-47': -1.0, 't-48': -1.0, 't-49': -1.732050807558153}, 's-33': {'t-0': 0.1552275839452144, 't-4': -0.0, 't-5': None, 't-6': -0.0, 't-10': None, 't-11': None, 't-12': 0.0, 't-14': 0.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.1111111111111111, 't-21': None, 't-23': None, 't-24': 1.3115528128088303, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': -0.5, 't-30': None, 't-31': 0.6666666666666666, 't-32': None, 't-33': None, 't-34': -1.0, 't-35': -0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': 0.12655299323872596, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': -0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-34': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-35': {'t-0': -202.0, 't-4': 0.5, 't-5': 8.5, 't-6': 0.5, 't-10': None, 't-11': None, 't-12': 1.0, 't-14': 3.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': 31.5, 't-21': None, 't-23': None, 't-24': 5.0, 't-25': None, 't-26': None, 't-27': None, 't-28': 8.5, 't-29': 1.0, 't-30': None, 't-31': -1.0, 't-32': -1.5, 't-33': None, 't-34': 1.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -623.0, 't-41': None, 't-42': -1.6599999999999997, 't-43': -0.5, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-36': {'t-0': -1.4384471871911697, 't-4': 1.0, 't-5': 0.14549722436790283, 't-6': 0.6180339887498949, 't-10': None, 't-11': 24.0, 't-12': None, 't-14': 0.40824829046386296, 't-15': 0.5207972893961479, 't-16': 1.0, 't-17': 1.618033988749895, 't-18': None, 't-19': 10.937253933193773, 't-21': None, 't-23': 1.0, 't-24': None, 't-25': None, 't-26': 0.0, 't-27': 0.16227766016837952, 't-28': 0.14549722436790283, 't-29': 1.0, 't-30': None, 't-31': 0.8228756555322954, 't-32': None, 't-33': 1.0, 't-34': 1.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': 2.0, 't-42': 17.637129152675673, 't-43': None, 't-44': None, 't-45': None, 't-46': 1.0, 't-47': 1.0, 't-48': 1.0, 't-49': 0.5773502691896257}, 's-37': {'t-0': -1.25, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': 0.16666666666666666, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': 1.5, 't-32': 1.0, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.2, 't-41': None, 't-42': None, 't-43': -1.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-38': {'t-0': -1.25, 't-4': 2.0, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': 0.16666666666666666, 't-15': 1.0, 't-16': None, 't-17': None, 't-18': None, 't-19': -9.0, 't-21': None, 't-23': None, 't-24': -0.8888888888888888, 't-25': None, 't-26': None, 't-27': None, 't-28': 1.0, 't-29': 1.0, 't-30': None, 't-31': 1.5, 't-32': 1.0, 't-33': None, 't-34': 0.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.2, 't-41': None, 't-42': 0.8347826086956524, 't-43': -1.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-39': {'t-0': None, 't-4': 0.5, 't-5': None, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': 0.6666666666666666, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-40': {'t-0': -0.7145377271081088, 't-4': 0.49999999995634425, 't-5': 2.9999999999563443, 't-6': 0.9999999999854481, 't-10': None, 't-11': None, 't-12': -2.0000000000436557, 't-14': 1.8171205928229028, 't-15': 0.9999999999854481, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.40824829040502664, 't-21': None, 't-23': None, 't-24': -1.1269806751079159, 't-25': None, 't-26': None, 't-27': None, 't-28': 2.9999999999563443, 't-29': 0.9999999999854481, 't-30': None, 't-31': 0.666666666729725, 't-32': -1.618033988706884, 't-33': None, 't-34': 1.324717957249959, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': -0.797040556135471, 't-41': None, 't-42': -0.19652614391816314, 't-43': -0.9999999999854481, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-41': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -1.0, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': 1.0, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': 0.75, 't-31': None, 't-32': None, 't-33': -1.0, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': 0.5, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': 3.0, 't-47': -1.0, 't-48': -1.0, 't-49': 1.7320508075688772}, 's-42': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': -2.0000000000000004, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': 0, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': -0.9999999999999999, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-43': {'t-0': -0.875, 't-4': 0.5, 't-5': 6.0, 't-6': 1.0, 't-10': None, 't-11': 1.0833333333333333, 't-12': -2.0, 't-14': 0.0, 't-15': 1.8333333333333333, 't-16': None, 't-17': -0.0, 't-18': -0.3333333333333333, 't-19': -0.1111111111111111, 't-21': -2.0, 't-23': 0.5, 't-24': -1.5, 't-25': None, 't-26': None, 't-27': 1.8333333333333333, 't-28': 6.0, 't-29': 0.5, 't-30': -0.0, 't-31': 0.6666666666666666, 't-32': 0.0, 't-33': None, 't-34': -0.0, 't-35': -0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': -0.8888888888888888, 't-41': 0.25, 't-42': 2.8125, 't-43': 0.0, 't-44': -0.75, 't-45': -0.0, 't-46': 0.75, 't-47': None, 't-48': None, 't-49': None}, 's-44': {'t-0': -1.25, 't-4': 2.0, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': 0.16666666666666666, 't-15': 1.0, 't-16': None, 't-17': None, 't-18': None, 't-19': -9.0, 't-21': None, 't-23': None, 't-24': -0.8888888888888888, 't-25': None, 't-26': None, 't-27': None, 't-28': 1.0, 't-29': 1.0, 't-30': None, 't-31': 1.5, 't-32': 1.0, 't-33': None, 't-34': 0.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.2, 't-41': None, 't-42': 0.8347826086956524, 't-43': -1.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-45': {'t-0': -1.0000000000404943, 't-4': None, 't-5': -2.428571428571429, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': -6.0, 't-15': -0.411764705882353, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.16666666666666666, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': -2.428571428571429, 't-29': -0.3333333333333333, 't-30': None, 't-31': None, 't-32': 3.0, 't-33': None, 't-34': 0.0, 't-35': 0.75, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': -1.0000000000404943, 't-41': None, 't-42': -0.28055736169943857, 't-43': 1.0, 't-44': None, 't-45': 1.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-46': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-47': {'t-0': (0.29226130832876973+0.5075697182911765j), 't-4': 2.0, 't-5': 23.257976016304845, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': 6.872983346207417, 't-15': -0.05456317551480261, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.3175720660202263, 't-21': None, 't-23': None, 't-24': (0.6456439237389602+0.6614378277661477j), 't-25': None, 't-26': None, 't-27': None, 't-28': 23.257976016304845, 't-29': -0.3660254037844386, 't-30': None, 't-31': 1.5, 't-32': -0.3819660112501051, 't-33': None, 't-34': -1.0, 't-35': -0.75, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': (0.31399249807176693+0.5591937247010863j), 't-41': None, 't-42': 5.814844331009548, 't-43': None, 't-44': None, 't-45': (0.5+0.2886751345948129j), 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-48': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': -1.5, 't-18': -7.2, 't-19': None, 't-21': 1.0, 't-23': 1.0, 't-24': None, 't-25': None, 't-26': None, 't-27': 4.0, 't-28': None, 't-29': None, 't-30': 1.0, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': 0.0, 't-39': None, 't-40': None, 't-41': 1.0, 't-42': None, 't-43': None, 't-44': -6.0, 't-45': None, 't-46': 1.0, 't-47': None, 't-48': None, 't-49': None}, 's-49': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -1.0, 't-17': -1.0, 't-18': -1.0, 't-19': None, 't-21': -1.0, 't-23': -1.0, 't-24': None, 't-25': None, 't-26': None, 't-27': -1.0, 't-28': None, 't-29': None, 't-30': -1.0, 't-31': None, 't-32': None, 't-33': -1.0, 't-34': None, 't-35': None, 't-36': -1.0, 't-37': None, 't-38': -1.0, 't-39': None, 't-40': None, 't-41': -1.0, 't-42': None, 't-43': None, 't-44': -1.0, 't-45': None, 't-46': -1.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.0}, 's-50': {'t-0': -1.3333333333333333, 't-4': 2.0, 't-5': 0.7058823529411765, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': None, 't-15': 2.4, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.0, 't-21': None, 't-23': None, 't-24': -0.4444444444444444, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.7058823529411765, 't-29': 2.0, 't-30': None, 't-31': 1.5, 't-32': 0.25, 't-33': None, 't-34': -1.0, 't-35': -0.0, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -1.3333333333333333, 't-41': None, 't-42': -11.791323692992218, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-51': {'t-0': 0.5, 't-4': 1.5, 't-5': 24.0, 't-6': 2.0, 't-10': None, 't-11': None, 't-12': -1.0, 't-14': 7.0, 't-15': 4.0, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.7407407407407407, 't-21': None, 't-23': None, 't-24': -0.5, 't-25': None, 't-26': None, 't-27': None, 't-28': 24.0, 't-29': 2.0, 't-30': None, 't-31': 1.6666666666666667, 't-32': -2.0, 't-33': None, 't-34': 1.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': 0.4444444444444444, 't-41': None, 't-42': 6.593749999999999, 't-43': 0.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-52': {'t-0': -12.85992431640625, 't-4': -0.5, 't-5': 66.0, 't-6': -1.0, 't-10': None, 't-11': None, 't-12': 2.0, 't-14': 6.0, 't-15': -13.833333333333334, 't-16': None, 't-17': None, 't-18': None, 't-19': -1.8888888888888888, 't-21': None, 't-23': None, 't-24': -27.875, 't-25': None, 't-26': None, 't-27': None, 't-28': 66.0, 't-29': -1.5, 't-30': None, 't-31': -0.6666666666666666, 't-32': -1.0, 't-33': None, 't-34': -1.0, 't-35': -0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': -18.080204575860723, 't-41': None, 't-42': 129.7615966796875, 't-43': -1.0, 't-44': None, 't-45': -0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-53': {'t-0': None, 't-4': None, 't-5': None, 't-6': 0.0, 't-10': None, 't-11': None, 't-12': 0.0, 't-14': 0.0, 't-15': 0.024518059211880883, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': -0.23391730608699857, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': -0.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': 0.010482501813323164, 't-43': 0.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-54': {'t-0': -0.71, 't-4': -2.0, 't-5': 0.17, 't-6': -1.0, 't-10': None, 't-11': -0.0, 't-12': -0.5, 't-14': 0.17, 't-15': -6.0, 't-16': -1.0, 't-17': -1.0, 't-18': -4.0, 't-19': -54.0, 't-21': -0.5, 't-23': -1.0, 't-24': -1.0, 't-25': None, 't-26': -0.0, 't-27': 1.0, 't-28': 0.17, 't-29': -2.0, 't-30': None, 't-31': 0.67, 't-32': -1.0, 't-33': -1.0, 't-34': -1.0, 't-35': None, 't-36': -1.0, 't-37': None, 't-38': -0.5, 't-39': None, 't-40': -0.8, 't-41': -4.0, 't-42': -0.2, 't-43': -1.0, 't-44': -5.0, 't-45': None, 't-46': -0.33, 't-47': -1.0, 't-48': -1.0, 't-49': 0.33}, 's-55': {'t-0': 0.0, 't-4': 0.0, 't-5': 0.0, 't-6': 0.0, 't-10': None, 't-11': None, 't-12': 0.0, 't-14': 0.0, 't-15': 0.0, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.0, 't-21': None, 't-23': None, 't-24': 0.0, 't-25': 0.0, 't-26': 0.0, 't-27': None, 't-28': 0.0, 't-29': 0.0, 't-30': None, 't-31': 0.0, 't-32': 0.0, 't-33': None, 't-34': 0.0, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': 0.0, 't-41': None, 't-42': 0.0, 't-43': 0.0, 't-44': None, 't-45': 1.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-56': {'t-0': None, 't-4': None, 't-5': 1, 't-6': 1, 't-10': None, 't-11': None, 't-12': -2, 't-14': None, 't-15': 1, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': 0, 't-26': 1, 't-27': None, 't-28': 1, 't-29': 1, 't-30': None, 't-31': None, 't-32': 1, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': -1, 't-44': None, 't-45': 1, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-57': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-58': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-59': {'t-0': -0.605829586188268, 't-4': None, 't-5': 0.5454545454545453, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': 0.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.11111005147298177, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.5454545454545453, 't-29': 0.5, 't-30': None, 't-31': None, 't-32': 0.5000000001164153, 't-33': None, 't-34': 2.3283064370807974e-10, 't-35': 7.62939453125e-06, 't-36': None, 't-37': 1.0, 't-38': None, 't-39': None, 't-40': -0.7293231430114581, 't-41': None, 't-42': 0.7802683839197783, 't-43': 0.0, 't-44': None, 't-45': 0.0006766394845988642, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-60': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-61': {'t-0': None, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 0.5, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': 1.0, 't-29': 1.0, 't-30': None, 't-31': None, 't-32': 1.0, 't-33': None, 't-34': None, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-62': {'t-0': -0.9999996982514858, 't-4': 999.9999995343387, 't-5': 0.0, 't-6': 999.9999995343387, 't-10': None, 't-11': None, 't-12': 999.9999995343387, 't-14': -5.999999586492777, 't-15': -999.9999995343387, 't-16': None, 't-17': None, 't-18': None, 't-19': 999.9999995343387, 't-21': None, 't-23': None, 't-24': -0.822876114398241, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.0, 't-29': 0.0, 't-30': None, 't-31': -999.9999995343387, 't-32': 0.33333292230963707, 't-33': None, 't-34': 999.9999995343387, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': -0.9999996982514858, 't-41': None, 't-42': -999.9999995343387, 't-43': 0.9999996982514858, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-63': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-64': {'t-0': None, 't-4': -2, 't-5': None, 't-6': -1, 't-10': None, 't-11': None, 't-12': 1, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': -4.5, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': 3, 't-32': -0.5, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': 0.6104263796080948, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-65': {'t-0': -0.24239172444178303, 't-4': 1024.0, 't-5': 0.3376634832997808, 't-6': 1024.0, 't-10': None, 't-11': None, 't-12': 1024.0, 't-14': None, 't-15': -0.1563213311831011, 't-16': None, 't-17': None, 't-18': None, 't-19': -5.897655960523758, 't-21': None, 't-23': None, 't-24': -0.40866208510199736, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.3376634832997808, 't-29': -0.1241329377276583, 't-30': None, 't-31': 1024.0, 't-32': -0.16934972798448567, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.2569590264831447, 't-41': None, 't-42': -0.4695081484367622, 't-43': None, 't-44': None, 't-45': -0.2718871358935647, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-66': {'t-0': None, 't-4': None, 't-5': 0.666666666666667, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 0.15030108467809422, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.07639299083301454, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': 0.9999999999999999, 't-27': None, 't-28': 0.666666666666667, 't-29': 1.0, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': (0.5806917853362603+0.2764963756819512j), 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-67': {'t-0': -0.71, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': None, 't-15': None, 't-16': -1.0, 't-17': -1.0, 't-18': None, 't-19': -0.11, 't-21': None, 't-23': None, 't-24': -1.13, 't-25': None, 't-26': None, 't-27': -0.13, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': -1.62, 't-33': -1.0, 't-34': None, 't-35': -0.87, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.8, 't-41': None, 't-42': -0.2, 't-43': -1.0, 't-44': None, 't-45': -1.0, 't-46': None, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 's-68': {'t-0': -0.9414486720102572, 't-4': None, 't-5': 1.051739428204243, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 0.3257055611239816, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.10391256382996654, 't-21': None, 't-23': None, 't-24': -1.0, 't-25': None, 't-26': None, 't-27': None, 't-28': 1.051739428204243, 't-29': -1.4565916269196242, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': 0.35383190888334615, 't-41': None, 't-42': -0.20069203555641243, 't-43': None, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-69': {'t-0': -5.716301817640241, 't-4': -1.0, 't-5': 3.0000000000001337, 't-6': -1.0, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': None, 't-15': -6.000000000035634, 't-16': None, 't-17': None, 't-18': None, 't-19': 6.0, 't-21': None, 't-23': None, 't-24': -2.2539613502617204, 't-25': None, 't-26': None, 't-27': None, 't-28': 3.0000000000001337, 't-29': -2.0000000075592923, 't-30': None, 't-31': 2.0, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -7.173365014443365, 't-41': None, 't-42': 7.3674569455863, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-70': {'t-0': -0.71, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': -1000.0, 't-11': 0.5, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': -1.0, 't-17': -1.0, 't-18': 1000.0, 't-19': 0.41, 't-21': 1000.0, 't-23': 1000.0, 't-24': -1.13, 't-25': -0.0, 't-26': 1000.0, 't-27': -0.13, 't-28': 1.0, 't-29': 1.0, 't-30': -0.0, 't-31': 0.67, 't-32': -1.62, 't-33': -1.0, 't-34': 1.32, 't-35': -0.87, 't-36': 1000.0, 't-37': -0.0, 't-38': 1000.0, 't-39': -1000.0, 't-40': -0.8, 't-41': 1000.0, 't-42': -0.2, 't-43': -1.0, 't-44': 1000.0, 't-45': -1.0, 't-46': 1000.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 's-71': {'t-0': -0.71, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.8, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-72': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': -4.666666666666667, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': 2.1202614379084967, 't-43': None, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-73': {'t-0': -0.71, 't-4': 0.5, 't-5': 3.0, 't-6': 1.0, 't-10': 0.0, 't-11': 0.25, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': -1.0, 't-17': -1.0, 't-18': 10.0, 't-19': 0.41, 't-21': 10.0, 't-23': 10.0, 't-24': -1.13, 't-25': 0.0, 't-26': 10.0, 't-27': -0.13, 't-28': 3.0, 't-29': 1.0, 't-30': 0.0, 't-31': 0.67, 't-32': -1.62, 't-33': -1.0, 't-34': 1.32, 't-35': 0.0, 't-36': 10.0, 't-37': 0.0, 't-38': 10.0, 't-39': 0.0, 't-40': -0.8, 't-41': 10.0, 't-42': -0.2, 't-43': -1.0, 't-44': 10.0, 't-45': 0.0, 't-46': 10.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 's-74': {'t-0': -0.71, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': 0.0, 't-11': 0.5, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': -1.0, 't-17': -1.0, 't-18': 1000.0, 't-19': 0.41, 't-21': 1000.0, 't-23': 1000.0, 't-24': -1.13, 't-25': 0.0, 't-26': 1000.0, 't-27': -0.13, 't-28': 1.0, 't-29': 1.0, 't-30': 0.0, 't-31': 0.67, 't-32': -1.62, 't-33': -1.0, 't-34': 1.32, 't-35': 0.0, 't-36': 1000.0, 't-37': 0.0, 't-38': 1000.0, 't-39': 0.0, 't-40': -0.8, 't-41': 1000.0, 't-42': -0.2, 't-43': -1.0, 't-44': 1000.0, 't-45': 0.0, 't-46': 1000.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 's-75': {'t-0': -0.71, 't-4': 0.5, 't-5': 3.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.41, 't-21': None, 't-23': None, 't-24': -1.13, 't-25': 0.0, 't-26': 10.0, 't-27': None, 't-28': 3.0, 't-29': 1.0, 't-30': None, 't-31': 0.67, 't-32': -1.62, 't-33': None, 't-34': 1.32, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': -0.8, 't-41': None, 't-42': -0.2, 't-43': -1.0, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-76': {'t-0': -0.7145378351163165, 't-4': 0.5, 't-5': 0.9999999999977108, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': None, 't-15': 0.3333333239378772, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.1111111111111111, 't-21': None, 't-23': None, 't-24': -1.1269807046077296, 't-25': None, 't-26': 0.9990234375, 't-27': None, 't-28': 0.9999999999977108, 't-29': None, 't-30': None, 't-31': 0.6666666666666666, 't-32': 0.6180330952207308, 't-33': None, 't-34': 1.3247179572453902, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.7970405568606043, 't-41': None, 't-42': -0.19652614394857565, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-77': {'t-0': -1.40997688624724e-12, 't-4': 0.5, 't-5': 0.04141716566866267, 't-6': None, 't-10': None, 't-11': None, 't-12': -0.25, 't-14': -0.0, 't-15': 0.009090638576444682, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.0015723296477286087, 't-21': None, 't-23': None, 't-24': -0.0017123275120916525, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.04141716566866267, 't-29': 0.25, 't-30': None, 't-31': -0.125, 't-32': 1.0, 't-33': None, 't-34': -0.5, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -2.8838750706484805e-13, 't-41': None, 't-42': 3.834291139227233e-05, 't-43': 0.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-78': {'t-0': -753.0, 't-4': 0.5, 't-5': -0.45454545454545453, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': None, 't-15': -12.0, 't-16': None, 't-17': None, 't-18': None, 't-19': -37.0, 't-21': None, 't-23': None, 't-24': -56.0, 't-25': None, 't-26': None, 't-27': None, 't-28': -0.45454545454545453, 't-29': None, 't-30': None, 't-31': 0.6666666666666666, 't-32': -1.0, 't-33': None, 't-34': -1.0, 't-35': -1.0, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -931.0, 't-41': None, 't-42': 65.62941176470589, 't-43': None, 't-44': None, 't-45': -1.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-79': {'t-0': (0.7059991512466814+0.7350587780372522j), 't-4': None, 't-5': (-0.1620942176863756+0.254131063249203j), 't-6': None, 't-10': None, 't-11': (2.6337060100823058+1.526184879654883j), 't-12': None, 't-14': None, 't-15': (2.1503144343865603+1.2562891899145974j), 't-16': None, 't-17': None, 't-18': (1.533874001430051+0j), 't-19': 0.8641111704095511, 't-21': None, 't-23': None, 't-24': (0.2119575670164681+0.6557964097160207j), 't-25': None, 't-26': (1.9359808289441316+1.3633368096173397j), 't-27': (2.212160665348878+1.2541620590333946j), 't-28': (-0.1620942176863756+0.254131063249203j), 't-29': 0.9999999999999987, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': (0.9150775981157481+0.7263550538732609j), 't-41': None, 't-42': (0.4993341015723566+0.7686469890101422j), 't-43': None, 't-44': (0.7059991512466814+0.7350587780372522j), 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-80': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -0.9999999997489795, 't-17': -0.9999999997489795, 't-18': 999.9999999995453, 't-19': None, 't-21': 999.9999999995453, 't-23': 999.9999999995453, 't-24': None, 't-25': None, 't-26': None, 't-27': -0.13224188251115265, 't-28': None, 't-29': None, 't-30': 0.0, 't-31': None, 't-32': None, 't-33': -0.9999999997489795, 't-34': None, 't-35': None, 't-36': 999.9999999995453, 't-37': None, 't-38': 999.9999999995453, 't-39': None, 't-40': None, 't-41': 999.9999999995453, 't-42': None, 't-43': None, 't-44': 999.9999999995453, 't-45': None, 't-46': 999.9999999995453, 't-47': -0.9999999997489795, 't-48': -0.9999999997489795, 't-49': -1.732050807277119}, 's-81': {'t-0': -0.2, 't-4': 0.5, 't-5': -1.0, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -2.0, 't-14': None, 't-15': -0.09090909090909091, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.16666666666666666, 't-21': None, 't-23': None, 't-24': -2.0, 't-25': None, 't-26': None, 't-27': None, 't-28': -1.0, 't-29': -0.0, 't-30': None, 't-31': 0.6666666666666666, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.3333333333333333, 't-41': None, 't-42': -0.10638297872340426, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-82': {'t-0': None, 't-4': 1.0, 't-5': None, 't-6': 0.6180339887498949, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': 0.9282032302755093, 't-16': None, 't-17': None, 't-18': None, 't-19': 9.658910531638176, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': 0.7320508075688772, 't-30': None, 't-31': None, 't-32': 0.6180339887498949, 't-33': None, 't-34': -0.0, 't-35': -1.0, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': -0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-83': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': 0.0, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-84': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-85': {'t-0': -0.71, 't-4': 0.5, 't-5': 3.0, 't-6': 1.0, 't-10': -10, 't-11': 0.25, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': None, 't-17': None, 't-18': None, 't-19': 0.41, 't-21': None, 't-23': None, 't-24': -1.13, 't-25': None, 't-26': None, 't-27': None, 't-28': 3.0, 't-29': 1.0, 't-30': None, 't-31': 0.67, 't-32': -1.62, 't-33': None, 't-34': 1.32, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': -10, 't-40': -0.8, 't-41': None, 't-42': -0.2, 't-43': -1.0, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-86': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -0.9999999999763531, 't-17': -0.9999999999763531, 't-18': 99.99999999995453, 't-19': None, 't-21': 99.99999999995453, 't-23': 99.99999999995453, 't-24': None, 't-25': None, 't-26': None, 't-27': -0.13224188228377898, 't-28': None, 't-29': None, 't-30': 0.0, 't-31': None, 't-32': None, 't-33': -0.9999999999763531, 't-34': None, 't-35': None, 't-36': 99.99999999995453, 't-37': None, 't-38': 99.99999999995453, 't-39': None, 't-40': None, 't-41': 99.99999999995453, 't-42': None, 't-43': None, 't-44': 99.99999999995453, 't-45': None, 't-46': 99.99999999995453, 't-47': -0.9999999999763531, 't-48': -0.9999999999763531, 't-49': -1.7320508075954422}, 's-87': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': -0.0, 't-17': (-1.7992204236423412-1.4662225614507942j), 't-18': (-0.5654894569446299-0.30339826248407314j), 't-19': None, 't-21': -0.5, 't-23': 1.0, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': 0.375, 't-31': None, 't-32': None, 't-33': -0.0, 't-34': None, 't-35': None, 't-36': 0.0, 't-37': None, 't-38': (-2.0162224726095728-1.614646808878645j), 't-39': None, 't-40': None, 't-41': 0.5, 't-42': None, 't-43': None, 't-44': (-0.9260683983157358-0.43618243106973636j), 't-45': None, 't-46': 2.0, 't-47': -0.0, 't-48': -0.0, 't-49': 0.0}, 's-88': {'t-0': 1.5, 't-4': 2.0, 't-5': 0.6363636363636364, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': None, 't-15': 2.8333333333333335, 't-16': None, 't-17': None, 't-18': None, 't-19': -5.333333333333333, 't-21': None, 't-23': None, 't-24': -3.0, 't-25': None, 't-26': None, 't-27': None, 't-28': 0.6363636363636364, 't-29': None, 't-30': None, 't-31': 1.5, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': 1.0, 't-41': None, 't-42': -5.411764705882354, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-89': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': 0.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': 2.3283064370807974e-10, 't-35': 0.0, 't-36': None, 't-37': 1.0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': 0.0, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-90': {'t-0': None, 't-4': None, 't-5': -0.872983346207417, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': 0.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': 2.3945641190222164, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': -0.872983346207417, 't-29': None, 't-30': None, 't-31': 1.786299647846891, 't-32': 0.0, 't-33': None, 't-34': 0.0, 't-35': 0.0, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': -1.9069869463260547, 't-43': 0.0, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-91': {'t-0': None, 't-4': 1.0, 't-5': None, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': 1.0, 't-14': 1.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': 1.0, 't-32': 1.0, 't-33': None, 't-34': 1.0, 't-35': 1.0, 't-36': None, 't-37': 1.0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': 1.0, 't-44': None, 't-45': 1.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-92': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-93': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': -0.0, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': nan, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-94': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': -3.71101342749762, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-95': {'t-0': None, 't-4': None, 't-5': None, 't-6': None, 't-10': None, 't-11': None, 't-12': None, 't-14': 0.0, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': None, 't-29': 0.0, 't-30': None, 't-31': None, 't-32': None, 't-33': None, 't-34': None, 't-35': 0.5, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': None, 't-43': 0.0, 't-44': None, 't-45': 0.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-96': {'t-0': -0.71, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': 0.0, 't-11': 0.5, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': -1.0, 't-17': -1.0, 't-18': 1000.0, 't-19': 0.41, 't-21': 1000.0, 't-23': 1000.0, 't-24': -1.13, 't-25': 0.0, 't-26': 1000.0, 't-27': -0.13, 't-28': 1.0, 't-29': 1.0, 't-30': 0.0, 't-31': 0.67, 't-32': -1.62, 't-33': -1.0, 't-34': 1.32, 't-35': 0.0, 't-36': 1000.0, 't-37': 0.0, 't-38': 1000.0, 't-39': 0.0, 't-40': -0.8, 't-41': 1000.0, 't-42': -0.2, 't-43': -1.0, 't-44': 1000.0, 't-45': 0.0, 't-46': 1000.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 's-97': {'t-0': -0.71, 't-4': 0.5, 't-5': 1.0, 't-6': 1.0, 't-10': -1000.0, 't-11': 0.5, 't-12': -2.0, 't-14': 1.82, 't-15': 1.0, 't-16': -1.0, 't-17': -1.0, 't-18': 1000.0, 't-19': 0.41, 't-21': 1000.0, 't-23': 1000.0, 't-24': -1.13, 't-25': -0.0, 't-26': 1000.0, 't-27': -0.13, 't-28': 1.0, 't-29': 1.0, 't-30': -0.0, 't-31': 0.67, 't-32': -1.62, 't-33': -1.0, 't-34': 1.32, 't-35': -0.87, 't-36': 1000.0, 't-37': -0.0, 't-38': 1000.0, 't-39': -1000.0, 't-40': -0.8, 't-41': 1000.0, 't-42': -0.2, 't-43': -1.0, 't-44': 1000.0, 't-45': -1.0, 't-46': 1000.0, 't-47': -1.0, 't-48': -1.0, 't-49': -1.73}, 's-98': {'t-0': None, 't-4': -0.5, 't-5': 23.257976016304845, 't-6': -0.6180339887498949, 't-10': None, 't-11': None, 't-12': None, 't-14': 6.872983346207417, 't-15': -0.05456317551480261, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.3175720660202263, 't-21': None, 't-23': None, 't-24': None, 't-25': None, 't-26': None, 't-27': None, 't-28': 23.257976016304845, 't-29': -0.3660254037844386, 't-30': None, 't-31': 1.2152504370215302, 't-32': -0.3819660112501051, 't-33': None, 't-34': -1.0, 't-35': -0.75, 't-36': None, 't-37': 0.0, 't-38': None, 't-39': None, 't-40': None, 't-41': None, 't-42': 5.565676142304192, 't-43': None, 't-44': None, 't-45': -1.0, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-99': {'t-0': -0.0013280212483399733, 't-4': 2.0, 't-5': -2.2, 't-6': 1.0, 't-10': None, 't-11': None, 't-12': -0.5, 't-14': None, 't-15': -0.08333333333333333, 't-16': None, 't-17': None, 't-18': None, 't-19': -0.02702702702702703, 't-21': None, 't-23': None, 't-24': -0.017857142857142856, 't-25': None, 't-26': -1.0, 't-27': None, 't-28': -2.2, 't-29': -0.0, 't-30': None, 't-31': 1.5, 't-32': None, 't-33': None, 't-34': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-40': -0.0010741138560687433, 't-41': None, 't-42': 0.015237070897194584, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}}, 'code_test_res': {'s-0': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': True, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-1': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-2': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-3': {'t-0': True, 't-4': True, 't-5': True, 't-6': True, 't-10': False, 't-11': True, 't-12': True, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': True, 't-24': False, 't-25': False, 't-26': True, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-4': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': True, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-5': {'t-0': True, 't-4': True, 't-5': True, 't-6': True, 't-10': True, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-21': False, 't-23': True, 't-24': False, 't-25': False, 't-26': True, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-6': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-7': {'t-0': True, 't-4': True, 't-5': False, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-8': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-9': {'t-0': True, 't-4': True, 't-5': True, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-10': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': True, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-11': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-12': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-13': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-14': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-15': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-16': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': True, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': True, 't-33': True, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': True, 't-48': True, 't-49': False}, 's-17': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-18': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-19': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-20': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': True, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-21': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-22': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-23': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': True, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-24': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-25': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-26': {'t-0': False, 't-4': False, 't-5': False, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-27': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-28': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-29': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': True, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-30': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': True, 't-24': False, 't-25': False, 't-26': False, 't-27': True, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': True, 't-33': True, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': True, 't-48': True, 't-49': False}, 's-31': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-32': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': True, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-33': {'t-0': False, 't-4': False, 't-5': False, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-34': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-35': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-36': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': True, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': True, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-37': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-38': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-39': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-40': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-41': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': True, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-42': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-43': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': True, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-44': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-45': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': True, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': True, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-46': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-47': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-48': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': True, 't-24': True, 't-25': True, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-49': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': True, 't-47': False, 't-48': False, 't-49': False}, 's-50': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-51': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-52': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-53': {'t-0': False, 't-4': False, 't-5': False, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-54': {'t-0': True, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-55': {'t-0': False, 't-4': False, 't-5': False, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': True, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': True, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-56': {'t-0': False, 't-4': False, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': True, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': True, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-57': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-58': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-59': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-60': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-61': {'t-0': False, 't-4': True, 't-5': True, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': True, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-62': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-63': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-64': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-65': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-66': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-67': {'t-0': True, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-68': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-69': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-70': {'t-0': True, 't-4': True, 't-5': True, 't-6': True, 't-10': False, 't-11': True, 't-12': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-21': True, 't-23': True, 't-24': True, 't-25': True, 't-26': True, 't-27': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-33': True, 't-34': True, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-71': {'t-0': True, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-72': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-73': {'t-0': True, 't-4': True, 't-5': False, 't-6': True, 't-10': True, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-74': {'t-0': True, 't-4': True, 't-5': True, 't-6': True, 't-10': True, 't-11': True, 't-12': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-21': True, 't-23': True, 't-24': True, 't-25': True, 't-26': True, 't-27': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-33': True, 't-34': True, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-40': True, 't-41': True, 't-42': True, 't-43': True, 't-44': True, 't-45': True, 't-46': True, 't-47': True, 't-48': True, 't-49': True}, 's-75': {'t-0': True, 't-4': True, 't-5': False, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-76': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-77': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-78': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-79': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-80': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-81': {'t-0': False, 't-4': True, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-82': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-83': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': True, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-84': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-85': {'t-0': True, 't-4': True, 't-5': False, 't-6': True, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': True, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-86': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-87': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': True, 't-24': True, 't-25': True, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': True, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': True, 't-44': False, 't-45': False, 't-46': False, 't-47': True, 't-48': True, 't-49': False}, 's-88': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-89': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': True, 't-17': False, 't-18': True, 't-19': False, 't-21': False, 't-23': False, 't-24': True, 't-25': True, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': True, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-90': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': True, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-91': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': True, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-92': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-93': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-94': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-95': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-96': {'t-0': True, 't-4': True, 't-5': True, 't-6': True, 't-10': True, 't-11': True, 't-12': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-21': True, 't-23': True, 't-24': True, 't-25': True, 't-26': True, 't-27': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-33': True, 't-34': True, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-40': True, 't-41': True, 't-42': True, 't-43': True, 't-44': True, 't-45': True, 't-46': True, 't-47': True, 't-48': True, 't-49': True}, 's-97': {'t-0': True, 't-4': True, 't-5': True, 't-6': True, 't-10': False, 't-11': True, 't-12': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-21': True, 't-23': True, 't-24': True, 't-25': True, 't-26': True, 't-27': True, 't-28': True, 't-29': True, 't-30': True, 't-31': True, 't-32': True, 't-33': True, 't-34': True, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-98': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': True, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-99': {'t-0': False, 't-4': False, 't-5': False, 't-6': False, 't-10': False, 't-11': False, 't-12': True, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-21': False, 't-23': False, 't-24': False, 't-25': False, 't-26': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-31': False, 't-32': False, 't-33': False, 't-34': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-40': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}}, 'solution_dict': {'s-0': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    assert len(xs) % 2 == 0\n    n = len(xs) // 2\n    a = xs[-1]\n    b = xs[-2]\n    for i in range(n - 1):\n        a = xs[-(i+3)] + a * b\n        b = xs[-(i+2)] + b * b\n    return -a / b\n', 's-1': '\n    if len(xs) % 2 != 0:\n        raise ValueError("xs must have an even number of coefficients.")\n    if xs[-1] == 0:\n        raise ValueError("The largest non-zero coefficient cannot be zero.")\n\n    # Get the coefficients of the derivative polynomial and find its roots\n    derivative_coeffs = [xs[i] * (len(xs) - i - 1) for i in range(len(xs)-1)]\n    roots = [x for x in range(-100, 101) if abs(poly(derivative_coeffs, x)) < 1e-6]\n\n    # Iterate over the potential roots and verify that they are actual roots\n    for root in roots:\n        if abs(poly(xs, root)) < 1e-6:\n            return root\n\n    raise ValueError("Could not find a zero point.")\n', 's-2': '\n    degree = len(xs) - 1\n    if degree % 2 != 0 or xs[degree] == 0:\n        raise ValueError("Input list should have even number of coefficients and the highest coefficient should not be zero.")\n    # search for the root\n    a, b = -10.0, 10.0\n    while abs(b - a) > 0.00001:\n        c = (a + b) / 2.0\n        if poly(xs, c) == 0:\n            return c\n        elif poly(xs, c) * poly(xs, a) < 0:\n            b = c\n        else:\n            a = c\n    return c\n', 's-3': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs)\n    \n    # create a new list with normalized coefficients\n    normalized_xs = [x / xs[-2] for x in xs]\n    \n    # define the derivative of the polynomial\n    def dpoly(x):\n        return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(normalized_xs)])\n    \n    # use Newton\'s method to find a zero of the polynomial\n    x = 1.0\n    while abs(poly(normalized_xs, x)) > 1e-6:\n        x = x - poly(normalized_xs, x) / dpoly(x)\n    \n    return round(x, 2)', 's-4': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-2] != 0, "The coefficient list has an odd length or leading coefficient is zero."\n    a, b = xs[-2], xs[-1]  # get the largest non zero coefficients\n    xs = xs[:-2]  # remove the leading and trailing zero coefficients\n    def poly(x):\n        return sum([coeff * pow(x, i) for i, coeff in enumerate(xs)]) + a * pow(x, n-2) + b\n    epsilon = 0.0001  # tolerance for convergence\n    x0 = 1.0  # initial guess\n    while True:\n        f0 = poly(x0)\n        f1 = sum([(i+1) * coeff * pow(x0, i) for i, coeff in enumerate(xs)]) + (n-2) * a * pow(x0, n-3)\n        f2 = sum([(i+1)*i * coeff * pow(x0, i-1) for i, coeff in enumerate(xs)]) + (n-2)*(n-3)*a*pow(x0, n-4)\n        x1 = x0 - 2*f0*f1/(2*f1*f1 - f0*f2)\n        if abs(x1-x0) < epsilon:\n            return x1\n        x0 = x1\n', 's-5': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs)\n    largest_coeff = abs(xs[-1])\n    x = 0\n    for i in range(1000):\n        y = poly(xs, x)\n        if abs(y) < 1e-10:\n            return round(x, 2)\n        y_prime = poly([i * xs[i] for i in range(1, n)], x)\n        x -= y / y_prime\n    raise Exception("Could not find root.")\n', 's-6': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 == 1 or xs[-1] == 0:\n        raise ValueError("Input must have even number of coefficients and non-zero highest coefficient")\n    # Since the polynomial is a quadratic equation, we can use the quadratic formula to find the roots\n    a = xs[-2]\n    b = xs[-3]\n    c = xs[-4]\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / (2 * a)\n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        return root1 if abs(root1) < abs(root2) else root2\n', 's-7': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs)\n    largest_coeff = max(abs(coeff) for coeff in xs)\n    scaling_factor = 1.0 / largest_coeff\n    scaled_xs = [coeff * scaling_factor for coeff in xs]\n\n    def f(x):\n        return poly(scaled_xs, x)\n\n    a, b = -10, 10\n    while abs(b - a) > 1e-9:\n        c = (a + b) / 2\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n    return round((a + b) / 2, 2)\n', 's-8': '\n    n = len(xs)\n    assert n % 2 == 0, "List should have even number of coefficients."\n    assert xs[-1] != 0, "Largest coefficient should be non-zero."\n    a, b = xs[0], xs[1]\n    c, d = xs[-2], xs[-1]\n    x0 = -d / c\n    x1 = -b / a\n    return (x0 + x1) / 2\n', 's-9': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs)//2\n    # Coefficients have to be of even length\n    if len(xs) % 2 != 0:\n        raise ValueError("Coefficients must be even")\n    # Find the largest non-zero coefficient\n    max_coeff = max([abs(x) for x in xs])\n    if max_coeff == 0:\n        return 0\n\n    # Define a function that takes x as input and returns the value of the polynomial at that x.\n    def f(x):\n        return poly(xs, x)\n    \n    # Check if the function has a root in between -1 and 1\n    if f(-1) * f(1) > 0:\n        raise ValueError("No roots in the interval [-1,1]")\n\n    # Use the bisection method to find the root within the [-1,1] interval\n    a, b = -1, 1\n    while abs(a - b) > 1e-9:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        elif f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n\n    return round((a + b) / 2, 2)', 's-10': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 == 1 or xs[-1] == 0:\n        raise ValueError("Input list should have even length and the largest coefficient should be non-zero.")\n    n = len(xs) // 2\n    a = xs[:n]\n    b = xs[n:]\n    f = lambda x: poly(a, x) * poly(b[::-1], -x)\n    x0 = 0\n    x1 = 1\n    while f(x0) * f(x1) > 0:\n        x0 = x1\n        x1 *= 2\n    return bisect(f, x0, x1)\n\n\ndef bisect(f, a, b, tol=1e-6, maxiter=100):\n    """\n    Use bisection method to find a root of a function f.\n\n    Parameters:\n    -----------\n    f : callable\n        The function to find a root of.\n    a, b : float\n        The interval to search for a root. The function must have\n        different signs at the endpoints.\n    tol : float\n        The desired tolerance for the root.\n    maxiter : int\n        The maximum number of iterations to perform.\n\n    Returns:\n    --------\n    float\n        The estimated root of the function.\n    """\n    c = (a + b) / 2\n    i = 0\n    while abs(f(c)) > tol and i < maxiter:\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n        c = (a + b) / 2\n        i += 1\n    return c\n', 's-11': "\n    n = len(xs) - 1\n    assert n % 2 == 0 and xs[n] != 0, 'Invalid input'\n\n    def f(x):\n        return poly(xs, x)\n\n    a, b = -10, 10\n    for i in range(1000):\n        c = (a + b) / 2\n        if f(c) == 0 or abs(b - a) < 1e-9:\n            return c\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n    return (a + b) / 2\n", 's-12': "\n    n = len(xs)\n    assert n % 2 == 0, 'n is odd'\n    assert xs[-1] != 0, 'leading coefficient is 0'\n\n    a = xs[0:int(n/2)]\n    b = xs[int(n/2):][::-1]\n\n    def poly_deriv(xs: list, x: float):\n        return sum([i * xs[i] * math.pow(x, i - 1) for i in range(1, len(xs))])\n\n    x0 = 1.0\n    for i in range(100):\n        fx = poly(a, x0) / poly(b, x0)\n        dfx = poly_deriv(a, x0) / poly(b, x0) - fx * poly_deriv(b, x0) / poly(b, x0)\n        x0 = x0 - fx / dfx\n    return x0\n", 's-13': '\n    a, b = xs[-2], xs[-1]\n    assert a != 0, "Largest non-zero coefficient must be non-zero."\n    assert len(xs) % 2 == 0, "Number of coefficients must be even."\n    \n    c = -b / a\n    return c\n', 's-14': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n - 1] != 0, "Invalid input"\n    a, b = xs[n - 2], xs[n - 1]\n    c = [(-1) * coeff / a for coeff in xs[:-1]]\n    x = 1.0\n    for i in range(100):\n        fx = poly(xs, x)\n        fpx = poly(c, x)\n        x = x - fx / fpx\n    return x\n', 's-15': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    assert len(xs) % 2 == 0 and xs[-1] != 0, "Input should be list of even length with non-zero leading coefficient"\n\n    a, b = xs[0], xs[-1]  # get the values of the coefficients at the ends\n    if a * b > 0:\n        return None  # if both coefficients have the same sign, there is no root\n\n    for x in range(-100, 101):  # iterate over all possible values of x\n        if poly(xs, x) == 0:  # if the polynomial is 0 at this point\n            return x  # return that point as a root\n', 's-16': '\n    n = len(xs)//2\n    a, b = xs[n], xs[n+1]\n    if a == 0:\n        return 0\n    if b == 0:\n        return "Infinity"\n    c = a/b\n    if n % 2 == 1:\n        c = -c\n    return c\n', 's-17': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 != 0:\n        raise ValueError("xs must have even number of coefficients")\n    if xs[-1] == 0:\n        raise ValueError("largest non zero coefficient can\'t be zero")\n    if xs[0] == 0:\n        return 0.0\n    a, b = -1, 1\n    while True:\n        c = (a + b) / 2\n        y = poly(xs, c)\n        if abs(y) < 1e-8:\n            return c\n        elif y > 0:\n            a = c\n        else:\n            b = c\n', 's-18': '\n    assert len(xs) % 2 == 0 and xs[-1] != 0, "Invalid input"\n    \n    a, b = xs[-2:]\n    for i in range(1000):\n        x = (a + b) / 2\n        if poly(xs, x) == 0 or abs(a-b) < 1e-8:\n            return x\n        elif poly(xs, a) * poly(xs, x) < 0:\n            b = x\n        else:\n            a = x\n    return None\n', 's-19': '\n    n = len(xs)\n    assert n % 2 == 0\n    assert abs(xs[-2]) > 0\n    a, b = xs[-2], xs[-1]\n    for i in range(n-2):\n        a, b = xs[-3-i] + a * b, xs[-1-i] + b * a\n    return -a/b\n', 's-20': '\n    if len(xs) % 2 != 0:\n        raise ValueError("Coefficients list should have even number of coefficients")\n\n    # Find the largest non-zero coefficient\n    max_coeff = max([abs(x) for x in xs[:-1]])\n    if max_coeff == 0:\n        return None\n\n    # Scale the polynomial so that the largest non-zero coefficient is 1\n    xs_scaled = [x / max_coeff for x in xs]\n\n    # Find the roots of the polynomial using the numpy library\n    # If there are multiple roots, return the first one\n    import numpy as np\n    roots = np.roots(xs_scaled)\n    for r in roots:\n        if abs(np.imag(r)) < 1e-5:\n            return np.real(r)\n', 's-21': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, "Invalid inputs!"\n\n    # determine the degree of polynomial\n    degree = n // 2\n\n    # create a list of coefficients for the derivative of the polynomial\n    derivative_coeffs = [xs[i]*i for i in range(1, n, 2)]\n\n    # find the roots of the derivative using quadratic formula\n    a, b, c = derivative_coeffs[-3], derivative_coeffs[-2], derivative_coeffs[-1]\n    discriminant = b * b - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        zero = -b / (2 * a)\n        if poly(xs, zero) == 0:\n            return zero\n        else:\n            return None\n    else:\n        zeros = []\n        zero1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        zero2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        if poly(xs, zero1) == 0:\n            zeros.append(zero1)\n        if poly(xs, zero2) == 0:\n            zeros.append(zero2)\n        if len(zeros) == 1:\n            return zeros[0]\n        else:\n            return None\n', 's-22': '\n    n = len(xs) - 1\n    if n % 2 != 0:\n        raise ValueError("List must have even number of coefficients")\n    if xs[n] == 0:\n        raise ValueError("Largest coefficient must be non-zero")\n    a = xs[n - 2] / xs[n]\n    b = xs[n - 1] / xs[n]\n    c = xs[n - 0] / xs[n]\n    q = (a * a - 3 * b) / 9\n    r = (2 * a * a * a - 9 * a * b + 27 * c) / 54\n    disc = q * q * q - r * r\n    term = b / (3 * a)\n    if disc > 0:\n        s = r + math.sqrt(disc)\n        if s < 0:\n            x = -(-s)**(1/3) + term\n        else:\n            x = s**(1/3) + term\n        s = r - math.sqrt(disc)\n        if s < 0:\n            x += -(-s)**(1/3)\n        else:\n            x += s**(1/3)\n        return x\n    elif disc == 0:\n        if r < 0:\n            x = -(-r)**(1/3) + term\n        else:\n            x = r**(1/3) + term\n        return x\n    else:\n        theta = math.acos(r / math.sqrt(q * q * q))\n        x1 = -2 * math.sqrt(q) * math.cos(theta / 3) + term\n        x2 = -2 * math.sqrt(q) * math.cos((theta + 2 * math.pi) / 3) + term\n        x3 = -2 * math.sqrt(q) * math.cos((theta - 2 * math.pi) / 3) + term\n        return x1\n', 's-23': "\n    n = len(xs)\n    assert n % 2 == 0\n    assert xs[-1] != 0\n\n    # find the degree of polynomial\n    degree = n // 2 - 1\n\n    # create a list of coefficients of the derivative of the polynomial\n    dxs = [xs[i] * (degree - i + 1) for i in range(degree)]\n\n    # evaluate the derivative at x=0 to determine the direction of the root\n    dir = -1 if dxs[-1] > 0 else 1\n\n    # find the root using Newton's method\n    x = 1\n    while True:\n        y = poly(xs, x)\n        if abs(y) < 1e-6:\n            return x\n        dy = poly(dxs, x)\n        x = x - dir * y / dy\n", 's-24': '\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError("The list must have an even number of coefficients.")\n    if xs[0] == 0:\n        raise ValueError("The leading coefficient must be non-zero.")\n    a = xs[0]\n    b = xs[-1]\n    if b == 0:\n        raise ValueError("The trailing coefficient must be non-zero.")\n    if n == 2:\n        return -b / a\n    c = xs[-2]\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        raise ValueError("The polynomial has no real roots.")\n    elif d == 0:\n        return -b / (2 * a)\n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a)\n        x2 = (-b - math.sqrt(d)) / (2 * a)\n        if x1 > x2:\n            x1, x2 = x2, x1\n        return x1\n', 's-25': '\n    """\n    Evaluates a zero of a polynomial with coefficients xs. \n\n    Parameters:\n    xs (list): Coefficients of a polynomial.\n\n    Returns:\n    float: Zero point of the polynomial.\n\n    """\n    n = len(xs)\n    assert n % 2 == 0, \'The number of coefficients must be even\'\n    m = n // 2\n\n    a = xs[:m]\n    b = xs[m:]\n    \n    # Solve quadratic equation\n    delta = b[1]**2 - 4*a[2]*b[0]\n    x1 = (-b[1] + math.sqrt(delta)) / (2*a[2])\n    x2 = (-b[1] - math.sqrt(delta)) / (2*a[2])\n\n    # Check which one is the real zero\n    if poly(xs, x1) == 0:\n        return round(x1, 2)\n    elif poly(xs, x2) == 0:\n        return round(x2, 2)\n    else:\n        raise ValueError(\'The provided coefficients have no zero point.\')\n', 's-26': '\n    assert len(xs) % 2 == 0, "The list of coefficients must have an even length."\n    n = len(xs) // 2\n    a = xs[n]\n    b = sum([-coeff for coeff in xs[:n]])\n    c = sum([coeff * (-1)**(i+1) for i, coeff in enumerate(xs[n+1:])])\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return root1 if abs(root1) < abs(root2) else root2\n', 's-27': '\n    """\n    Finds the root of a polynomial with coefficients xs.\n    The function only takes even length lists as input where the highest coefficient is non-zero.\n    """\n    n = len(xs)\n    assert n % 2 == 0 and xs[-1] != 0, "Invalid input"\n    a = xs[-1]\n    b = xs[-2]\n    for i in range(n-3, -1, -2):\n        if xs[i] != 0:\n            a, b = xs[i] + a * b, xs[i] + b * a\n    return -a/b\n', 's-28': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    # Check if the length of coefficients list is even.\n    if len(xs) % 2 != 0:\n        raise ValueError("The length of coefficients list must be even.")\n    \n    # Find the largest non-zero coefficient.\n    largest_coeff = max(abs(coeff) for coeff in xs)\n    if largest_coeff == 0:\n        raise ValueError("All coefficients are zero.")\n    \n    # Create the shifted polynomial.\n    shifted_xs = [coeff / largest_coeff for coeff in xs]\n    shifted_xs[-1] -= 1\n    \n    # Find the zero of the shifted polynomial using Newton\'s method.\n    x0 = 1.0\n    while True:\n        fx = poly(shifted_xs, x0)\n        fpx = poly([i * coeff for i, coeff in enumerate(shifted_xs)][1:], x0)\n        x1 = x0 - fx / fpx\n        if abs(x1 - x0) < 1e-6:\n            break\n        x0 = x1\n    \n    # Return the zero of the original polynomial.\n    return x1 * largest_coeff\n', 's-29': '\n    n = len(xs) - 1\n    if n % 2 != 0 or xs[n] == 0:\n        return None\n\n    a = xs[0::2]\n    b = xs[1::2]\n\n    g = sum(a)\n    h = sum(b)\n\n    if g == 0:\n        return None\n\n    p = h/g\n    q = xs[n]/xs[0]\n\n    t = 1 - p\n    d = t*t - 4*q/g\n\n    if d < 0:\n        return None\n\n    sd = math.sqrt(d)\n    r1 = (t + sd)/2.0\n    r2 = (t - sd)/2.0\n\n    if abs(r1) <= 1:\n        return 1/r1\n    elif abs(r2) <= 1:\n        return 1/r2\n    else:\n        return None\n', 's-30': '\n    n = len(xs) // 2\n    a = xs[-1]\n    b = xs[-2]\n    p = [-b / (2 * a), (b**2 - 4*a*xs[n-1]) / (2 * a)]\n    return poly(p, 0)\n', 's-31': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, "Invalid input"\n    a = xs[0:n//2]\n    b = xs[n//2:]\n    def f(x):\n        return poly(a, x) * poly(b[::-1], x)\n    # Find a starting point\n    for i in range(-10, 11):\n        if f(i) < 0.0:\n            start = i\n            break\n    else:\n        return None\n    # Use bisection method to find zero\n    a, b = start, start+0.1\n    while f(b) < 0.0:\n        a, b = b, b+0.1\n    for _ in range(100):\n        c = (a + b) / 2\n        fc = f(c)\n        if fc == 0.0 or (b - a) / 2 < 1e-10:\n            return c\n        if fc < 0.0:\n            a = c\n        else:\n            b = c\n', 's-32': '\n    n = len(xs) - 1\n    if n % 2 != 0 or xs[n] == 0:\n        return None\n\n    a, b = xs[0], xs[n - 1]\n    if a * b > 0:\n        return None\n\n    x0 = -1.0 * b / a\n    for i in range(30):\n        fx = poly(xs, x0)\n        if abs(fx) < 1e-10:\n            return x0\n        fpx = poly(xs[:-1], x0)\n        x0 -= fx / fpx\n    return x0\n', 's-33': '\n    assert len(xs) % 2 == 0, "Number of coefficients should be even"\n    assert xs[-1] != 0, "Largest coefficient cannot be zero"\n    a = xs[-1]\n    b = xs[-2]\n    c = poly(xs[:-2], -b/a)\n    return -b / (2*a) if abs(c) > abs(poly([2*a]+xs[:-2], -b/a)) else (-b+math.sqrt(b**2-4*a*c))/(2*a)\n', 's-34': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, "Coefficient list not valid"\n    a, b = xs[0:n//2], xs[n//2:n-1]\n    f = lambda x: poly(a, x) - poly(b, x)\n    x0 = 0.0\n    x1 = 1.0\n    while abs(x1 - x0) > 0.0001:\n        x0 = x1\n        x1 = x0 - f(x0) / (poly_derivative(a, x0) - poly_derivative(b, x0))\n    return x1\n', 's-35': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 == 1 or xs[0] == 0:\n        raise ValueError("The list of coefficients must have even length and non-zero first coefficient.")\n    n = len(xs) // 2\n    a = xs[-1]\n    b = sum([coeff * math.pow(-a, n-i) for i, coeff in enumerate(xs[:n])])\n    c = sum([coeff * math.pow(a, i) for i, coeff in enumerate(xs[n:-1], start=1)])\n    return -b / (2*a) if b**2 - 4*a*c >= 0 else None\n', 's-36': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    a = xs[0]\n    b = xs[-2]\n    c = xs[-1]\n    discriminant = b * b - 4 * a * c\n    x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n    if x1 == x2:\n        return x1\n    else:\n        return max(x1, x2)\n', 's-37': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 != 0:\n        raise ValueError("List must have even number of coefficients")\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        raise ValueError("Cannot find zero for a zero polynomial")\n    if xs[-1] != max_coeff:\n        raise ValueError("Largest non zero coefficient must be the last coefficient")\n    a = xs[-2::-2]\n    b = xs[-1::-2]\n    a.reverse()\n    b.reverse()\n    fa = poly(a, 1)\n    fb = poly(b, 1)\n    z = -fb/fa\n    return z\n', 's-38': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, "xs must have even length and non-zero largest coefficient"\n\n    a, b = xs[0], xs[1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            a += xs[i]\n        else:\n            b += xs[i]\n\n    return -b / a\n', 's-39': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, "Invalid input"\n\n    if n == 2:\n        return -1 * xs[0] / xs[1]\n\n    leading_coeff = xs[n-1]\n    reduced_xs = [xs[i] / leading_coeff for i in range(n-1)]\n    reduced_xs.reverse()\n\n    r = 1 + max([abs(coeff) for coeff in reduced_xs])\n    while True:\n        Q = [0] * n\n        Q[0] = -1 * r\n        Q[n-1] = reduced_xs[n-2] - r\n        for i in range(1, n-1):\n            Q[i] = reduced_xs[i-1]\n        solutions = [x for x in np.roots(Q) if np.isreal(x)]\n        real_solutions = [x.real for x in solutions]\n        real_positive_solutions = [x for x in real_solutions if x > 0]\n        if len(real_positive_solutions) == 1:\n            break\n        r = r * 2\n\n    return real_positive_solutions[0]\n', 's-40': '\n    n = len(xs)\n    assert n % 2 == 0, "List must have even number of coefficients"\n    assert xs[n-1] != 0, "Largest coefficient must be non-zero"\n    \n    # define the function whose root we need to find\n    def f(x):\n        return poly(xs, x)\n    \n    # set the initial values for a and b\n    a = -10.0\n    b = 10.0\n    \n    # set the tolerance value\n    tol = 1e-10\n    \n    # set the maximum number of iterations\n    max_iter = 100\n    \n    # perform the bisection method\n    for i in range(max_iter):\n        c = (a + b) / 2.0\n        if f(c) == 0 or (b - a) / 2.0 < tol:\n            return c\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n    \n    return c\n', 's-41': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    n = len(xs) - 1\n    if n % 2 != 0:\n        raise ValueError("List xs must have even number of coefficients")\n    if xs[n] == 0:\n        raise ValueError("Largest coefficient must be non-zero")\n    if n == 0:\n        return None\n    if n == 1:\n        return -xs[0] / xs[1]\n    if n == 2:\n        return (-xs[1] + math.sqrt(xs[1] * xs[1] - 4 * xs[0] * xs[2])) / (2 * xs[2])\n    if n == 3:\n        a, b, c, d = xs\n        p = (3 * a * c - b * b) / (3 * c * c)\n        q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * c * c * c)\n        Q = q / 2 + math.sqrt(q * q / 4 + p * p * p / 27)\n        S = math.pow(Q, 1 / 3)\n        T = math.pow(Q, 1 / 3)\n        return (-b / (3 * c)) + S + T\n    raise ValueError("Polynomial degree larger than 3 is not supported")\n', 's-42': '\n    n = len(xs)\n    assert n % 2 == 0\n    max_nonzero_coeff = max(abs(coeff) for coeff in xs[:-1:2])\n    assert max_nonzero_coeff != 0\n\n    # Since polynomial is guaranteed to have at least one zero,\n    # we can start with x = 0\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if abs(fx) < 1e-9:\n            return x\n        # If polynomial is increasing in the current direction,\n        # we need to move in the opposite direction\n        if fx * poly(xs, x + 0.1) > 0:\n            step = -0.1\n        else:\n            step = 0.1\n        x += step\n', 's-43': '\n    n = len(xs) // 2\n    a = xs[2*n-1]\n    b = xs[2*n-2]\n    x = -b/a\n    return x\n', 's-44': "\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, 'Invalid input'\n    a, b = xs[0], xs[1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            a = a + xs[i]\n        else:\n            b = b + xs[i]\n    return -1 * b / a\n", 's-45': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        a = xs[0::2]\n        b = xs[1::2]\n        p = lambda x: poly(a, x) - poly(b, x)\n        x0 = 0.0\n        x1 = 1.0\n        while abs(x1 - x0) > 1e-6:\n            x0, x1 = x1, x1 - p(x1) * (x1 - x0) / (p(x1) - p(x0))\n        return x1\n', 's-46': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 != 0:\n        raise ValueError("xs must have even number of coefficients")\n    n = len(xs) // 2\n    a = xs[-1]\n    if a == 0:\n        raise ValueError("largest non-zero coefficient must be non-zero")\n    xs = [x / a for x in xs]\n    for i in range(n):\n        xs[i] /= 2 ** i\n    p = xs[:n][::-1]\n    q = xs[n:][::-1]\n    poly_p = lambda x: poly(p, x)\n    poly_q = lambda x: poly(q, x)\n    dp = lambda x: sum([i * p[i] * x ** (i-1) for i in range(1, n+1)])\n    dq = lambda x: sum([i * q[i-1] * x ** i for i in range(1, n+1)])\n    f = lambda x: poly_p(x) * dq(x) + dp(x) * poly_q(x)\n    df = lambda x: poly_p(x) * dq(x, 1) + dq(x) * dp(x, 1) + dp(x) * poly_q(x, 1) + poly_q(x) * dp(x, 1)\n    x0 = 1\n    while True:\n        x1 = x0 - f(x0) / df(x0)\n        if abs(x1 - x0) < 1e-10:\n            return x1\n        x0 = x1\n', 's-47': '\n    n = len(xs)\n    assert n % 2 == 0\n    assert xs[-1] != 0\n\n    a = xs[-1]\n    b = sum(xs[-2::-2]) - sum(xs[-3::-2])\n    c = sum(xs[-4::-2]) - sum(xs[-5::-2])\n    d = sum(xs[-6::-2]) - sum(xs[-7::-2])\n\n    if n == 2:\n        return -a / b\n    elif n == 4:\n        delta = b ** 2 - 4 * a * c\n        return (-b + math.sqrt(delta)) / (2 * a)\n    else:\n        # n == 6\n        p = (3 * a * c - b ** 2) / (3 * a ** 2)\n        q = (2 * b ** 3 - 9 * a * b * c + 27 * a ** 2 * d) / (27 * a ** 3)\n        delta = q ** 2 / 4 + p ** 3 / 27\n\n        if delta > 0:\n            u = (-q / 2 + math.sqrt(delta)) ** (1 / 3)\n            v = (-q / 2 - math.sqrt(delta)) ** (1 / 3)\n            return u + v - b / (3 * a)\n        elif delta == 0:\n            u = (-q / 2) ** (1 / 3)\n            return 2 * u - b / (3 * a)\n        else:\n            t = -q / 2\n            r = math.sqrt(-delta)\n            theta = math.atan2(r, t)\n            rho = (t ** 2 + r ** 2) ** (1 / 6)\n            x1 = 2 * rho * math.cos(theta / 3) - b / (3 * a)\n            x2 = 2 * rho * math.cos((theta + 2 * math.pi) / 3) - b / (3 * a)\n            x3 = 2 * rho * math.cos((theta - 2 * math.pi) / 3) - b / (3 * a)\n            return x1\n', 's-48': '\n    n = len(xs) - 1\n    if n % 2 != 0 or xs[n] == 0:\n        return None\n    \n    # find coefficients of derivative of the polynomial\n    dxs = []\n    for i in range(1, n+1, 2):\n        dxs.append(xs[i] * i)\n    dy = -dxs[0]\n    for i in range(1, len(dxs)):\n        dy = dy / 2 - dxs[i] / (2 * dy)\n    \n    return -dxs[-1] / dy\n', 's-49': '\n    n = len(xs) - 1\n    assert n % 2 == 0, "List must have even number of coefficients"\n    assert abs(xs[n]) > 0, "Largest coefficient must be non-zero"\n    \n    a, b = xs[n-1], xs[n]\n    for i in range(n-2, -1, -2):\n        a, b = xs[i] + a * b, xs[i] + a * b\n    \n    assert b != 0, "Division by zero"\n    \n    return -a / b\n', 's-50': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n - 1] != 0, "List must have even number of coefficients and non-zero largest coefficient"\n    a, b = xs[0], xs[1]\n    for i in range(2, n, 2):\n        a, b = a * xs[i] - b * xs[i - 1], a * xs[i + 1] - b * xs[i]\n    return -b / a\n', 's-51': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 != 0 or xs[0] == 0:\n        raise ValueError("Invalid input")\n    degree = len(xs) - 1\n    if xs[degree] == 0:\n        raise ValueError("Invalid input")\n    sign = -1\n    result = 0\n    for i in range(degree, -1, -1):\n        result += xs[i] * sign\n        sign = -sign\n    return -result / xs[degree]\n', 's-52': '\n    assert len(xs) % 2 == 0 and xs[-1] != 0, "Input does not satisfy the requirements."\n    \n    a, b = xs[-2], xs[-1]\n    c = -poly(xs[:-2], a/b)\n    \n    return a/b + c\n', 's-53': '\n    n = len(xs)\n    assert n % 2 == 0\n    assert xs[0] != 0\n    max_coeff = max(xs, key=abs)\n    k = xs.index(max_coeff)\n\n    # Replace xs with normalized values to avoid numerical errors\n    xs = [x / xs[0] for x in xs]\n    a = xs[k]\n    b = sum(xs[k+1:]) / a\n    c = sum([(-1)**i * coeff / (a**(i+1)) for i, coeff in enumerate(xs[:k])]) / a\n\n    # Solve quadratic equation to find roots\n    discriminant = b**2 - 4*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / 2\n    else:\n        r1 = (-b - math.sqrt(discriminant)) / 2\n        r2 = (-b + math.sqrt(discriminant)) / 2\n        return r1 if abs(r1) < abs(r2) else r2\n', 's-54': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs) - 1\n    a, b = xs[0], xs[n]\n    left, right = -abs(b/a), abs(b/a)\n    while abs(right - left) > 1e-8:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            right = mid\n        else:\n            left = mid\n    return round(left, 2)', 's-55': '\n    n = len(xs)\n    assert n % 2 == 0\n    for i in range(n):\n        if xs[i] != 0:\n            break\n    else:\n        return None\n    if i == 0:\n        return 0.0\n    a, b = xs[i], xs[i+1]\n    for j in range(n):\n        if i != j:\n            x = (xs[j+1] - b) / a\n            if abs(poly(xs, x)) < 1e-9:\n                return x\n    return None\n', 's-56': '\n    # Check if the length of the list is even\n    if len(xs) % 2 != 0:\n        raise ValueError("The list must have an even number of coefficients.")\n\n    # Find the largest non-zero coefficient\n    largest_coeff = max([abs(coeff) for coeff in xs[:-1]])\n    if largest_coeff == 0:\n        raise ValueError("All coefficients are zero.")\n\n    # Calculate the value of x that makes the polynomial zero\n    x = 1\n    while True:\n        y = poly(xs, x)\n        if abs(y) < 1e-6:\n            return x\n        elif y < 0:\n            x += 1\n        else:\n            x -= 1\n', 's-57': '\n    """\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    """\n    if len(xs) % 2 != 0:\n        raise ValueError("The list of coefficients must have an even number of elements")\n    n = len(xs) - 1  # degree of polynomial\n    a = xs[-1] / xs[0]  # reduce coefficients to monic polynomial\n    for i in range(1, n, 2):\n        a_i = xs[i] / xs[0]\n        a -= a_i * a_i / a\n    roots = [complex(0, 0)] * n\n    phi = 2 * math.pi / n\n    for i in range(n):\n        x = 1.5 * a * (1 - math.cos(phi * i))\n        y = 1.5 * a * math.sin(phi * i)\n        for j in range(20):\n            r = poly(xs, complex(x, y))\n            if r == 0:\n                roots[i] = complex(x, y)\n                break\n            dpdx = poly(xs, complex(x + 1e-8, y)) - r\n            dpdy = poly(xs, complex(x, y + 1e-8)) - r\n            if dpdx == 0 and dpdy == 0:\n                break\n            dx = (-r * dpdy) / (dpdx**2 + dpdy**2)\n            dy = (r * dpdx) / (dpdx**2 + dpdy**2)\n            x += dx\n            y += dy\n        else:\n            raise ValueError(f"No convergence after {j} steps")\n    return roots[0].real\n', 's-58': '\n    n = len(xs) - 1\n    if n % 2 != 0 or xs[n] == 0:\n        raise ValueError("The input list should have even number of coefficients with largest non-zero coefficient")\n    \n    def f(x):\n        return poly(xs, x)\n    \n    a, b = -10, 10\n    fa, fb = f(a), f(b)\n    while fa * fb > 0:\n        a, b = a * 2, b * 2\n        fa, fb = f(a), f(b)\n        \n    while abs(b - a) > 1e-9:\n        c = (a + b) / 2\n        fc = f(c)\n        if fa * fc < 0:\n            b, fb = c, fc\n        else:\n            a, fa = c, fc\n            \n    return (a + b) / 2\n', 's-59': '\n    n = len(xs)\n    assert n % 2 == 0\n    assert xs[n-1] != 0\n\n    a = xs[0:n//2]\n    b = xs[n//2:]\n\n    x = 1.0\n    while True:\n        f_x = poly(a, x) * poly(b, x)\n        if abs(f_x) < 1e-9:\n            return x\n\n        dfa = sum([(i+1)*a[i+1] * math.pow(x, i) for i in range(len(a)-1)])\n        dfb = sum([(i+1)*b[i+1] * math.pow(x, i) for i in range(len(b)-1)])\n        df_x = dfa * poly(b, x) + dfb * poly(a, x)\n        x -= f_x / df_x\n', 's-60': '\n    if len(xs) % 2 == 1:\n        raise ValueError("The number of coefficients should be even.")\n    elif xs[-1] == 0:\n        raise ValueError("The largest non-zero coefficient should be non-zero.")\n    else:\n        n = len(xs) // 2\n        a = xs[:n]\n        b = xs[n:]\n        f = lambda x: poly(a, x) / poly(b, x)\n        return optimize.newton(f, x0=1.0)\n', 's-61': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError("The input is invalid.")\n    for i in range(10000):\n        x = i / 1000\n        if poly(xs, x) == 0:\n            return round(x, 2)\n    raise ValueError("No zero could be found in the given range.")\n', 's-62': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, "xs must have even number of coefficients and non-zero largest coefficient"\n\n    a = xs[0:int(n/2)]\n    b = xs[int(n/2):n]\n\n    def f(x):\n        return poly(a, x) - poly(b, x)\n\n    epsilon = 10**(-6)\n    lower = -1000\n    upper = 1000\n\n    while abs(upper - lower) > epsilon:\n        mid = (lower + upper) / 2\n        if f(mid) == 0:\n            return mid\n        elif f(mid) > 0:\n            lower = mid\n        else:\n            upper = mid\n\n    return (lower + upper) / 2\n', 's-63': '\n    """\n    Find a zero point of the polynomial.\n    """\n    assert len(xs) % 2 == 0\n    n = len(xs) // 2\n    while True:\n        a, b = xs[:n], xs[n:]\n        c = -poly(b[1:] + [0], 0) / b[0]\n        xs = a + [c]\n        if abs(poly(xs, c)) < 1e-8:\n            return c\n', 's-64': '\n    assert len(xs) % 2 == 0, "xs must have even number of coefficients"\n    n = len(xs) - 1\n    assert xs[n] != 0, "largest non zero coefficient of xs should be non zero"\n    a, b = xs[0], xs[1]\n    for i in range(2, n + 1, 2):\n        c, d = xs[i], xs[i + 1]\n        if a * d == b * c:\n            return (-b / (2 * a))\n        p, q = (b * c - a * d), (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n        r, s = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a), (2 * c) / (-b + math.sqrt(b ** 2 - 4 * a * c))\n        x1, x2 = q - s * r, p / (q - s * r)\n        if abs(poly(xs, x1)) < abs(poly(xs, x2)):\n            b, c = x1, x2\n        else:\n            b, c = x2, x1\n        a = poly(xs, b)\n    return b\n', 's-65': '\n    n = len(xs)\n    assert n%2 == 0, "Number of coefficients must be even."\n    assert xs[n-1] != 0, "Largest non-zero coefficient must be non-zero."\n    # Make a function g(x) = f(x)/x^(n/2), where f(x) is the polynomial.\n    # Notice that g(0) = f(0)/0 = 0/0 which is undetermined.\n    # However, lim(x->0) g(x) = f\'(0)/(n/2)! is a constant\n    # where f\'(x) is the first derivative of f(x) wrt x.\n    # As f(x) is a polynomial of degree n-1, f\'(x) is a polynomial of degree n-2.\n    # We can compute f\'(x) and f\'(0) using finite differences.\n    # g(x) = f\'(0)/(n/2)! + (x^2/2! + x^3/3! + ... + x^(n/2)/(n/2)!)f\'\'(0) + error(x)\n    # where f\'\'(0) is the second derivative of f(x) wrt x.\n    # error(x) is a polynomial of degree n-3 that vanishes at x=0.\n    # We can solve g(x) = 0 and x^2/2! + x^3/3! + ... + x^(n/2)/(n/2)!f\'\'(0)/f\'(0) = -g(x)/f\'(0)\n    # using Newton-Raphson method starting with initial guess x=1.\n    # We return the root of g(x) as the root of f(x).\n    \n    # Compute f\'(0) and f\'\'(0).\n    f1 = sum([(i+1)*xs[i+1] for i in range(n-1)])\n    f2 = sum([(i+1)*(i+2)*xs[i+2] for i in range(n-2)])\n    \n    # Define the function g(x) for use in Newton-Raphson method.\n    def g(x):\n        r = f1/math.pow(x, n/2) + f2/math.pow(x, n/2-1)\n        for i in range(2, n//2+1):\n            r += math.pow(x, i)/math.factorial(i)*sum([xs[j]*math.prod([j-k+i-1 for k in range(1, i)]) for j in range(i-1, n-i+1)])\n        return r\n    \n    # Define the derivative of g(x) for use in Newton-Raphson method.\n    def dg(x):\n        r = -n/2*f1/math.pow(x, n/2+1) + (n/2-1)*f2/math.pow(x, n/2)\n        for i in range(2, n//2+1):\n            r += math.pow(x, i-1)/math.factorial(i-1)*sum([xs[j]*math.prod([j-k+i-2 for k in range(1, i)]) for j in range(i-1, n-i+1)])\n        return r\n    \n    # Apply Newton-Raphson method to solve for root of g(x).\n    x = 1\n    for i in range(10): # Maximum 10 iterations.\n        x = x - g(x)/dg(x)\n    \n    return x\n', 's-66': '\n    if len(xs) % 2 != 0:\n        raise ValueError("xs must have even number of coefficients")\n    n = len(xs) // 2\n    a = xs[-1] / xs[-2]\n    b = xs[-3] / xs[-2]\n    c = xs[-4] / xs[-2]\n    q = (3 * b - a * a) / 9\n    r = (9 * a * b - 27 * c - 2 * a * a * a) / 54\n    delta = q ** 3 + r ** 2\n    if delta >= 0:\n        s1 = r + math.sqrt(delta)\n        s2 = r - math.sqrt(delta)\n        if s1 >= 0:\n            x1 = -((-s1) ** (1 / 3) + q / (-s1) ** (1 / 3) - a / 3)\n        else:\n            x1 = (-s1) ** (1 / 3) - q / (-s1) ** (1 / 3) - a / 3\n        if s2 >= 0:\n            x2 = -((-s2) ** (1 / 3) - q / (-s2) ** (1 / 3) - a / 3)\n        else:\n            x2 = (s2) ** (1 / 3) - q / (s2) ** (1 / 3) - a / 3\n        return x1 if poly(xs, x1) == 0 else x2\n    else:\n        theta = math.acos(r / math.sqrt(-q ** 3))\n        x1 = 2 * math.sqrt(-q) * math.cos(theta / 3) - a / 3\n        x2 = 2 * math.sqrt(-q) * math.cos((theta + 2 * math.pi) / 3) - a / 3\n        x3 = 2 * math.sqrt(-q) * math.cos((theta - 2 * math.pi) / 3) - a / 3\n        if poly(xs, x1) == 0:\n            return x1\n        elif poly(xs, x2) == 0:\n            return x2\n        else:\n            return x3\n', 's-67': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    """\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    """\n    \n    # Define the derivative of the polynomial\n    def dpoly(xs: list, x: float):\n        return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i != 0])\n    \n    # Define the Newton-Raphson method\n    def newton_raphson(xs: list, x0: float, tolerance: float = 1e-6, max_iterations: int = 100):\n        i = 0\n        while True:\n            i += 1\n            x1 = x0 - poly(xs, x0) / dpoly(xs, x0)\n            if abs(x1 - x0) < tolerance or i >= max_iterations:\n                break\n            x0 = x1\n        return x1\n    \n    # Find the zero using Newton-Raphson method\n    x0 = 0.0\n    while True:\n        x0 -= 0.01\n        if poly(xs, x0) * poly(xs, x0-0.01) < 0:\n            break\n    return round(newton_raphson(xs, x0), 2)', 's-68': '\n    if len(xs) % 2 == 1 or xs[-1] == 0:\n        raise ValueError("List xs must have even length and non-zero leading coefficient.")\n    degree = len(xs) // 2\n    a = xs[:degree+1]\n    b = xs[degree+1:]\n    if a[-1] == 0:\n        a, b = b, a\n    x = -b[0] / a[-1]\n    for i in range(30):\n        f = poly(a, x)\n        df = sum([i*ai*x**(i-1) for i, ai in enumerate(a) if i > 0])\n        dx = -f / df\n        x += dx\n        if abs(dx) < abs(x) * 1e-9:\n            return x\n    return x\n', 's-69': '\n    """\n    Find the zero of a polynomial defined by the coefficients xs.\n\n    Parameters:\n    xs: list: Coefficients of the polynomial\n\n    Returns:\n    float: The value of x such that poly(x) = 0.\n\n    Assumptions:\n    - xs has even number of elements.\n    - The largest non-zero coefficient is guaranteed to be present.\n\n    Examples:\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    if len(xs) % 2 != 0:\n        raise ValueError(\'The list of coefficients should have even number of elements.\')\n\n    # Find the degree of the polynomial\n    degree = len(xs) - 1\n\n    # Check if the coefficient of the highest degree term is zero\n    if xs[degree] == 0:\n        raise ValueError(\'The largest non-zero coefficient is not present.\')\n\n    # Check if the coefficient of the second highest degree term is zero\n    if xs[degree-1] == 0:\n        raise ValueError(\'The second largest non-zero coefficient is not present.\')\n\n    # Divide all coefficients by the largest non-zero coefficient\n    xs_norm = [x/xs[degree] for x in xs]\n\n    # Define the derivative of the polynomial\n    def deriv(x):\n        return sum([(i+1)*xs_norm[i+1]*math.pow(x, i) for i in range(degree)])\n\n    # Set the initial guess to be the average of the first and last roots of the polynomial\n    guess = -xs_norm[degree-1]/xs_norm[degree]\n\n    # Apply Newton\'s method to find the root\n    while abs(poly(xs_norm, guess)) > 1e-8:\n        guess -= poly(xs_norm, guess)/deriv(guess)\n\n    return guess*xs[degree]\n', 's-70': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs) - 1\n    a, b = -1000, 1000\n    while abs(a - b) > 1e-9:\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) <= 0:\n            b = c\n        else:\n            a = c\n    return round((a + b) / 2, 2)', 's-71': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError("xs must have even number of coefficients")\n    n = len(xs) // 2\n    a = xs[n]\n    b = xs[n+1]\n    c = xs[n-1] - xs[n+2]\n    d = xs[n+2] - xs[n-2] - 2 * xs[n+1]\n    e = xs[n-1] - xs[n-3] - xs[n+1] + xs[n+3]\n    x0 = 0\n    for i in range(1000):\n        f = poly(xs, x0)\n        df = a + b * x0 + c * x0 * x0 + d * x0 * x0 * x0 + e * x0 * x0 * x0 * x0\n        x1 = x0 - f / df\n        if abs(x1 - x0) < 1e-12:\n            return round(x1, 2)\n        x0 = x1', 's-72': '\n    if len(xs) % 2 != 0:\n        raise ValueError("List xs should have even number of coefficients.")\n\n    n = len(xs)\n    if xs[n-1] == 0:\n        raise ValueError("Largest non-zero coefficient should be non-zero.")\n\n    a = xs[0:int(n/2)]\n    b = xs[int(n/2):]\n\n    # calculate derivative\n    da = [i * a[i] for i in range(1, len(a))]\n    db = [i * b[i] for i in range(1, len(b))]\n\n    # reverse derivative\n    da.reverse()\n    db.reverse()\n\n    # calculate polynomial\n    def poly(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    # helper function to calculate root\n    def root_helper(f, x0, x1):\n        f0, f1 = f(x0), f(x1)\n        while f1 != 0.0:\n            x2 = x1 - (f1 * (x1 - x0)) / (f1 - f0)\n            x0, x1 = x1, x2\n            f0, f1 = f1, f(x1)\n        return x1\n\n    # find zeros of derivatives\n    if da[-1] != 0:\n        zero_a = root_helper(lambda x: poly(da, x), -1, 1)\n    else:\n        zero_a = root_helper(lambda x: poly(db, x), -1, 1)\n\n    if db[-1] != 0:\n        zero_b = root_helper(lambda x: poly(db, x), -1, 1)\n    else:\n        zero_b = root_helper(lambda x: poly(da, x), -1, 1)\n\n    return (zero_a + zero_b) / 2.0\n', 's-73': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs)\n\n    def find_zero_helper(a, b):\n        if abs(a - b) < 0.0001:\n            return (a + b) / 2.0\n        mid = (a + b) / 2.0\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, a) * poly(xs, mid) < 0:\n            return find_zero_helper(a, mid)\n        else:\n            return find_zero_helper(mid, b)\n\n    return round(find_zero_helper(-10, 10), 2)\n', 's-74': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs)\n\n    # Define the function whose root we want to find\n    def f(x):\n        return poly(xs, x)\n\n    # Use the bisection method to find the root\n    eps = 1e-6\n    a, b = -1000.0, 1000.0\n    while (b - a) > eps:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n    return round((a + b) / 2, 2)', 's-75': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    \n    # Check if xs has even number of coefficients\n    if len(xs) % 2 != 0:\n        raise ValueError("Number of coefficients must be even")\n    \n    # Get the degree of the polynomial\n    deg = len(xs) - 1\n    \n    # Find the largest non-zero coefficient\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        raise ValueError("All coefficients are zero")\n\n    # Normalize the polynomial by dividing each coefficient by the largest non-zero coefficient\n    xs_normalized = [x / largest_coeff for x in xs]\n    \n    # Define the function to find the zero of\n    def f(x):\n        return poly(xs_normalized, x)\n    \n    # Find the zero of the normalized polynomial using the bisection method\n    a, b = -10, 10\n    tol = 1e-6\n    while b - a > tol:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        elif f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n            \n    return round((a + b) / 2, 2)', 's-76': '\n    """\n    Given a list xs of polynomial coefficients, this function calculates the\n    zero of the polynomial f(x) = xs[0] + xs[1] * x + xs[2] * x^2 + ...\n    for which the function value is zero. \n\n    Args:\n    xs (list): A list of even length containing the polynomial coefficients\n\n    Returns:\n    float: The zero of the polynomial\n\n    Raises:\n    ValueError: If the length of xs is odd or the polynomial has no real root\n\n    Examples:\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    if len(xs) % 2 != 0:\n        raise ValueError("The length of xs must be even")\n\n    # If the largest coefficient is zero, there is no real root\n    if xs[0] == 0:\n        raise ValueError("The polynomial has no real root")\n\n    # Find the positive root of the polynomial\n    x = 0\n    for i in range(1000):\n        y = poly(xs, x)\n        if abs(y) < 1e-6:\n            return x\n        dy = poly([i * c for i, c in enumerate(xs)][1:], x)\n        x -= y / dy\n\n    raise ValueError("The polynomial has no real root")\n', 's-77': '\n    n = len(xs)\n    assert n % 2 == 0, "Polynomial must have even number of coefficients."\n    assert xs[n-1] != 0, "Largest coefficient must be non-zero."\n    a = xs[n-1]\n    b = xs[n-2]\n    for i in range(n-2, -1, -2):\n        a = xs[i] + a * b\n        if i == 0:\n            break\n        b = xs[i-1] + b * a\n    return -b / (2*a)\n', 's-78': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 != 0:\n        raise ValueError("List xs must have an even number of coefficients")\n    if xs[-1] == 0:\n        raise ValueError("The largest non-zero coefficient must not be zero")\n    a, b = xs[-1], xs[-2]\n    for i in range(len(xs) - 3, -1, -2):\n        a, b = xs[i] + a * 0, xs[i] + b * a\n    return -b / a\n', 's-79': '\n    n = len(xs) // 2\n    a = xs[0]\n    b = xs[1]\n    c = xs[2]\n    d = xs[3]\n    \n    p = (3 * b - a**2) / (3 * c - b**2)\n    q = (2 * a**3 - 9 * a * b + 27 * d) / (27 * c**2 - 18 * b * c + 4 * b**3)\n    \n    x = (-(q/2) + ((q/2)**2 + (p/3)**3)**0.5)**(1/3) + (-(q/2) - ((q/2)**2 + (p/3)**3)**0.5)**(1/3) - a / (3 * c)\n    \n    return x\n', 's-80': '\n    """\n    Find a zero point x of the polynomial with coefficients xs.\n    xs: list of coefficients of a polynomial.\n    return: a zero point of the polynomial.\n    """\n    n = len(xs) - 1\n    assert n % 2 == 0, "Polynomial must have even number of coefficients"\n    assert xs[n] != 0, "Largest coefficient must be non-zero"\n    def f(x):\n        return poly(xs, x)\n    # Calculate the middle point of the interval.\n    a = -1000.0 # starting from a large negative value\n    b = 1000.0 # starting from a large positive value\n    for i in range(1000):\n        c = (a + b) / 2.0 # calculate the middle point of the interval\n        if f(c) == 0 or abs(b-a) < 1e-9:\n            return c # We found a zero point or reached to the limit of calculation.\n        if f(a) * f(c) < 0:\n            b = c # Move right\n        else:\n            a = c # Move left\n    return c # return the last value of the middle point.\n', 's-81': '\n    if len(xs) % 2 != 0:\n        raise ValueError("xs should have even number of coefficients")\n    n = len(xs) // 2\n    a = xs[0:n]\n    b = xs[n:]\n    if b[-1] == 0:\n        raise ValueError("largest non zero coefficient is zero")\n    c = [-ai / bi for ai, bi in zip(a, b)]\n    return max(c) if n % 2 == 0 else min(c)\n', 's-82': '\n    assert len(xs) % 2 == 0 # even number of coefficients\n    assert xs[-1] != 0 # largest non-zero coefficient\n    a = xs[-1]\n    b = sum([coeff * a for coeff in xs[:-1:2]])\n    c = sum([coeff * a for coeff in xs[1::2]])\n    delta = b ** 2 - 4 * a * c\n    assert delta >= 0 # real solutions\n    x1 = (-b + math.sqrt(delta)) / (2 * a)\n    x2 = (-b - math.sqrt(delta)) / (2 * a)\n    return x1 if x1 == -x2 else None if x1 * x2 > 0 else max(x1, x2)\n', 's-83': '\n    # get degree of the polynomial\n    degree = len(xs) - 1\n    \n    # check if the number of coefficients is even\n    if degree % 2 == 1:\n        return None\n    \n    # find the largest non-zero coefficient\n    max_coeff = max(xs)\n    if max_coeff == 0:\n        return None\n    \n    # calculate the lower and upper bounds for the zero point\n    lower = -abs(max_coeff)\n    upper = abs(max_coeff)\n    \n    # use binary search to find the zero point\n    while lower <= upper:\n        mid = (lower + upper) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) < 0:\n            lower = mid + 0.000001\n        else:\n            upper = mid - 0.000001\n    return None\n', 's-84': '\n    n = len(xs)\n    assert n % 2 == 0\n    assert xs[0] != 0\n    assert xs[-1] != 0\n\n    a = xs[0]\n    b = xs[-1]\n    xs = [xi/a for xi in xs]\n    xs = [xi/xs[-1] for xi in xs]\n    xs = xs[:-1]\n\n    x = -b/a\n    for i in range(100):\n        fx = poly(xs, x)\n        fpx = sum([(i+1)*xi*math.pow(x, i) for i, xi in enumerate(xs)])\n        dx = fx/fpx\n        x = x - dx\n        if abs(dx) < 1e-15:\n            return x\n    return None\n', 's-85': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    \n    # Find the midpoint of the range to search.\n    a = -10\n    b = 10\n    while poly(xs, a) * poly(xs, b) > 0:\n        a -= 10\n        b += 10\n    \n    # Perform binary search for a root.\n    while abs(a - b) > 1e-8:\n        mid = (a + b) / 2\n        if poly(xs, a) == 0:\n            return a\n        elif poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, a) * poly(xs, mid) < 0:\n            b = mid\n        else:\n            a = mid\n    return round((a + b) / 2, 2)', 's-86': '\n    n = len(xs) - 1\n    if n % 2 != 0 or xs[n] == 0:\n        raise ValueError("Invalid input. Must provide a list with even number of coefficients, and the largest coefficient must be non-zero.")\n    \n    # We will use the bisection method to find the root.\n    a, b = -100, 100 # arbitrary interval that contains the root\n    while abs(b - a) > 1e-10:\n        c = (a + b) / 2.0\n        if poly(xs, c) == 0:\n            return c\n        elif poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n    return (a + b) / 2.0\n', 's-87': '\n    degree = len(xs) - 1\n    a = xs[-1]\n    b = xs[-2]\n    c = xs[-3] if degree >= 3 else 0\n    d = xs[-4] if degree >= 4 else 0\n    e = xs[-5] if degree >= 5 else 0\n    f = xs[-6] if degree >= 6 else 0\n\n    if degree == 2:\n        return -b / (2 * a)\n\n    if degree == 4:\n        p = -b / (4 * a) - (8 * c * e - 3 * pow(d, 2)) / (8 * pow(a, 3))\n        q = pow(b / (2 * a) - (2 * pow(c, 2)) / (3 * a), 3) + (4 * pow(d, 3)) / (27 * pow(a, 2)) + \\\n            (4 * b * c - 8 * a * e) / (3 * a) + (pow((2 * pow(b, 3)) / (a * pow(a, 2)) - (9 * b * c) / (a * a) +\n                                                (27 * d) / a, 2)) / 108\n        u1 = (-q + math.sqrt(q)) / 2\n        u2 = (-q - math.sqrt(q)) / 2\n        x1 = u1 - pow((pow(u1, 3) + p) / 3, 1 / 2) - c / (3 * a)\n        x2 = u2 - pow((pow(u2, 3) + p) / 3, 1 / 2) - c / (3 * a)\n        return x1 if abs(x1) < abs(x2) else x2\n\n    if degree == 6:\n        r = -b / (6 * a) + (c * d - 3 * a * e) / (3 * pow(a, 2))\n        s = pow(b / (2 * a) - (2 * pow(c, 2)) / (3 * a), 3) + \\\n            (27 * pow(d, 2)) / pow(a, 2) - (72 * c * e) / a + \\\n            (2 * pow(c, 3)) / a + (27 * pow(b, 2) * d) / (a * a) - \\\n            (9 * b * c * e) / (a * a) + (81 * a * f) / pow(a, 2)\n        t = pow((3 * s) / (r * r * a * a), 1 / 3)\n        x1 = -b / (6 * a) + (r * t) + (r / t) - c / (3 * a)\n        x2 = complex(-b / (6 * a) + (-1 + pow(3, 1 / 2)) * r * t / 2 + (-1 - pow(3, 1 / 2)) * r / (2 * t) - c / (3 * a))\n        x3 = complex(-b / (6 * a) + (-1 - pow(3, 1 / 2)) * r * t / 2 + (-1 + pow(3, 1 / 2)) * r / (2 * t) - c / (3 * a))\n        return x1 if abs(x1) < abs(x2) and abs(x1) < abs(x3) else x2 if abs(x2) < abs(x3) else x3\n', 's-88': '\n    n = len(xs)\n    assert n % 2 == 0\n    assert abs(xs[n - 1]) > 0\n    a, b = xs[n - 2], xs[n - 1]\n    c = b / a\n    for i in range(n - 3, -1, -2):\n        a, b = xs[i], xs[i + 1] - c * a\n        c = b / a\n    return -c\n', 's-89': '\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n    if len(xs) % 2 != 0:\n        return None\n    if xs[-1] == 0:\n        return None\n    degree = len(xs) - 1\n    leading_coefficient = xs[-1]\n    reduced_polynomial = [xs[i] / leading_coefficient for i in range(degree)]\n    reduced_polynomial.reverse()\n    derivative = [(degree - i) * reduced_polynomial[i] for i in range(degree)]\n    derivative.reverse()\n    x = 1.0\n    for i in range(100):\n        fx = poly(reduced_polynomial, x)\n        if abs(fx) < 1e-9:\n            return x\n        dfx = poly(derivative, x)\n        if abs(dfx) < 1e-9:\n            return None\n        x = x - fx / dfx\n    return None\n', 's-90': '\n    n = len(xs)\n    assert n % 2 == 0 and abs(xs[-1]) > 0, "Input list should have even length and the largest non-zero coefficient"\n    a, b = xs[-2], xs[-1]  # extract the last two coefficients\n    c = a / b\n    d = -c / 2\n    discriminant = c ** 2 / 4 - a\n    x1 = d - math.sqrt(discriminant)\n    x2 = d + math.sqrt(discriminant)\n    return x1 if abs(poly(xs, x1)) < abs(poly(xs, x2)) else x2\n', 's-91': '\n    n = len(xs)\n    assert n % 2 == 0 and xs[n-1] != 0, "list should have even number of coefficients and last coefficient should be non-zero"\n    a = xs[0:n//2] \n    b = xs[n//2:n-1][::-1]\n    def poly(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    def poly_derivative(xs: list, x: float):\n        return sum([i*coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i != 0])\n    x0 = 1.0\n    while True:\n        f = poly(a, x0) * poly(b, x0)\n        if abs(f) < 1e-6:\n            return x0\n        else:\n            x0 = x0 - poly(a, x0) / poly_derivative(a, x0) - poly(b, x0) / poly_derivative(b, x0)\n', 's-92': '\n    assert len(xs) % 2 == 0\n    n = len(xs) // 2\n    a = xs[n]\n    b = sum([-xs[i] * pow(-a/xs[n+1], i) for i in range(n)])\n    return a/xs[n+1] + b\n```\n\nNote that I assume that the input `xs` has an even length, and that the largest non-zero coefficient is at index `n` (i.e. the length of the first half of the list is `n+1`, and the length of the second half is `n`). The implementation uses the formula for solving a quadratic equation with complex roots:\n\n```\na * x^2 + b * x + c = 0\nx = (-b ± sqrt(b^2 - 4ac)) / (2a)\n', 's-93': '\n    n = len(xs) - 1\n    assert n % 2 == 0 and abs(xs[n]) > 0, "Invalid input"\n    a, b = xs[0], xs[n-1]\n    while abs(a) > 1e-9 and abs(b) > 1e-9:\n        x = -a / b\n        a, b = xs[0], xs[n-1]\n        for i in range(1, n, 2):\n            a += xs[i] * x ** (i + 1)\n            if i + 1 < n:\n                b += xs[i+1] * x ** (i + 2)\n        if abs(a) < abs(b):\n            b, a = a, b\n    return -a / b\n', 's-94': '\n    if len(xs) % 2 != 0:\n        raise ValueError("The list should have even number of coefficients.")\n    n = len(xs) - 1\n    if xs[n] == 0:\n        raise ValueError("The largest non-zero coefficient should not be 0.")\n    a = xs[n-2] / xs[n]\n    b = xs[n-1] / xs[n]\n    c = xs[n-3] / xs[n]\n    d = xs[n-4] / xs[n]\n    p = ((-3 * b ** 2) / (8 * a ** 2)) + (c / a)\n    q = ((b ** 3) / (8 * a ** 3)) - ((b * c) / (2 * a ** 2)) + (d / a)\n    if p ** 3 + q ** 2 > 0:\n        z = -2 * a * math.sqrt(p) * math.cos(math.acos((3 * q * math.sqrt(p)) / (2 * p ** (3 / 2))) / 3) - (b / (3 * a))\n        return z\n    elif p == 0 and q == 0:\n        z = - (b / (3 * a))\n        return z\n    else:\n        z1 = (-2 * math.sqrt(p)) - (b / (3 * a)) \n        z2 = (math.sqrt(p) * (math.sqrt(p) - ((3 * q) / p))) - (b / (3 * a))\n        return max(z1, z2)\n', 's-95': '\n    if len(xs) % 2 != 0:\n        raise ValueError("The list should have an even number of coefficients")\n    if xs[-1] == 0:\n        raise ValueError("The largest non-zero coefficient should not be 0")\n        \n    # divide the polynomial into two parts\n    n = len(xs) // 2\n    a = xs[:n]\n    b = xs[n:]\n    \n    # flip the coefficient lists\n    a.reverse()\n    b.reverse()\n    \n    # define the helper function to calculate the product of two polynomials\n    def multiply_poly(a, b):\n        m = len(a)\n        n = len(b)\n        res = [0] * (m + n - 1)\n        for i in range(m):\n            for j in range(n):\n                res[i+j] += a[i] * b[j]\n        return res\n    \n    # multiply the two polynomials\n    prod = multiply_poly(a, b)\n    \n    # define the helper function to find the roots of a polynomial\n    def find_roots(poly):\n        roots = []\n        for i in range(len(poly)-1):\n            if poly[i] == 0:\n                roots.append(i)\n        return roots\n    \n    # find the roots of the product polynomial\n    roots = find_roots(prod)\n    \n    # return the first root\n    return roots[0] / 2.0\n', 's-96': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    f = lambda x: poly(xs, x)\n    a, b = -1000, 1000\n    eps = 1e-9\n    while (b - a) > eps:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        if f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n    return round((a + b) / 2, 2)\n', 's-97': '\nimport math\n\n\ndef poly(xs: list, x: float):\n    """\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    """\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    """ xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    """\n\n    n = len(xs)\n    \n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    \n    a, b = -1000, 1000\n    while abs(b - a) > 1e-9:\n        c = (a + b) / 2\n        if poly(a) * poly(c) <= 0:\n            b = c\n        else:\n            a = c\n    \n    return round(c, 2)  # Round the result to 2 decimal places\n', 's-98': '\n    if len(xs) % 2 == 1:\n        raise ValueError("The list of coefficients should have even length")\n    if xs[-1] == 0:\n        raise ValueError("The largest non-zero coefficient should not be zero")\n        \n    a = xs[-1]\n    b = sum([xs[i] * math.pow(-1, i) for i in range(len(xs) - 1)])\n    c = xs[0]\n\n    return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n', 's-99': '\n    n = len(xs)\n    assert n % 2 == 0\n    assert xs[n-2] != 0\n    \n    a, b = xs[n-1], xs[n-2]\n    for i in range(n-3, -1, -2):\n        a, b = xs[i] + a * 0, xs[i] + b * a\n        \n    return -a / b\n'}}