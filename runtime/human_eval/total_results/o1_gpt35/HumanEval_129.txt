{'task_id': 'HumanEval/129', 'iter_num': 2, 'already_test_oracle_gt': {'t-2': [1, 2, 1], 't-0': [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], 't-4': [1, 2, 1, 2, 1, 2, 1], 't-5': [1, 2, 1, 2], 't-6': [1, 5, 1], 't-7': [3, 1], 't-8': [1, 2, 1, 2, 1], 't-10': [1, 2, 1, 2], 't-13': [2, 3, 2], 't-15': [1, 4, 1, 4, 1], 't-16': [2, 1, 2, 1], 't-17': [5, 1], 't-18': [1, 2, 1], 't-19': [4, 1], 't-20': [1, 3, 1, 3, 1], 't-21': [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], 't-22': [1, 4, 1, 4, 1], 't-24': [1, 2, 1], 't-27': [3, 1, 3, 1, 3, 1, 3, 1], 't-28': [2, 3, 2, 3], 't-29': [1, 2, 1, 2], 't-30': [1, 2, 1, 2], 't-33': [1, 2, 1, 2, 1, 2], 't-37': [1, 2, 1, 2, 1, 2, 1, 2, 1], 't-38': [1, 2, 1], 't-39': [1, 2, 1], 't-41': [2, 3, 2, 3, 2], 't-43': [4, 1], 't-44': [1, 2, 1, 2, 1], 't-45': [1, 2, 1, 2, 1, 2, 1, 2], 't-46': [4, 1], 't-47': [1, 2, 1], 't-48': [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], 't-49': [4, 1, 4, 1, 4, 1]}, 'pass_num_dict': {'s-46': ['t-0', 't-1', 't-2', 't-3', 't-4', 't-5', 't-6', 't-7', 't-8', 't-9', 't-10', 't-13', 't-14', 't-15', 't-16', 't-17', 't-18', 't-19', 't-20', 't-21', 't-22', 't-23', 't-24', 't-25', 't-27', 't-28', 't-29', 't-30', 't-32', 't-33', 't-35', 't-36', 't-37', 't-38', 't-39', 't-41', 't-42', 't-43', 't-44', 't-45', 't-46', 't-47', 't-48', 't-49']}, 'code_test_output': {'s-0': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-1': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-2': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-3': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [], 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': [], 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-4': {'t-0': None, 't-1': [], 't-2': [], 't-3': [], 't-4': None, 't-5': [], 't-6': [], 't-7': [], 't-8': None, 't-9': [], 't-10': [], 't-13': [], 't-14': [], 't-15': None, 't-16': [], 't-17': [], 't-18': [], 't-19': [], 't-20': None, 't-21': None, 't-22': None, 't-23': [], 't-24': [], 't-25': [], 't-27': None, 't-28': [], 't-29': [], 't-30': [], 't-32': [], 't-33': None, 't-35': [], 't-36': [], 't-37': None, 't-38': [], 't-39': [], 't-41': None, 't-42': [], 't-43': [], 't-44': None, 't-45': None, 't-46': [], 't-47': [], 't-48': None, 't-49': None}, 's-5': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': [1], 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': [1], 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-6': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 7, 8], 't-7': [3, 2], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 9, 3, 6, 1], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 9], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 9, 3, 6, 1], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 9, 3, 1, 6, 7, 2, 4], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 9, 8, 5, 6], 't-42': [1, 2, 3], 't-43': [5, 9], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 9], 't-47': [1, 3, 5], 't-48': [2, 3, 4, 5, 6, 10, 7, 8, 9, 1, 12, 13, 14, 15, 11, 16, 17, 18, 19, 20, 25, 24, 23, 22, 21], 't-49': [5, 9, 3, 6, 1, 4]}, 's-7': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-8': {'t-0': [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 10, 11, 7, 6, 5], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 9, 8, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 9, 4], 't-7': [1, 4], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 7], 't-14': [1], 't-15': [1, 6, 2, 8, 7], 't-16': [1, 4, 3, 2], 't-17': [1, 8], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23], 't-22': [1, 6, 2, 8, 7], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 6, 12, 16, 15, 14, 13, 8], 't-28': [1, 9, 8, 5], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 9, 8, 7, 4, 5], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 6], 't-44': [1, 2, 3, 6, 9], 't-45': [1, 2, 3, 4, 8, 12, 16, 15], 't-46': [1, 4], 't-47': [1, 3, 5], 't-48': None, 't-49': [1, 6, 2, 8, 7, 4]}, 's-9': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14], 't-1': [1], 't-2': [1, 2], 't-3': [1], 't-4': [1, 2, 3, 6, 5, 4], 't-5': [1, 2, 5], 't-6': [1, 5], 't-7': [1], 't-8': None, 't-9': [1], 't-10': [1, 2, 4], 't-13': [1, 8], 't-14': [], 't-15': [1, 4, 5, 9], 't-16': [1, 2, 3], 't-17': [1], 't-18': [1, 2], 't-19': [1], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6], 't-22': [1, 4, 5, 9], 't-23': [], 't-24': [1, 2], 't-25': [1], 't-27': [1, 3, 7, 2, 4, 8, 10], 't-28': [1, 7, 4], 't-29': [1, 2, 3], 't-30': [1, 2, 4], 't-32': [1], 't-33': None, 't-35': [], 't-36': [1], 't-37': [1, 2, 3, 6, 5, 4, 7, 8], 't-38': [1, 2], 't-39': [1, 2], 't-41': [2, 3, 4, 7], 't-42': [1, 2], 't-43': [1], 't-44': [1, 2, 3, 6], 't-45': [1, 2, 3, 4, 8, 7, 6], 't-46': [1], 't-47': [1, 2], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24], 't-49': [1, 4, 5, 9, 3]}, 's-10': {'t-0': [1, 1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14], 't-1': [1, 1], 't-2': [1, 1, 2], 't-3': [1, 1], 't-4': [1, 1, 2, 3, 6, 5, 4], 't-5': [1, 1, 2, 5], 't-6': [3, 3, 5], 't-7': [3, 3], 't-8': None, 't-9': [1, 1], 't-10': [1, 1, 2, 4], 't-13': [4, 4, 3], 't-14': [1], 't-15': [5, 5, 4, 1, 6], 't-16': [2, 2, 1, 4], 't-17': [7, 7], 't-18': [1, 1, 2], 't-19': [5, 5], 't-20': None, 't-21': [1, 1, 2, 3, 4, 5, 10, 9, 8, 7, 6], 't-22': [5, 5, 4, 1, 6], 't-23': [5], 't-24': [1, 1, 2], 't-25': [1, 1], 't-27': [5, 5, 4, 2, 7, 3, 1, 6], 't-28': [2, 2, 3, 4], 't-29': [1, 1, 2, 3], 't-30': [1, 1, 2, 4], 't-32': [1, 1], 't-33': None, 't-35': [5], 't-36': [1, 1], 't-37': [1, 1, 2, 3, 6, 5, 4, 7, 8], 't-38': [1, 1, 2], 't-39': [1, 1, 2], 't-41': [10, 10, 7, 4, 3], 't-42': [1, 1, 2], 't-43': [5, 5], 't-44': [1, 1, 2, 3, 6], 't-45': [1, 1, 2, 3, 4, 8, 7, 6], 't-46': [5, 5], 't-47': [1, 1, 2], 't-48': [2, 2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24], 't-49': [5, 5, 4, 1, 6, 2]}, 's-11': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': None, 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': None, 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': None, 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': None, 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': None, 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': None, 't-45': None, 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': None}, 's-12': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 7, 8], 't-7': [3, 2], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 9, 3, 6, 1], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 9], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 9, 3, 6, 1], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 9, 3, 1, 6, 7, 2, 4], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 9, 8, 5, 6], 't-42': [1, 2, 3], 't-43': [5, 9], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 9], 't-47': [1, 3, 5], 't-48': [2, 3, 4, 5, 6, 10, 7, 8, 9, 1, 12, 13, 14, 15, 11, 16, 17, 18, 19, 20, 25, 24, 23, 22, 21], 't-49': [5, 9, 3, 6, 1, 4]}, 's-13': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [], 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': [], 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-14': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': None, 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': None, 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': None, 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': None, 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': None, 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': None, 't-45': None, 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': None}, 's-15': {'t-0': [], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [], 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': [], 't-21': [], 't-22': [], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [], 't-45': [], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': []}, 's-16': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-17': {'t-0': None, 't-1': [1, 3], 't-2': None, 't-3': [1, 4], 't-4': None, 't-5': None, 't-6': None, 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': None, 't-13': None, 't-14': [1], 't-15': None, 't-16': None, 't-17': [7, 8], 't-18': None, 't-19': [5, 4], 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': None, 't-25': [1, 4], 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': [1, 4], 't-33': None, 't-35': [1], 't-36': [1, 4], 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': [5, 4], 't-44': None, 't-45': None, 't-46': [5, 4], 't-47': None, 't-48': None, 't-49': None}, 's-18': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-19': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-20': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, (0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (3, 3), (3, 2), (3, 1), (3, 0)], 't-1': [1, (0, 0), (0, 1)], 't-2': [1, 2, (0, 0), (0, 1), (1, 1)], 't-3': [1, (0, 0), (0, 1)], 't-4': [1, 2, 3, 6, 5, 4, (0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0)], 't-5': [1, 2, 5, (0, 0), (0, 1), (1, 1), (1, 0)], 't-6': [1, 5, (2, 0), (1, 0), (0, 0)], 't-7': [1, (1, 0), (0, 0)], 't-8': [], 't-9': [1, (0, 0), (1, 0)], 't-10': [1, 2, 4, (0, 0), (0, 1), (1, 1), (1, 0)], 't-13': [1, 8, (2, 2), (2, 1), (1, 1)], 't-14': [(0, 0)], 't-15': [1, 4, 5, 9, (1, 1), (1, 0), (0, 0), (0, 1), (0, 2)], 't-16': [1, 2, 3, (0, 1), (0, 0), (1, 0), (1, 1)], 't-17': [1, (1, 1), (0, 1)], 't-18': [1, 2, (0, 0), (0, 1), (0, 2)], 't-19': [1, (1, 1), (1, 0)], 't-20': [], 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0)], 't-22': [1, 4, 5, 9, (1, 1), (1, 0), (0, 0), (0, 1), (0, 2)], 't-23': [(0, 0)], 't-24': [1, 2, (0, 0), (0, 1), (1, 1)], 't-25': [1, (0, 0), (0, 1)], 't-27': [1, 3, 7, 2, 4, 8, 10, (0, 3), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)], 't-28': [1, 7, 4, (2, 2), (1, 2), (0, 2), (0, 1)], 't-29': [1, 2, 3, (0, 0), (0, 1), (0, 2), (1, 2)], 't-30': [1, 2, 4, (0, 0), (1, 0), (1, 1), (0, 1)], 't-32': [1, (0, 0), (0, 1)], 't-33': [], 't-35': [(0, 0)], 't-36': [1, (0, 0), (0, 1)], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, (0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)], 't-38': [1, 2, (0, 0), (0, 1), (0, 2)], 't-39': [1, 2, (0, 0), (0, 1), (0, 2)], 't-41': [2, 3, 4, 7, (2, 2), (2, 1), (2, 0), (1, 0), (1, 1)], 't-42': [1, 2, (0, 0), (0, 1), (0, 2)], 't-43': [1, (1, 1), (1, 0)], 't-44': [1, 2, 3, 6, (0, 0), (0, 1), (0, 2), (1, 2), (1, 1)], 't-45': [1, 2, 3, 4, 8, 7, 6, (0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (1, 1), (1, 0)], 't-46': [1, (1, 1), (1, 0)], 't-47': [1, 2, (0, 0), (1, 0), (1, 1)], 't-48': None, 't-49': [1, 4, 5, 9, 3, (1, 1), (1, 0), (0, 0), (0, 1), (0, 2), (1, 2)]}, 's-21': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-22': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [], 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': [], 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-23': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-24': {'t-0': [1], 't-1': [1], 't-2': [1], 't-3': [1], 't-4': [1], 't-5': [1], 't-6': [3], 't-7': [3], 't-8': None, 't-9': [1], 't-10': [1], 't-13': [4], 't-14': [1], 't-15': [5], 't-16': [2], 't-17': [7], 't-18': [1], 't-19': [5], 't-20': None, 't-21': [1], 't-22': [5], 't-23': [5], 't-24': [1], 't-25': [1], 't-27': [5], 't-28': [2], 't-29': [1], 't-30': [1], 't-32': [1], 't-33': None, 't-35': [5], 't-36': [1], 't-37': [1], 't-38': [1], 't-39': [1], 't-41': [10], 't-42': [1], 't-43': [5], 't-44': [1], 't-45': [1], 't-46': [5], 't-47': [1], 't-48': None, 't-49': [5]}, 's-25': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [1, 4], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [2, 9, 1], 't-14': [1], 't-15': [1, 4, 7, 8, 2], 't-16': [2, 1, 4, 3], 't-17': [5, 1], 't-18': [1, 2, 3], 't-19': [4, 1], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 7, 8, 2], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [4, 8, 10, 11, 12, 16, 15, 14], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [4, 7, 6, 5, 2], 't-42': [1, 2, 3], 't-43': [1, 6], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [4, 1], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-26': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-27': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-28': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-29': {'t-0': [4], 't-1': [3, 4], 't-2': [2, 4], 't-3': [3, 3], 't-4': [3, 9], 't-5': [2], 't-6': [1, 2, 4], 't-7': [1, 4], 't-8': [], 't-9': [2, 4], 't-10': [2], 't-13': [1, 1, 7], 't-14': [1], 't-15': [1, 2, 2], 't-16': [1], 't-17': [1, 1], 't-18': [4, 7, 8], 't-19': [1, 1], 't-20': [], 't-21': [3, 4, 25, 25], 't-22': [1, 2, 2], 't-23': [1], 't-24': [2, 3], 't-25': [3, 3], 't-27': [6, 6, 9], 't-28': [1, 4, 7, 9], 't-29': [3, 6, 8, 9], 't-30': [5, 6, 8, 9], 't-32': [4, 5], 't-33': [], 't-35': [1], 't-36': [3, 3], 't-37': [9], 't-38': [4, 7, 8], 't-39': [9, 10, 11], 't-41': [2, 2, 6], 't-42': [6, 7, 8], 't-43': [1, 2], 't-44': [5, 9, 9], 't-45': [2, 8, 8], 't-46': [1, 1], 't-47': [9, 10, 11], 't-48': [21], 't-49': [6, 9]}, 's-30': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-31': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': [1], 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': [1], 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-32': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [3, 4, 2, 4, 1, 2], 't-2': [2, 4, 3, 1, 2, 4], 't-3': [4, 3, 2, 3, 1, 2], 't-4': [6, 9, 8, 7, 4, 5, 2, 1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [9, 4, 2, 6, 9, 4, 5, 6, 9, 8, 2, 6, 7, 8, 2, 3, 7, 8], 't-7': [1, 4, 2, 4, 3, 2], 't-8': [], 't-9': [2, 4, 3, 4, 1, 3], 't-10': [1, 2, 4, 3], 't-13': [8, 1, 9, 6, 8, 1, 5, 6, 8, 2, 9, 6, 3, 2, 9, 4, 3, 2], 't-14': [4, 3, 2, 1], 't-15': [6, 2, 8, 1, 4, 9, 1, 4, 7, 8, 5, 9, 3, 6, 1], 't-16': [2, 1, 4, 3], 't-17': [8, 1, 5, 1, 7, 5], 't-18': [8, 9, 4, 5, 8, 9, 6, 5, 8, 3, 4, 5, 2, 3, 4, 1, 2, 3], 't-19': [4, 1, 9, 1, 5, 9], 't-20': [], 't-21': [20, 25, 24, 23, 22, 21, 16, 17, 18, 19, 14, 13, 8, 9, 10, 5, 4, 3, 2, 7, 12, 11, 6, 11, 12, 13, 14, 15, 20, 19, 18, 17, 16, 1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [6, 2, 8, 1, 4, 9, 1, 4, 7, 8, 5, 9, 3, 6, 1], 't-23': [2, 8, 7, 6, 1, 4, 3, 9, 5], 't-24': [2, 3, 4, 1, 2, 3], 't-25': [4, 3, 2, 3, 1, 2], 't-27': [11, 10, 2, 7, 6, 1, 3, 9, 4, 8, 10, 11, 12, 16, 15, 14, 5, 9, 3, 1, 6, 7, 2, 4], 't-28': [9, 1, 7, 6, 5, 8, 9, 1, 3, 6, 7, 1, 2, 3, 4, 7], 't-29': [8, 9, 6, 5, 4, 7, 8, 9, 2, 5, 6, 9, 1, 2, 3, 6], 't-30': [8, 9, 6, 4, 2, 7, 8, 9, 3, 4, 6, 9, 1, 3, 5, 6], 't-32': [8, 9, 7, 8, 6, 9, 5, 6, 4, 5, 3, 6, 2, 3, 1, 2], 't-33': [], 't-35': [2, 8, 7, 6, 1, 4, 3, 9, 5], 't-36': [4, 3, 2, 3, 1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [8, 9, 4, 5, 8, 9, 6, 5, 8, 3, 4, 5, 2, 3, 4, 1, 2, 3], 't-39': [15, 16, 12, 11, 15, 16, 10, 14, 15, 9, 10, 14, 8, 12, 16, 7, 11, 12, 6, 7, 11, 5, 6, 7, 4, 8, 7, 3, 4, 8, 2, 3, 4, 1, 2, 3], 't-41': [5, 2, 3, 6, 7, 9, 6, 7, 4, 3, 10, 9, 8, 5, 6], 't-42': [8, 9, 6, 5, 8, 9, 4, 5, 8, 3, 6, 5, 2, 3, 6, 1, 2, 3], 't-43': [8, 2, 7, 8, 6, 2, 1, 6, 4, 1, 3, 6, 9, 3, 5, 9], 't-44': [6, 9, 8, 5, 4, 2, 5, 4, 7, 8, 1, 2, 3, 6, 5], 't-45': [11, 10, 6, 7, 8, 4, 3, 2, 5, 9, 10, 11, 12, 16, 15, 14, 1, 2, 3, 4, 8, 7, 6, 5], 't-46': [4, 1, 9, 1, 5, 9], 't-47': [15, 16, 11, 12, 15, 16, 10, 14, 15, 9, 10, 14, 8, 11, 16, 6, 12, 11, 4, 6, 12, 2, 4, 6, 7, 8, 6, 5, 7, 8, 3, 5, 7, 1, 3, 5], 't-48': [2, 3, 4, 5, 6, 10, 7, 8, 9, 1, 12, 13, 14, 15, 11, 16, 17, 18, 19, 20, 25, 24, 23, 22, 21], 't-49': [6, 1, 4, 7, 8, 2, 5, 9, 3, 6, 1, 4]}, 's-33': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': None, 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': None, 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': None, 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': None, 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-34': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-35': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-36': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 7, 8], 't-7': [3, 2], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 9, 3, 6, 1], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 9], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 9, 3, 6, 1], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 9, 3, 1, 6, 7, 2, 4], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 9, 8, 5, 6], 't-42': [1, 2, 3], 't-43': [5, 9], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 9], 't-47': [1, 3, 5], 't-48': None, 't-49': [5, 9, 3, 6, 1, 4]}, 's-37': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [1, 4], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [2, 9, 1], 't-14': [1], 't-15': [1, 4, 7, 8, 2], 't-16': [2, 1, 4, 3], 't-17': [5, 1], 't-18': [1, 2, 3], 't-19': [4, 1], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 7, 8, 2], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [4, 8, 10, 11, 12, 16, 15, 14], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [4, 7, 6, 5, 2], 't-42': [1, 2, 3], 't-43': [1, 6], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [4, 1], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-38': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-39': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-40': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': None, 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': None, 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': None, 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': None, 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': None, 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': None}, 's-41': {'t-0': None, 't-1': [], 't-2': [], 't-3': [], 't-4': None, 't-5': [], 't-6': [], 't-7': [], 't-8': None, 't-9': [], 't-10': [], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [], 't-18': [], 't-19': [], 't-20': None, 't-21': None, 't-22': [], 't-23': [], 't-24': [], 't-25': [], 't-27': None, 't-28': [], 't-29': [], 't-30': [], 't-32': [], 't-33': None, 't-35': [], 't-36': [], 't-37': None, 't-38': [], 't-39': [], 't-41': [], 't-42': [], 't-43': [], 't-44': [], 't-45': None, 't-46': [], 't-47': [], 't-48': None, 't-49': None}, 's-42': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-43': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [], 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': [], 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-44': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-45': {'t-0': [], 't-1': [], 't-2': [], 't-3': [], 't-4': [], 't-5': [], 't-6': [], 't-7': [], 't-8': None, 't-9': [], 't-10': [], 't-13': [], 't-14': [], 't-15': [], 't-16': [], 't-17': [], 't-18': [], 't-19': [], 't-20': None, 't-21': [], 't-22': [], 't-23': [], 't-24': [], 't-25': [], 't-27': [], 't-28': [], 't-29': [], 't-30': [], 't-32': [], 't-33': None, 't-35': [], 't-36': [], 't-37': None, 't-38': [], 't-39': [], 't-41': [], 't-42': [], 't-43': [], 't-44': [], 't-45': [], 't-46': [], 't-47': [], 't-48': None, 't-49': []}, 's-46': {'t-0': [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], 't-1': [1, 2], 't-2': [1, 2, 1], 't-3': [1, 2], 't-4': [1, 2, 1, 2, 1, 2, 1], 't-5': [1, 2, 1, 2], 't-6': [1, 5, 1], 't-7': [3, 1], 't-8': [1, 2, 1, 2, 1], 't-9': [1, 2], 't-10': [1, 2, 1, 2], 't-13': [2, 3, 2], 't-14': [1], 't-15': [1, 4, 1, 4, 1], 't-16': [2, 1, 2, 1], 't-17': [5, 1], 't-18': [1, 2, 1], 't-19': [4, 1], 't-20': [1, 3, 1, 3, 1], 't-21': [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], 't-22': [1, 4, 1, 4, 1], 't-23': [1], 't-24': [1, 2, 1], 't-25': [1, 2], 't-27': [3, 1, 3, 1, 3, 1, 3, 1], 't-28': [2, 3, 2, 3], 't-29': [1, 2, 1, 2], 't-30': [1, 2, 1, 2], 't-32': [1, 2], 't-33': [1, 2, 1, 2, 1, 2], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 1, 2, 1, 2, 1, 2, 1], 't-38': [1, 2, 1], 't-39': [1, 2, 1], 't-41': [2, 3, 2, 3, 2], 't-42': [1, 2, 1], 't-43': [4, 1], 't-44': [1, 2, 1, 2, 1], 't-45': [1, 2, 1, 2, 1, 2, 1, 2], 't-46': [4, 1], 't-47': [1, 2, 1], 't-48': [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], 't-49': [4, 1, 4, 1, 4, 1]}, 's-47': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 1], 't-3': [1, 2], 't-4': [1, 2, 1, 2, 1, 2, 1], 't-5': [1, 2, 1, 2], 't-6': [1, 5, 1], 't-7': [1, 3], 't-8': [1, 2, 1, 2, 1], 't-9': [1, 2], 't-10': [1, 2, 1, 2], 't-13': [1, 8, 1], 't-14': [1], 't-15': [1, 4, 1, 4, 1], 't-16': [1, 2, 1, 2], 't-17': [1, 5], 't-18': [1, 2, 1], 't-19': [1, 4], 't-20': [1, 3, 1, 3, 1], 't-21': None, 't-22': [1, 4, 1, 4, 1], 't-23': [1], 't-24': [1, 2, 1], 't-25': [1, 2], 't-27': [1, 3, 1, 3, 1, 3, 1, 3], 't-28': [1, 7, 1, 7], 't-29': [1, 2, 1, 2], 't-30': [1, 2, 1, 2], 't-32': [1, 2], 't-33': [1, 2, 1, 2, 1, 2], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 1, 2, 1, 2, 1, 2, 1], 't-38': [1, 2, 1], 't-39': [1, 2, 1], 't-41': [2, 3, 2, 3, 2], 't-42': [1, 2, 1], 't-43': [1, 4], 't-44': [1, 2, 1, 2, 1], 't-45': [1, 2, 1, 2, 1, 2, 1, 2], 't-46': [1, 4], 't-47': [1, 2, 1], 't-48': None, 't-49': [1, 4, 1, 4, 1, 4]}, 's-48': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-49': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-50': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-51': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-52': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-53': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-54': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-55': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-56': {'t-0': None, 't-1': (2, [1, 2]), 't-2': (2, (4, [1, 2, 4])), 't-3': (2, [1, 2]), 't-4': None, 't-5': (2, (5, (6, [1, 2, 5, 6]))), 't-6': (5, (3, [1, 5, 3])), 't-7': (3, [1, 3]), 't-8': None, 't-9': (2, [1, 2]), 't-10': (2, (4, (3, [1, 2, 4, 3]))), 't-13': (8, (6, [1, 8, 6])), 't-14': [1], 't-15': None, 't-16': (2, (3, (4, [1, 2, 3, 4]))), 't-17': (5, [1, 5]), 't-18': (2, (3, [1, 2, 3])), 't-19': (4, [1, 4]), 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': (2, (3, [1, 2, 3])), 't-25': (2, [1, 2]), 't-27': None, 't-28': (7, (4, (3, [1, 7, 4, 3]))), 't-29': (2, (3, (6, [1, 2, 3, 6]))), 't-30': (2, (4, (3, [1, 2, 4, 3]))), 't-32': (2, [1, 2]), 't-33': None, 't-35': [1], 't-36': (2, [1, 2]), 't-37': None, 't-38': (2, (3, [1, 2, 3])), 't-39': (2, (3, [1, 2, 3])), 't-41': None, 't-42': (2, (3, [1, 2, 3])), 't-43': (4, [1, 4]), 't-44': None, 't-45': None, 't-46': (4, [1, 4]), 't-47': (2, (4, [1, 2, 4])), 't-48': None, 't-49': None}, 's-57': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-58': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 7, 8], 't-7': [3, 2], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 9, 3, 6, 1], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 9], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 9, 3, 6, 1], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 9, 3, 1, 6, 7, 2, 4], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 9, 8, 5, 6], 't-42': [1, 2, 3], 't-43': [5, 9], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 9], 't-47': [1, 3, 5], 't-48': None, 't-49': [5, 9, 3, 6, 1, 4]}, 's-59': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': [1], 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': [5], 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': [5], 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-60': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-61': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-62': {'t-0': [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (3, 3), (3, 2), (3, 1), (3, 0)], 't-1': [(0, 0), (0, 1)], 't-2': [(0, 0), (0, 1), (1, 1)], 't-3': [(0, 0), (0, 1)], 't-4': [(0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0)], 't-5': [(0, 0), (0, 1), (1, 1), (1, 0)], 't-6': [(2, 0), (1, 0), (0, 0)], 't-7': [(1, 0), (0, 0)], 't-8': None, 't-9': [(0, 0), (1, 0)], 't-10': [(0, 0), (0, 1), (1, 1), (1, 0)], 't-13': [(2, 2), (2, 1), (1, 1)], 't-14': [(0, 0)], 't-15': [(1, 1), (1, 0), (0, 0), (0, 1), (0, 2)], 't-16': [(0, 1), (0, 0), (1, 0), (1, 1)], 't-17': [(1, 1), (0, 1)], 't-18': [(0, 0), (0, 1), (0, 2)], 't-19': [(1, 1), (1, 0)], 't-20': None, 't-21': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (1, 3), (1, 2), (1, 1), (1, 0), (2, 0)], 't-22': [(1, 1), (1, 0), (0, 0), (0, 1), (0, 2)], 't-23': [(1, 1)], 't-24': [(0, 0), (0, 1), (1, 1)], 't-25': [(0, 0), (0, 1)], 't-27': [(0, 3), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)], 't-28': [(2, 2), (1, 2), (0, 2), (0, 1)], 't-29': [(0, 0), (0, 1), (0, 2), (1, 2)], 't-30': [(0, 0), (1, 0), (1, 1), (0, 1)], 't-32': [(0, 0), (0, 1)], 't-33': None, 't-35': [(1, 1)], 't-36': [(0, 0), (0, 1)], 't-37': [(0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (1, 0), (2, 0), (2, 1), (2, 2)], 't-38': [(0, 0), (0, 1), (0, 2)], 't-39': [(0, 0), (0, 1), (0, 2)], 't-41': [(2, 2), (2, 1), (2, 0), (1, 0), (1, 1)], 't-42': [(0, 0), (0, 1), (0, 2)], 't-43': [(1, 1), (1, 0)], 't-44': [(0, 0), (0, 1), (0, 2), (1, 2), (1, 1)], 't-45': [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (1, 2), (1, 1), (1, 0)], 't-46': [(1, 1), (1, 0)], 't-47': [(0, 0), (1, 0), (1, 1)], 't-48': None, 't-49': [(1, 1), (1, 0), (0, 0), (0, 1), (0, 2), (1, 2)]}, 's-63': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-64': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 1], 't-3': [1, 2], 't-4': [1, 2, 1, 2, 1, 2, 1], 't-5': [1, 2, 1, 2], 't-6': [1, 5, 1], 't-7': [1, 3], 't-8': [1, 2, 1, 2, 1], 't-9': [1, 2], 't-10': [1, 2, 1, 2], 't-13': [1, 8, 1], 't-14': [1], 't-15': [1, 4, 1, 4, 1], 't-16': [1, 2, 1, 2], 't-17': [1, 5], 't-18': [1, 2, 1], 't-19': [1, 4], 't-20': [1, 3, 1, 3, 1], 't-21': None, 't-22': [1, 4, 1, 4, 1], 't-23': [1], 't-24': [1, 2, 1], 't-25': [1, 2], 't-27': [1, 3, 1, 3, 1, 3, 1, 3], 't-28': [1, 7, 1, 7], 't-29': [1, 2, 1, 2], 't-30': [1, 2, 1, 2], 't-32': [1, 2], 't-33': [1, 2, 1, 2, 1, 2], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 1, 2, 1, 2, 1, 2, 1], 't-38': [1, 2, 1], 't-39': [1, 2, 1], 't-41': [2, 3, 2, 3, 2], 't-42': [1, 2, 1], 't-43': [1, 4], 't-44': [1, 2, 1, 2, 1], 't-45': [1, 2, 1, 2, 1, 2, 1, 2], 't-46': [1, 4], 't-47': [1, 2, 1], 't-48': None, 't-49': [1, 4, 1, 4, 1, 4]}, 's-65': {'t-0': None, 't-1': [2, 1], 't-2': [4, 2, 1], 't-3': [2, 1], 't-4': None, 't-5': [6, 5, 2, 1], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [2, 1], 't-10': [3, 4, 2, 1], 't-13': [6, 8, 1], 't-14': [1], 't-15': None, 't-16': [4, 3, 2, 1], 't-17': [5, 1], 't-18': [3, 2, 1], 't-19': [4, 1], 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': [3, 2, 1], 't-25': [2, 1], 't-27': None, 't-28': [3, 4, 7, 1], 't-29': [6, 3, 2, 1], 't-30': [3, 4, 2, 1], 't-32': [2, 1], 't-33': None, 't-35': [1], 't-36': [2, 1], 't-37': None, 't-38': [3, 2, 1], 't-39': [3, 2, 1], 't-41': None, 't-42': [3, 2, 1], 't-43': [4, 1], 't-44': None, 't-45': None, 't-46': [4, 1], 't-47': [4, 2, 1], 't-48': None, 't-49': None}, 's-66': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-67': {'t-0': [1], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 9, 8, 7], 't-5': [1], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [1], 't-9': [1, 3], 't-10': [1], 't-13': [1, 9, 2], 't-14': [1], 't-15': [], 't-16': [2], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 9], 't-20': [3], 't-21': [1, 2, 3, 4, 5, 10, 15, 14, 13, 12, 11], 't-22': [], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 9, 5, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': [1], 't-35': [1], 't-36': [1, 2], 't-37': [1], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [], 't-42': [1, 2, 3], 't-43': [1, 9], 't-44': [1, 2, 3, 6, 9], 't-45': [1, 2, 3, 4, 8, 12, 11, 10], 't-46': [1, 9], 't-47': [1, 3, 5], 't-48': [2], 't-49': []}, 's-68': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 6, 5, 2], 't-6': [3, 7, 8], 't-7': [3, 2], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 9, 3, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [5, 1], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 9, 3, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 9, 3, 1, 6, 7, 2, 4], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 9, 8, 5, 6], 't-42': [1, 2, 3], 't-43': [5, 9], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 3, 5], 't-48': [2, 3, 4, 5, 6, 10, 7, 8, 9, 1, 12, 13, 14, 15, 11, 16, 17, 18, 19, 20, 25, 24, 23, 22, 21], 't-49': [5, 9, 3, 6, 1, 4]}, 's-69': {'t-0': [], 't-1': [1, 2], 't-2': [], 't-3': [1, 2], 't-4': [], 't-5': [], 't-6': [], 't-7': [3, 2], 't-8': [], 't-9': [1, 3], 't-10': [], 't-13': [], 't-14': [1], 't-15': [], 't-16': [], 't-17': [7, 5], 't-18': [], 't-19': [5, 9], 't-20': [], 't-21': [], 't-22': [], 't-23': [5], 't-24': [], 't-25': [1, 2], 't-27': [], 't-28': [], 't-29': [], 't-30': [], 't-32': [1, 2], 't-33': [], 't-35': [5], 't-36': [1, 2], 't-37': [], 't-38': [], 't-39': [], 't-41': [], 't-42': [], 't-43': [5, 9], 't-44': [], 't-45': [], 't-46': [5, 9], 't-47': [], 't-48': [], 't-49': []}, 's-70': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-71': {'t-0': [1, 5, 9, 13, 14, 15, 16, 12, 8, 4, 3, 7, 11, 10, 6, 2], 't-1': [1, 3], 't-2': [1, 3, 4], 't-3': [1, 4], 't-4': [1, 4, 7, 8, 9, 6, 3], 't-5': [1, 6, 5, 2], 't-6': [1, 9, 4], 't-7': [1, 4], 't-8': None, 't-9': [1, 2], 't-10': [1, 3, 4, 2], 't-13': [1, 9, 2], 't-14': [1], 't-15': [1, 8, 2, 6, 3], 't-16': [1, 4, 3, 2], 't-17': [1, 5], 't-18': [1, 6, 7], 't-19': [1, 9], 't-20': None, 't-21': [1, 6, 11, 16, 21, 22, 23, 24, 25, 20, 15], 't-22': [1, 8, 2, 6, 3], 't-23': [1], 't-24': [1, 4, 3], 't-25': [1, 4], 't-27': [1, 6, 12, 16, 15, 11, 7, 3], 't-28': [1, 7, 4, 3], 't-29': [1, 4, 7, 8], 't-30': [1, 2, 7, 8], 't-32': [1, 4], 't-33': None, 't-35': [1], 't-36': [1, 4], 't-37': [1, 4, 7, 8, 9, 6, 3, 2, 5], 't-38': [1, 6, 7], 't-39': [1, 5, 9], 't-41': [2, 5, 8, 9, 6], 't-42': [1, 4, 7], 't-43': [1, 8], 't-44': [1, 4, 7, 8, 9], 't-45': [1, 5, 9, 13, 14, 15, 16, 12], 't-46': [1, 9], 't-47': [1, 2, 9], 't-48': [2, 1, 12, 20, 25, 24, 23, 22, 21, 16, 11, 10, 6, 5, 7, 15, 17, 18, 14, 8, 4, 3, 9, 13, 19], 't-49': [1, 8, 2, 6, 3, 9]}, 's-72': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-73': {'t-0': None, 't-1': [1, 2], 't-2': None, 't-3': [1, 2], 't-4': None, 't-5': [1, 2, 5, 6], 't-6': None, 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': None, 't-14': [1], 't-15': None, 't-16': [1, 4, 3, 2], 't-17': [1, 5], 't-18': None, 't-19': [1, 4], 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': None, 't-25': [1, 2], 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': [1, 4], 't-44': None, 't-45': None, 't-46': [1, 4], 't-47': None, 't-48': None, 't-49': None}, 's-74': {'t-0': [1, 5, 9, 13, 14, 10, 6, 2, 3, 7, 11, 15, 16, 12, 8, 4], 't-1': [1, 3], 't-2': [1, 3, 4], 't-3': [1, 4], 't-4': [1, 4, 7, 8, 5, 2, 3], 't-5': [1, 6, 5, 2], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [], 't-9': [1, 2], 't-10': [1, 3, 4, 2], 't-13': [1, 9, 2], 't-14': [1], 't-15': [1, 8, 2, 6, 3], 't-16': [1, 4, 3, 2], 't-17': [1, 5], 't-18': [1, 6, 7], 't-19': [1, 9], 't-20': [], 't-21': [1, 6, 11, 16, 21, 22, 17, 12, 7, 2, 3], 't-22': [1, 8, 2, 6, 3], 't-23': [1], 't-24': [1, 4, 3], 't-25': [1, 4], 't-27': [1, 6, 12, 16, 15, 11, 7, 3], 't-28': [1, 7, 4, 3], 't-29': [1, 4, 7, 8], 't-30': [1, 2, 7, 8], 't-32': [1, 4], 't-33': [], 't-35': [1], 't-36': [1, 4], 't-37': [1, 4, 7, 8, 5, 2, 3, 6, 9], 't-38': [1, 6, 7], 't-39': [1, 5, 9], 't-41': [2, 5, 8, 9, 6], 't-42': [1, 4, 7], 't-43': [1, 8], 't-44': [1, 4, 7, 8, 5], 't-45': [1, 5, 9, 13, 14, 10, 6, 2], 't-46': [1, 9], 't-47': [1, 2, 9], 't-48': None, 't-49': [1, 8, 2, 6, 3, 9]}, 's-75': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-76': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-77': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': {(0, 0)}, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': {(0, 0)}, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': {(0, 0)}, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-78': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': [1], 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': [5], 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': [5], 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-79': {'t-0': [1, 5, 9, 13, 14, 10, 6, 2, 3, 7, 11, 15, 16, 12, 8, 4], 't-1': [1, 2], 't-2': [1, 3, 4], 't-3': [1, 2], 't-4': [1, 4, 7, 8, 5, 2, 3], 't-5': [1, 6, 5, 2], 't-6': [2, 4, 9], 't-7': [3, 1], 't-8': [], 't-9': [1, 2], 't-10': [1, 3, 4, 2], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 7, 8, 1], 't-16': [2, 3, 4, 1], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': [], 't-21': [1, 6, 11, 16, 21, 22, 17, 12, 7, 2, 3], 't-22': [5, 4, 7, 8, 1], 't-23': [1], 't-24': [1, 4, 3], 't-25': [1, 2], 't-27': [5, 4, 8, 13, 14, 10, 2, 7], 't-28': [2, 5, 6, 3], 't-29': [1, 4, 5, 2], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [1, 4, 7, 8, 5, 2, 3, 6, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [1, 8], 't-44': [1, 4, 7, 8, 5], 't-45': [1, 5, 9, 13, 14, 10, 6, 2], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 12, 20, 25, 24, 19, 13, 9, 3, 4, 8, 14, 18, 23, 22, 17, 15, 7, 5, 6, 10, 11, 16, 21], 't-49': [5, 4, 7, 8, 1, 6]}, 's-80': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-81': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': None, 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': None, 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': None, 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': None, 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': None}, 's-82': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-83': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 4, 1, 6, 2], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 4, 1, 6, 2], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 4, 2, 7, 3, 1, 6, 12], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 7, 4, 3, 2], 't-42': [1, 2, 3], 't-43': [5, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 4], 't-47': [1, 2, 4], 't-48': [2, 1, 9, 3, 4, 5, 6, 10, 7, 8, 14, 13, 12, 20, 19, 18, 17, 15, 11, 16, 21, 22, 23, 24, 25], 't-49': [5, 4, 1, 6, 2, 8]}, 's-84': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-85': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-86': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 7, 8], 't-7': [3, 2], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 9, 3, 6, 1], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 9], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 9, 3, 6, 1], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 9, 3, 1, 6, 7, 2, 4], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 9, 8, 5, 6], 't-42': [1, 2, 3], 't-43': [5, 9], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 9], 't-47': [1, 3, 5], 't-48': None, 't-49': [5, 9, 3, 6, 1, 4]}, 's-87': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-88': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-89': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': [], 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': [], 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-90': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-91': {'t-0': [1, 5, 9, 13, 14, 10, 6, 2, 3, 7, 11, 15, 16, 12, 8, 4], 't-1': [1, 3], 't-2': [1, 3, 4], 't-3': [1, 4], 't-4': [1, 4, 7, 8, 5, 2, 3], 't-5': [1, 6, 5, 2], 't-6': [3, 5, 1], 't-7': [3, 1], 't-8': None, 't-9': [1, 2], 't-10': [1, 3, 4, 2], 't-13': [4, 5, 7], 't-14': [1], 't-15': [5, 4, 7, 8, 1], 't-16': [2, 3, 4, 1], 't-17': [7, 8], 't-18': [1, 6, 7], 't-19': [5, 4], 't-20': None, 't-21': [1, 6, 11, 16, 21, 22, 17, 12, 7, 2, 3], 't-22': [5, 4, 7, 8, 1], 't-23': [5], 't-24': [1, 4, 3], 't-25': [1, 4], 't-27': [5, 4, 8, 13, 14, 10, 2, 9], 't-28': [2, 5, 8, 9], 't-29': [1, 4, 7, 8], 't-30': [1, 2, 7, 8], 't-32': [1, 4], 't-33': None, 't-35': [5], 't-36': [1, 4], 't-37': [1, 4, 7, 8, 5, 2, 3, 6, 9], 't-38': [1, 6, 7], 't-39': [1, 5, 9], 't-41': [10, 7, 4, 3, 6], 't-42': [1, 4, 7], 't-43': [5, 4], 't-44': [1, 4, 7, 8, 5], 't-45': [1, 5, 9, 13, 14, 10, 6, 2], 't-46': [5, 4], 't-47': [1, 2, 9], 't-48': [2, 1, 12, 20, 25, 24, 19, 13, 9, 3, 4, 8, 14, 18, 23, 22, 17, 15, 7, 5, 6, 10, 11, 16, 21], 't-49': [5, 4, 7, 8, 1, 9]}, 's-92': {'t-0': [1, 2, 3, 4, 8, 12, 16, 15, 11, 7, 6, 10, 14, 7], 't-1': [1], 't-2': [1, 2], 't-3': [1], 't-4': [1, 2, 3, 6, 5], 't-5': [1, 2], 't-6': [3, 7], 't-7': [3], 't-8': None, 't-9': [1], 't-10': [1, 2], 't-13': [4, 3], 't-14': [1], 't-15': [5, 9, 3], 't-16': [2, 1], 't-17': [7], 't-18': [1, 2], 't-19': [5], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 15, 20, 9], 't-22': [5, 9, 3], 't-23': [5], 't-24': [1, 2], 't-25': [1], 't-27': [5, 9, 3, 1, 6, 12], 't-28': [2, 3, 4], 't-29': [1, 2, 3], 't-30': [1, 3, 5], 't-32': [1], 't-33': None, 't-35': [5], 't-36': [1], 't-37': [1, 2, 3, 6, 9, 8, 5], 't-38': [1, 2], 't-39': [1, 2], 't-41': [10, 9, 8], 't-42': [1, 2], 't-43': [5], 't-44': [1, 2, 3], 't-45': [1, 2, 3, 4, 8, 12], 't-46': [5], 't-47': [1, 3], 't-48': [2, 3, 4, 5, 6, 10, 11, 16, 21, 22, 17, 15, 7, 8, 14, 18, 23, 24, 19, 13, 20, 19, 7], 't-49': [5, 9, 3, 6]}, 's-93': {'t-0': None, 't-1': None, 't-2': None, 't-3': None, 't-4': None, 't-5': None, 't-6': None, 't-7': None, 't-8': None, 't-9': None, 't-10': None, 't-13': None, 't-14': None, 't-15': None, 't-16': None, 't-17': None, 't-18': None, 't-19': None, 't-20': None, 't-21': None, 't-22': None, 't-23': None, 't-24': None, 't-25': None, 't-27': None, 't-28': None, 't-29': None, 't-30': None, 't-32': None, 't-33': None, 't-35': None, 't-36': None, 't-37': None, 't-38': None, 't-39': None, 't-41': None, 't-42': None, 't-43': None, 't-44': None, 't-45': None, 't-46': None, 't-47': None, 't-48': None, 't-49': None}, 's-94': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': [1, 4, 5, 9, 3], 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [1, 4, 5, 9, 3], 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [1, 3, 7, 2, 4, 8, 10, 11], 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': None, 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [2, 3, 4, 7, 6], 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': [1, 4, 5, 9, 3, 6]}, 's-95': {'t-0': [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 16, 15, 14, 13], 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': [1, 2, 3, 6, 5, 4, 7], 't-5': [1, 2, 5, 6], 't-6': [3, 7, 8], 't-7': [3, 2], 't-8': None, 't-9': [1, 3], 't-10': [1, 2, 4, 3], 't-13': [4, 3, 2], 't-14': [1], 't-15': [5, 9, 3, 6, 1], 't-16': [2, 1, 4, 3], 't-17': [7, 5], 't-18': [1, 2, 3], 't-19': [5, 9], 't-20': None, 't-21': [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11], 't-22': [5, 9, 3, 6, 1], 't-23': [5], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': [5, 9, 3, 1, 6, 7, 2, 4], 't-28': [2, 3, 4, 7], 't-29': [1, 2, 3, 6], 't-30': [1, 3, 5, 6], 't-32': [1, 2], 't-33': None, 't-35': [5], 't-36': [1, 2], 't-37': [1, 2, 3, 6, 5, 4, 7, 8, 9], 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': [10, 9, 8, 5, 6], 't-42': [1, 2, 3], 't-43': [5, 9], 't-44': [1, 2, 3, 6, 5], 't-45': [1, 2, 3, 4, 8, 7, 6, 5], 't-46': [5, 9], 't-47': [1, 3, 5], 't-48': [2, 3, 4, 5, 6, 10, 7, 8, 9, 1, 12, 13, 14, 15, 11, 16, 17, 18, 19, 20, 25, 24, 23, 22, 21], 't-49': [5, 9, 3, 6, 1, 4]}, 's-96': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 1], 't-3': [1, 2], 't-4': None, 't-5': None, 't-6': [4, 2, 4], 't-7': [3, 2], 't-8': None, 't-9': [1, 2], 't-10': None, 't-13': [4, 5, 7], 't-14': [1], 't-15': None, 't-16': None, 't-17': [5, 1], 't-18': [1, 2, 1], 't-19': [4, 1], 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': [1, 2, 1], 't-25': [1, 2], 't-27': None, 't-28': None, 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 6], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': None, 't-38': [1, 2, 1], 't-39': [1, 2, 1], 't-41': None, 't-42': [1, 2, 1], 't-43': [6, 1], 't-44': [1, 2, 3, 6, 9], 't-45': None, 't-46': [4, 1], 't-47': [1, 2, 1], 't-48': None, 't-49': None}, 's-97': {'t-0': [], 't-1': [1, 2], 't-2': [1, 2, 1], 't-3': [1, 2], 't-4': [], 't-5': [], 't-6': [2, 4, 2], 't-7': [3, 1], 't-8': [], 't-9': [1, 2], 't-10': [], 't-13': [4, 5, 7], 't-14': [1], 't-15': [], 't-16': [], 't-17': [5, 1], 't-18': [1, 2, 1], 't-19': [4, 1], 't-20': [], 't-21': [], 't-22': [], 't-23': [1], 't-24': [1, 2, 1], 't-25': [1, 2], 't-27': [], 't-28': [], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 6], 't-32': [1, 2], 't-33': [], 't-35': [1], 't-36': [1, 2], 't-37': [], 't-38': [1, 2, 1], 't-39': [1, 2, 1], 't-41': [], 't-42': [1, 2, 1], 't-43': [4, 1], 't-44': [1, 2, 3, 6, 9], 't-45': [], 't-46': [4, 1], 't-47': [1, 2, 1], 't-48': [], 't-49': []}, 's-98': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 4], 't-3': [1, 2], 't-4': None, 't-5': [1, 2, 5, 6], 't-6': [1, 5, 3], 't-7': [1, 3], 't-8': None, 't-9': [1, 2], 't-10': [1, 2, 4, 3], 't-13': [1, 8, 6], 't-14': [1], 't-15': None, 't-16': [1, 2, 3, 4], 't-17': [1, 5], 't-18': [1, 2, 3], 't-19': [1, 4], 't-20': None, 't-21': None, 't-22': None, 't-23': [1], 't-24': [1, 2, 3], 't-25': [1, 2], 't-27': None, 't-28': [1, 7, 4, 3], 't-29': [1, 2, 3, 6], 't-30': [1, 2, 4, 3], 't-32': [1, 2], 't-33': None, 't-35': [1], 't-36': [1, 2], 't-37': None, 't-38': [1, 2, 3], 't-39': [1, 2, 3], 't-41': None, 't-42': [1, 2, 3], 't-43': [1, 4], 't-44': None, 't-45': None, 't-46': [1, 4], 't-47': [1, 2, 4], 't-48': None, 't-49': None}, 's-99': {'t-0': None, 't-1': [1, 2], 't-2': [1, 2, 1], 't-3': [1, 2], 't-4': [1, 2, 1, 2, 1, 2, 1], 't-5': [1, 2, 1, 2], 't-6': [1, 5, 1], 't-7': [1, 3], 't-8': [1, 2, 1, 2, 1], 't-9': [1, 2], 't-10': [1, 2, 1, 2], 't-13': [1, 8, 1], 't-14': [1], 't-15': [1, 4, 1, 4, 1], 't-16': [1, 2, 1, 2], 't-17': [1, 5], 't-18': [1, 2, 1], 't-19': [1, 4], 't-20': [1, 3, 1, 3, 1], 't-21': None, 't-22': [1, 4, 1, 4, 1], 't-23': [1], 't-24': [1, 2, 1], 't-25': [1, 2], 't-27': [1, 3, 1, 3, 1, 3, 1, 3], 't-28': [1, 7, 1, 7], 't-29': [1, 2, 1, 2], 't-30': [1, 2, 1, 2], 't-32': [1, 2], 't-33': [1, 2, 1, 2, 1, 2], 't-35': [1], 't-36': [1, 2], 't-37': [1, 2, 1, 2, 1, 2, 1, 2, 1], 't-38': [1, 2, 1], 't-39': [1, 2, 1], 't-41': [2, 3, 2, 3, 2], 't-42': [1, 2, 1], 't-43': [1, 4], 't-44': [1, 2, 1, 2, 1], 't-45': [1, 2, 1, 2, 1, 2, 1, 2], 't-46': [1, 4], 't-47': [1, 2, 1], 't-48': None, 't-49': [1, 4, 1, 4, 1, 4]}}, 'code_test_res': {'s-0': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-1': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-2': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-3': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-4': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-5': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-6': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-7': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-8': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-9': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-10': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-11': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-12': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-13': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-14': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-15': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-16': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-17': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-18': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-19': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-20': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-21': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-22': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-23': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-24': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-25': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-26': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-27': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-28': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-29': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': True, 't-44': False, 't-45': False, 't-46': True, 't-47': False, 't-48': False, 't-49': False}, 's-30': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-31': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-32': {'t-0': True, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': True, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-33': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-34': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-35': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-36': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-37': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-38': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-39': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-40': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-41': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-42': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-43': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-44': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-45': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-46': {'t-0': True, 't-1': True, 't-2': True, 't-3': True, 't-4': True, 't-5': True, 't-6': True, 't-7': True, 't-8': True, 't-9': True, 't-10': True, 't-13': True, 't-14': True, 't-15': True, 't-16': True, 't-17': True, 't-18': True, 't-19': True, 't-20': True, 't-21': True, 't-22': True, 't-23': True, 't-24': True, 't-25': True, 't-27': True, 't-28': True, 't-29': True, 't-30': True, 't-32': True, 't-33': True, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': True, 't-42': True, 't-43': True, 't-44': True, 't-45': True, 't-46': True, 't-47': True, 't-48': True, 't-49': True}, 's-47': {'t-0': False, 't-1': True, 't-2': True, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': True, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-48': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-49': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-50': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-51': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-52': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-53': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-54': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-55': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-56': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-57': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-58': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-59': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-60': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-61': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-62': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-63': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-64': {'t-0': False, 't-1': True, 't-2': True, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': True, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-65': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-66': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-67': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-68': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-69': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-70': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-71': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-72': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-73': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-74': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': True, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-75': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-76': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-77': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-78': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-79': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-80': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-81': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-82': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-83': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-84': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-85': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-86': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-87': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-88': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-89': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-90': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-91': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-92': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-93': {'t-0': False, 't-1': False, 't-2': False, 't-3': False, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': False, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': False, 't-25': False, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': False, 't-33': False, 't-35': False, 't-36': False, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-94': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-95': {'t-0': True, 't-1': True, 't-2': False, 't-3': True, 't-4': True, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': False, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': False, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': False, 't-36': True, 't-37': True, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': True, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-96': {'t-0': False, 't-1': True, 't-2': True, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': True, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-97': {'t-0': False, 't-1': True, 't-2': True, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': False, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': True, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-98': {'t-0': False, 't-1': True, 't-2': False, 't-3': True, 't-4': False, 't-5': True, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': True, 't-17': True, 't-18': True, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': True, 't-25': True, 't-27': False, 't-28': False, 't-29': True, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': True, 't-39': True, 't-41': False, 't-42': False, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}, 's-99': {'t-0': False, 't-1': True, 't-2': True, 't-3': True, 't-4': False, 't-5': False, 't-6': False, 't-7': False, 't-8': False, 't-9': True, 't-10': False, 't-13': False, 't-14': True, 't-15': False, 't-16': False, 't-17': True, 't-18': False, 't-19': False, 't-20': False, 't-21': False, 't-22': False, 't-23': True, 't-24': False, 't-25': True, 't-27': False, 't-28': False, 't-29': False, 't-30': False, 't-32': True, 't-33': False, 't-35': True, 't-36': True, 't-37': False, 't-38': False, 't-39': False, 't-41': False, 't-42': True, 't-43': False, 't-44': False, 't-45': False, 't-46': False, 't-47': False, 't-48': False, 't-49': False}}, 'solution_dict': {'s-0': '\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        m, n = len(grid), len(grid[0])\n        visited.add((i, j))\n        neighbors = []\n        for di, dj in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n            ni, nj = i + di, j + dj\n            if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                neighbors.append((grid[ni][nj], ni, nj))\n        neighbors.sort()\n        for val, ni, nj in neighbors:\n            res = dfs(ni, nj, visited, path + [val])\n            if res:\n                return res\n        visited.remove((i, j))\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, set(), [grid[i][j]])\n            if path:\n                return path\n', 's-1': '\n    n = len(grid)\n    visited = set()\n    paths = []\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            paths.append(path)\n            return\n        visited.add((i, j))\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                dfs(x, y, path + [grid[x][y]])\n        visited.remove((i, j))\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n\n    return min(paths)\n', 's-2': '\n    visited = set()\n    start = [(i,j,grid[i][j])] for i in range(len(grid)) for j in range(len(grid[0]))]\n    heapify(start)\n    while start:\n        x,y,path = heappop(start)\n        if len(path) == k:\n            return path\n        if (x,y) in visited:\n            continue\n        visited.add((x,y))\n        for dx, dy in ((0,1),(0,-1),(1,0),(-1,0)):\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                heappush(start, (nx,ny,path + (grid[nx][ny],)))\n    return []\n', 's-3': '\n    n = len(grid)\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        neighbors = [(i+1,j), (i-1,j), (i,j+1), (i,j-1)]\n        neighbors = [(ni, nj) for ni, nj in neighbors if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited]\n        neighbors.sort(key=lambda x: grid[x[0]][x[1]])\n        for ni, nj in neighbors:\n            res = dfs(ni, nj, visited.copy(), path + [grid[ni][nj]])\n            if res is not None:\n                return res\n    res = []\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, set(), [grid[i][j]])\n            if path is not None:\n                if not res or path < res:\n                    res = path\n    return res\n', 's-4': '\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n\n        visited[i][j] = True\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        results = []\n\n        for x, y in directions:\n            next_i, next_j = i + x, j + y\n\n            if 0 <= next_i < n and 0 <= next_j < n and not visited[next_i][next_j]:\n                results.append(dfs(next_i, next_j, path + [grid[next_i][next_j]]))\n\n        visited[i][j] = False\n        return min(results)\n\n    min_path = []\n\n    for i in range(n):\n        for j in range(n):\n            min_path = min(min_path, dfs(i, j, [grid[i][j]]))\n\n    return min_path\n', 's-5': '\n    n = len(grid)\n    visited = set()\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n\n        visited.add((i, j))\n        res = []\n        for x, y in directions:\n            ni, nj = i + x, j + y\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                res.append((grid[ni][nj], dfs(ni, nj, path + [grid[ni][nj]])))\n\n        return min(res, key=lambda x: x[1])\n\n    # start dfs from each cell to find the minimum path\n    all_paths = []\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                all_paths.append(path)\n\n    # find the lexicographically smallest path\n    return sorted(all_paths)[0]\n', 's-6': '\n    n = len(grid)\n    visited = set()\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if ni < 0 or ni >= n or nj < 0 or nj >= n or (ni, nj) in visited:\n                continue\n            path.append(grid[ni][nj])\n            res = dfs(ni, nj, path, visited)\n            if res:\n                return res\n            path.pop()\n        visited.remove((i, j))\n    \n    for i in range(n):\n        for j in range(n):\n            path = [grid[i][j]]\n            res = dfs(i, j, path, visited)\n            if res:\n                return res\n', 's-7': '\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[i][0], i, 0) for i in range(n)]\n    visited = set((i, 0) for i in range(n))\n    heapq.heapify(heap)\n    while k > 1:\n        val, i, j = heapq.heappop(heap)\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                heapq.heappush(heap, (grid[ni][nj], ni, nj))\n        k -= 1\n    return [heapq.heappop(heap)[0] for _ in range(len(heap))]\n', 's-8': '\n    n = len(grid)\n    # possible moves from the current position\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def dfs(pos, visited, path):\n        # base case: when the path has length k\n        if len(path) == k:\n            return path\n        \n        # iterate over possible moves\n        for move in moves:\n            x, y = pos[0] + move[0], pos[1] + move[1]\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                # add the new position to visited and path\n                new_visited = visited | {(x, y)}\n                new_path = path + [grid[x][y]]\n                # recursive call\n                min_path = dfs((x, y), new_visited, new_path)\n                if min_path:\n                    # return the minimum path found so far\n                    return min_path\n        # if no path found, return None\n        return None\n    \n    # iterate over all possible starting positions\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            visited = {(i, j)}\n            path = [grid[i][j]]\n            # recursive call\n            cur_path = dfs((i, j), visited, path)\n            if cur_path:\n                # update the minimum path found so far\n                if not min_path or cur_path < min_path:\n                    min_path = cur_path\n    # return the minimum path\n    return min_path\n', 's-9': "\n    n = len(grid)\n\n    # First, we create a list of tuples (value, row, column) to keep track\n    # of the cells in the grid and their coordinates.\n    cells = []\n    for i in range(n):\n        for j in range(n):\n            cells.append((grid[i][j], i, j))\n\n    # We sort the cells by their value in ascending order.\n    cells.sort()\n\n    # We initialize a visited set to keep track of the cells we've already\n    # visited in the current path, and a path list to keep track of the cells\n    # we've visited in order.\n    visited = set()\n    path = []\n\n    # We define a recursive helper function to search for the minimum path.\n    def dfs(i, j, steps):\n        # If we've reached the desired number of steps, we add the values of\n        # the cells in the path to our result list and return.\n        if steps == k:\n            result.append([cell[0] for cell in path])\n            return\n\n        # We add the current cell to the visited set and path list.\n        visited.add((i, j))\n        path.append((grid[i][j], i, j))\n\n        # We check all four neighbors of the current cell (if they exist and\n        # haven't been visited), and recursively call dfs on them.\n        if i > 0 and (i-1, j) not in visited:\n            dfs(i-1, j, steps+1)\n        if i < n-1 and (i+1, j) not in visited:\n            dfs(i+1, j, steps+1)\n        if j > 0 and (i, j-1) not in visited:\n            dfs(i, j-1, steps+1)\n        if j < n-1 and (i, j+1) not in visited:\n            dfs(i, j+1, steps+1)\n\n        # We remove the current cell from the visited set and path list\n        # before returning.\n        visited.remove((i, j))\n        path.pop()\n\n    # We initialize our result list to empty.\n    result = []\n\n    # We try starting the path from each cell in the grid, in ascending\n    # order of their value. We stop as soon as we find a path of length k.\n    for cell in cells:\n        dfs(cell[1], cell[2], 1)\n        if result:\n            break\n\n    # We return the lexicographically smallest path we found.\n    return min(result)\n", 's-10': '\n    def dfs(i, j, k):\n        if k == 0:\n            return []\n        \n        res = []\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                visited[ni][nj] = True\n                path = dfs(ni, nj, k - 1)\n                if path is not None:\n                    res.append([grid[i][j]] + path)\n                visited[ni][nj] = False\n        \n        if not res:\n            return None\n        \n        res.sort()\n        return res[0]\n    \n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            path = dfs(i, j, k - 1)\n            if path is not None:\n                return [grid[i][j]] + path\n            visited[i][j] = False\n', 's-11': '\n    n = len(grid)\n    visited = set()\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        res = []\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                res.append(dfs(x, y, path + [grid[x][y]]))\n        visited.remove((i, j))\n        return min(res)\n    \n    ans = []\n    for i in range(n):\n        for j in range(n):\n            ans.append(dfs(i, j, [grid[i][j]]))\n    return min(ans)\n', 's-12': '\n    n = len(grid)\n\n    # A helper function that returns the lexicographically\n    # smallest path of length k starting from the given cell\n    def dfs(cell, visited, path):\n        i, j = cell\n        visited[i][j] = True\n        path.append(grid[i][j])\n\n        if len(path) == k:\n            return path\n\n        # Try all possible neighbors in lexicographically order\n        for ni, nj in sorted([(i - 1, j), (i, j - 1), (i, j + 1), (i + 1, j)]):\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                res = dfs((ni, nj), visited, path)\n                if res:\n                    return res\n\n        # Backtrack\n        visited[i][j] = False\n        path.pop()\n\n        return None\n\n    # Try all possible starting cells in lexicographically order\n    for i in range(n):\n        for j in range(n):\n            visited = [[False] * n for _ in range(n)]\n            path = dfs((i, j), visited, [])\n            if path:\n                return path\n\n    return None\n', 's-13': '\n    N = len(grid)\n    neighbors = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    visited = set()\n    \n    def dfs(curr, count, path):\n        nonlocal min_path\n        \n        if count == k:\n            if not min_path or path < min_path:\n                min_path = path\n            return\n\n        for dx, dy in neighbors:\n            nx, ny = curr[0] + dx, curr[1] + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                dfs((nx, ny), count + 1, path + [grid[nx][ny]])\n                visited.remove((nx, ny))\n\n    min_path = []\n    for i in range(N):\n        for j in range(N):\n            visited.add((i, j))\n            dfs((i, j), 1, [grid[i][j]])\n            visited.remove((i, j))\n            \n    return min_path\n', 's-14': '\n    def dfs(r, c, visited, path):\n        if len(path) == k:\n            return path\n        key = (r, c, tuple(visited))\n        if key in memo:\n            return memo[key]\n        res = []\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:\n                visited.add((nr, nc))\n                res.append(dfs(nr, nc, visited, path + [grid[nr][nc]]))\n                visited.remove((nr, nc))\n        res = sorted(res)\n        memo[key] = res[0]\n        return memo[key]\n\n    n = len(grid)\n    memo = {}\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    res = []\n    for r in range(n):\n        for c in range(n):\n            visited = {(r, c)}\n            res.append(dfs(r, c, visited, [grid[r][c]]))\n    return sorted(res)[0]\n', 's-15': '\n    n = len(grid)\n    def dfs(x, y, cnt, path):\n        if cnt == k:\n            return path\n        ans = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                ans.append(dfs(nx, ny, cnt + 1, path + [grid[nx][ny]]))\n                visited[nx][ny] = False\n        if ans:\n            return min(ans)\n        return []\n    visited = [[False] * n for _ in range(n)]\n    res = []\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            res.append(dfs(i, j, 1, [grid[i][j]]))\n            visited[i][j] = False\n    return min(res)\n', 's-16': '\n    n = len(grid)\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        min_sub_path = None\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                sub_path = dfs(nx, ny, path + [grid[nx][ny]])\n                if sub_path is not None:\n                    if min_sub_path is None or sub_path < min_sub_path:\n                        min_sub_path = sub_path\n                visited.remove((nx, ny))\n        return min_sub_path\n\n    for i in range(n):\n        for j in range(n):\n            visited = {(i, j)}\n            path = dfs(i, j, [grid[i][j]])\n            if path is not None:\n                return path\n', 's-17': '\n    n = len(grid)\n    if k == 1:\n        return [min(min(row) for row in grid)]\n    visited = set()\n    queue = []\n    for i in range(n):\n        for j in range(n):\n            queue.append([(i, j)])\n    while queue:\n        path = queue.pop(0)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n        i, j = path[-1]\n        visited.add((i, j))\n        for ni, nj in [(i-1,j),(i+1,j),(i,j-1),(i,j+1)]:\n            if ni >= 0 and ni < n and nj >= 0 and nj < n and (ni, nj) not in visited:\n                queue.append(path + [(ni, nj)])\n    return None\n', 's-18': '\n    n = len(grid)\n\n    def dfs(i, j, visited, path):\n        visited.add((i, j))\n        if len(path) == k:\n            return path\n        next_cells = []\n        for di, dj in ((-1, 0), (0, 1), (1, 0), (0, -1)):\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                next_cells.append((ni, nj))\n        next_cells.sort(key=lambda cell: grid[cell[0]][cell[1]])\n        for ni, nj in next_cells:\n            path.append(grid[ni][nj])\n            result = dfs(ni, nj, visited, path)\n            if result:\n                return result\n            path.pop()\n        visited.remove((i, j))\n\n    for i in range(n):\n        for j in range(n):\n            path = [grid[i][j]]\n            result = dfs(i, j, set(), path)\n            if result:\n                return result\n', 's-19': '\n    def dfs(r, c, visited, path):\n        if len(path) == k:\n            return path\n        visited.add((r, c))\n        next_cells = [(nr, nc) for nr, nc in ((r-1,c),(r+1,c),(r,c-1),(r,c+1))\n                      if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (nr, nc) not in visited]\n        next_cells.sort(key=lambda x: grid[x[0]][x[1]])\n        for nr, nc in next_cells:\n            result = dfs(nr, nc, visited.copy(), path + [grid[nr][nc]])\n            if result:\n                return result\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            result = dfs(i, j, set(), [grid[i][j]])\n            if result:\n                return result\n', 's-20': '\n    n = len(grid)\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        neighbors = []\n        for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_x, new_y = i + x, j + y\n            if 0 <= new_x < n and 0 <= new_y < n:\n                neighbors.append((grid[new_x][new_y], new_x, new_y))\n        neighbors.sort()\n        for val, x, y in neighbors:\n            if (x, y) not in path:\n                res = dfs(x, y, path + [(x, y)])\n                if res:\n                    return [grid[i][j]] + res\n        return None\n\n    ans = []\n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, [(i, j)])\n            if res:\n                if not ans or ans > res:\n                    ans = res\n    return ans\n', 's-21': '\n    N = len(grid)\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    visited = set()\n    heap = [(grid[i][j], [(i, j)], set([(i, j)])) for i in range(N) for j in range(N)]\n    heapq.heapify(heap)\n\n    while heap:\n        val, path, cur_visited = heapq.heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n        for di, dj in directions:\n            ni, nj = path[-1][0] + di, path[-1][1] + dj\n            if ni >= 0 and ni < N and nj >= 0 and nj < N and (ni, nj) not in cur_visited:\n                new_path = path + [(ni, nj)]\n                new_visited = cur_visited.union(set([(ni, nj)]))\n                heapq.heappush(heap, (val * N * N + grid[ni][nj], new_path, new_visited))                \n', 's-22': '\n    def dfs(i, j, visited, path):\n        nonlocal min_path\n        if len(path) == k:\n            if not min_path or path < min_path:\n                min_path = path[:]\n            return\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                visited[x][y] = True\n                path.append(grid[x][y])\n                dfs(x, y, visited, path)\n                visited[x][y] = False\n                path.pop()\n\n    n = len(grid)\n    min_path = []\n    for i in range(n):\n        for j in range(n):\n            visited = [[False] * n for _ in range(n)]\n            visited[i][j] = True\n            dfs(i, j, visited, [grid[i][j]])\n    return min_path\n', 's-23': '\n    rows, cols = len(grid), len(grid[0])\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        res = None\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < rows and 0 <= y < cols and (x, y) not in visited:\n                new_path = dfs(x, y, visited.copy(), path + [grid[x][y]])\n                if new_path is not None and (res is None or new_path < res):\n                    res = new_path\n        return res\n\n    res = None\n    for i in range(rows):\n        for j in range(cols):\n            path = dfs(i, j, set(), [grid[i][j]])\n            if path is not None and (res is None or path < res):\n                res = path\n    return res\n', 's-24': '\n    n = len(grid)\n    min_path = None\n\n    def backtrack(path, curr_pos):\n        nonlocal min_path\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path\n            return\n        for dr, dc in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            next_row, next_col = curr_pos[0] + dr, curr_pos[1] + dc\n            if 0 <= next_row < n and 0 <= next_col < n and (next_row, next_col) not in path:\n                path.add((next_row, next_col))\n                backtrack(path, (next_row, next_col))\n                path.remove((next_row, next_col))\n\n    for i in range(n):\n        for j in range(n):\n            path = {(i, j)}\n            backtrack(path, (i, j))\n\n    return [grid[row][col] for row, col in min_path]\n', 's-25': "\n    # Number of rows/columns of the grid\n    n = len(grid)\n\n    # Set of visited cells\n    visited = set()\n\n    # Check if cell (i, j) is a valid cell in the grid\n    def is_valid(i, j):\n        return 0 <= i < n and 0 <= j < n\n\n    # Recursively find the minimum path from cell (i, j) of length k\n    def dfs(i, j, path):\n        # If the path is of length k, return it\n        if len(path) == k:\n            return path\n\n        # Add current cell to visited set\n        visited.add((i, j))\n\n        # List of neighbors\n        neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n\n        # Remove invalid neighbors and visited cells\n        neighbors = [(x, y) for x, y in neighbors if is_valid(x, y) and (x, y) not in visited]\n\n        # Sort neighbors by grid value\n        neighbors.sort(key=lambda p: grid[p[0]][p[1]])\n\n        # Try each neighbor recursively\n        for x, y in neighbors:\n            result = dfs(x, y, path + [grid[x][y]])\n            if result:\n                return result\n\n        # Remove current cell from visited set\n        visited.remove((i, j))\n\n        # If no path of length k found, return None\n        return None\n\n    # Try to find a path of length k starting from each cell of the grid\n    path = None\n    for i in range(n):\n        for j in range(n):\n            result = dfs(i, j, [grid[i][j]])\n            if result:\n                # If a path is found, check if it's the minimum path so far\n                if path is None or result < path:\n                    path = result\n\n    # Return the minimum path found\n    return path\n", 's-26': '\n    def dfs(cell, lst, visited):\n        if len(lst) == k:\n            return lst\n        x, y = cell\n        visited.add((x, y))\n        next_cells = []\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                next_cells.append((nx, ny))\n        next_cells.sort(key=lambda c: grid[c[0]][c[1]])\n        for next_cell in next_cells:\n            res = dfs(next_cell, lst + [grid[next_cell[0]][next_cell[1]]], visited)\n            if res:\n                return res\n        visited.remove((x, y))\n    \n    n = len(grid)\n    start_cell = (0, 0)\n    min_path = dfs(start_cell, [grid[0][0]], set())\n    return min_path\n', 's-27': '\n    def dfs(i, j, visited, path):\n        nonlocal min_path\n\n        visited.add((i, j))\n        path.append(grid[i][j])\n\n        if len(path) == k:\n            if not min_path or path < min_path:\n                min_path = path.copy()\n        else:\n            for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                    dfs(ni, nj, visited, path)\n\n        visited.remove((i, j))\n        path.pop()\n\n    n = len(grid)\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, set(), [])\n    return min_path\n', 's-28': "\n    # Define a DFS traversal function to find all possible paths of length k\n    def dfs(cell, path):\n        # Add the current cell's value to the path\n        path.append(grid[cell[0]][cell[1]])\n        # If the path has length k, add it to the list of all paths\n        if len(path) == k:\n            all_paths.append(path)\n            return\n        # Otherwise, continue searching for paths\n        for neighbor in neighbors(cell):\n            if neighbor not in visited:\n                visited.add(neighbor)\n                dfs(neighbor, path.copy())\n                visited.remove(neighbor)\n    \n    # Define a helper function to get the neighbors of a cell\n    def neighbors(cell):\n        i, j = cell\n        for x, y in [(i-1,j), (i+1,j), (i,j-1), (i,j+1)]:\n            if 0 <= x < n and 0 <= y < n:\n                yield (x,y)\n    \n    n = len(grid)\n    all_paths = []\n    visited = set()\n    # Start DFS traversal from each cell and find all possible paths\n    for i in range(n):\n        for j in range(n):\n            visited.add((i,j))\n            dfs((i,j), [])\n            visited.remove((i,j))\n    # Sort all paths lexicographically and return the first one\n    return sorted(all_paths)[0]\n", 's-29': '\n    # dimensions of the grid\n    n = len(grid)\n    # visited set\n    visited = set()\n    # output list\n    res = []\n    # helper function for finding minimum path\n    def dfs(i, j, curr, path):\n        # base case\n        if curr == k:\n            # append the current value to the result list\n            res.append(grid[i][j])\n            return True\n        # add the current cell to visited set\n        visited.add((i, j))\n        # iterate over all neighbor cells\n        for ni, nj in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n            # check if neighbor cell is within the grid and not visited\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                # add the current value to path\n                path.append(grid[i][j])\n                # call the dfs function recursively on neighbor cell\n                if dfs(ni, nj, curr+1, path):\n                    return True\n                # remove the current value from path if the dfs call returns false\n                path.pop()\n        # remove the current cell from visited set if dfs call returns false\n        visited.remove((i, j))\n        # return False if no path is found\n        return False\n\n    # iterate over all cells in the grid and call the dfs function\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, 1, [])\n    # return the lexicographically smallest path\n    return sorted(res)[:k]\n', 's-30': "\n    # get dimensions of grid\n    n = len(grid)\n\n    # initialize the result variable\n    result = None\n\n    # define a recursive function to find all paths of length k\n    def dfs(x, y, path):\n        nonlocal result\n\n        # if we've reached the end of the path, check if it's the minimum path\n        if len(path) == k:\n            if result is None or path < result:\n                result = path[:]\n            return\n\n        # explore all neighboring cells\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n\n            # check if cell is within bounds and not already visited\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] not in path:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                path.pop()\n\n    # try all starting positions\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n\n    # return the minimum path\n    return result\n", 's-31': '\n    # Define the size of the grid\n    n = len(grid)\n\n    # Define a visited set to avoid visiting the same cell more than once\n    visited = set()\n\n    # Define a function to check if a cell is valid (inside the grid and not visited)\n    def is_valid(i, j):\n        return 0 <= i < n and 0 <= j < n and (i, j) not in visited\n\n    # Define a function to get the neighbors of a cell\n    def get_neighbors(i, j):\n        return [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]\n\n    # Define a recursive function to find the minimum path\n    def dfs(i, j, path):\n        # If the path has k elements, return it\n        if len(path) == k:\n            return path\n\n        # Add the current cell to the visited set\n        visited.add((i, j))\n\n        # Get the neighbors of the current cell\n        neighbors = get_neighbors(i, j)\n\n        # Sort the neighbors lexicographically\n        neighbors.sort(key=lambda x: grid[x[0]][x[1]])\n\n        # Try each neighbor recursively\n        for ni, nj in neighbors:\n            if is_valid(ni, nj):\n                result = dfs(ni, nj, path + [grid[ni][nj]])\n                if result:\n                    return result\n\n        # Remove the current cell from the visited set\n        visited.remove((i, j))\n\n    # Try starting the search from each cell in the grid\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                if min_path is None or path < min_path:\n                    min_path = path\n\n    return min_path\n', 's-32': '\n    n = len(grid)\n    path = []\n    visited = set()\n\n    def dfs(r, c, steps):\n        if steps == k:\n            path.append(grid[r][c])\n            return True\n\n        visited.add((r, c))\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:\n                if dfs(nr, nc, steps + 1):\n                    path.append(grid[r][c])\n                    return True\n\n        visited.remove((r, c))\n        return False\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, 1)\n    \n    return list(reversed(path))\n', 's-33': '\n    m = len(grid)\n    n = len(grid[0])\n    visited = set()\n    path = []\n    res = []\n\n    def dfs(i, j):\n        nonlocal visited, path, res\n        \n        # base case: when the path is of length k\n        if len(path) == k:\n            res.append(list(path))\n            return\n        \n        # visit the current cell and add it to the path\n        visited.add((i,j))\n        path.append(grid[i][j])\n        \n        # explore all neighbors of the current cell\n        for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n            if 0 <= x < m and 0 <= y < n and (x,y) not in visited:\n                dfs(x, y)\n        \n        # backtrack by removing the current cell from the path and visited set\n        visited.remove((i,j))\n        path.pop()\n    \n    # start dfs from every cell in the grid\n    for i in range(m):\n        for j in range(n):\n            dfs(i, j)\n    \n    # return the path with minimum lexicographical order\n    return min(res)\n', 's-34': '\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n        neighbors = [(r, c) for r, c in neighbors if 0 <= r < n and 0 <= c < n]\n        neighbors.sort(key=lambda x: grid[x[0]][x[1]])\n        for neighbor in neighbors:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                path.append(grid[neighbor[0]][neighbor[1]])\n                res = dfs(neighbor[0], neighbor[1], path)\n                if res:\n                    return res\n                path.pop()\n                visited.remove(neighbor)\n        return None\n    \n    n = len(grid)\n    visited = set()\n    for i in range(n):\n        for j in range(n):\n            visited.add((i, j))\n            path = [grid[i][j]]\n            res = dfs(i, j, path)\n            if res:\n                return res\n            visited.remove((i, j))\n', 's-35': '\n    n = len(grid)\n    visited = set()\n    queue = [(cell, []) for cell in [(i, j) for i in range(n) for j in range(n)]]\n    queue.sort(key=lambda x: grid[x[0]][x[1]])\n    while queue:\n        curr, path = queue.pop(0)\n        if curr in visited or len(path) > k:\n            continue\n        visited.add(curr)\n        path.append(grid[curr[0]][curr[1]])\n        if len(path) == k:\n            return path\n        for neighbor in [(curr[0]+1, curr[1]), (curr[0]-1, curr[1]), (curr[0], curr[1]+1), (curr[0], curr[1]-1)]:\n            if 0 <= neighbor[0] < n and 0 <= neighbor[1] < n and neighbor not in visited:\n                queue.append((neighbor, path[:]))\n        queue.sort(key=lambda x: grid[x[0]][x[1]])\n    return []\n', 's-36': '\n    n = len(grid)\n    start_points = [(i, j) for i in range(n) for j in range(n)]\n    paths = []\n\n    def backtrack(path, visited):\n        if len(path) == k:\n            paths.append(path)\n            return\n\n        for x, y in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            i, j = path[-1]\n            ni, nj = i + x, j + y\n\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                backtrack(path + [(ni, nj)], visited)\n                visited.remove((ni, nj))\n\n    for start in start_points:\n        visited = set([start])\n        backtrack([start], visited)\n\n    min_path = min(paths)\n    return [grid[i][j] for i, j in min_path]\n', 's-37': '\n    n = len(grid)\n    visited = set()\n\n    def dfs(r, c, path):\n        if len(path) == k:\n            return path\n\n        visited.add((r, c))\n\n        neighbors = []\n        if r > 0 and (r-1, c) not in visited:\n            neighbors.append((r-1, c))\n        if c > 0 and (r, c-1) not in visited:\n            neighbors.append((r, c-1))\n        if r < n-1 and (r+1, c) not in visited:\n            neighbors.append((r+1, c))\n        if c < n-1 and (r, c+1) not in visited:\n            neighbors.append((r, c+1))\n\n        for nr, nc in sorted(neighbors, key=lambda x: grid[x[0]][x[1]]):\n            new_path = dfs(nr, nc, path + [grid[nr][nc]])\n            if new_path is not None:\n                return new_path\n\n        visited.remove((r, c))\n\n    # Start the search from every cell in the grid\n    paths = []\n    for r in range(n):\n        for c in range(n):\n            path = dfs(r, c, [grid[r][c]])\n            if path is not None:\n                paths.append(path)\n\n    # Return the lexicographically smallest path\n    return min(paths)\n', 's-38': '\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n\n        visited.add((i, j))\n        min_path = None\n\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                new_path = dfs(x, y, visited, path + [grid[x][y]])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n\n        visited.remove((i, j))\n        return min_path\n\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, set(), [grid[i][j]])\n            if path is not None:\n                return path\n', 's-39': '\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        nxt = []\n        if i > 0 and (i-1, j) not in visited:\n            nxt.append((i-1, j))\n        if j > 0 and (i, j-1) not in visited:\n            nxt.append((i, j-1))\n        if i < len(grid)-1 and (i+1, j) not in visited:\n            nxt.append((i+1, j))\n        if j < len(grid)-1 and (i, j+1) not in visited:\n            nxt.append((i, j+1))\n        nxt.sort(key=lambda x: grid[x[0]][x[1]])\n        for r, c in nxt:\n            path.append(grid[r][c])\n            res = dfs(r, c, visited, path)\n            if res:\n                return res\n            path.pop()\n        visited.remove((i, j))\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = [grid[i][j]]\n            res = dfs(i, j, set(), path)\n            if res:\n                return res\n', 's-40': '\n    def dfs(i, j, seen, path):\n        if len(path) == k:\n            return path\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        neighbors = [(r, c) for r, c in neighbors if 0 <= r < n and 0 <= c < n]\n        candidates = []\n        for r, c in neighbors:\n            if (r, c) not in seen:\n                seen.add((r, c))\n                candidates.append(dfs(r, c, seen, path + [grid[r][c]]))\n                seen.remove((r, c))\n        return min(candidates)\n\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, {(i, j)}, [grid[i][j]])\n            if path:\n                return path\n', 's-41': '\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    path = []\n\n    def dfs(i, j, cnt):\n        if cnt == k:\n            return path\n        visited[i][j] = True\n        path.append(grid[i][j])\n        res = None\n        for dx, dy in moves:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                if res is None:\n                    res = dfs(x, y, cnt + 1)\n                else:\n                    cur_res = dfs(x, y, cnt + 1)\n                    if cur_res < res:\n                        res = cur_res\n        visited[i][j] = False\n        path.pop()\n        return res\n\n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, 1)\n            if res is not None:\n                return res\n', 's-42': '\n    n = len(grid)\n    visited = set()\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        res = []\n        for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = i + x, j + y\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                res.append(dfs(nx, ny, path + [grid[nx][ny]]))\n        visited.remove((i, j))\n        return min(res, default=[])\n\n    ans = []\n    for i in range(n):\n        for j in range(n):\n            ans = min(ans, dfs(i, j, [grid[i][j]]), default=[], key=lambda x: tuple(x))\n    return ans\n', 's-43': '\n    n = len(grid)\n    min_path = []\n    def dfs(path, curr, visited):\n        nonlocal min_path\n        if len(path) == k:\n            if not min_path or path < min_path:\n                min_path = path\n            return\n        for r, c in [(curr[0] - 1, curr[1]), (curr[0] + 1, curr[1]), (curr[0], curr[1] - 1), (curr[0], curr[1] + 1)]:\n            if 0 <= r < n and 0 <= c < n and (r, c) not in visited:\n                dfs(path + [grid[r][c]], (r, c), visited.union({(r, c)}))\n    for i in range(n):\n        for j in range(n):\n            dfs([grid[i][j]], (i, j), {(i, j)})\n    return min_path\n', 's-44': '\n    n = len(grid)\n    visited = set()\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(curr, path):\n        if len(path) == k:\n            return path\n        visited.add(curr)\n        result = None\n        for dx, dy in directions:\n            x, y = curr[0] + dx, curr[1] + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                new_path = dfs((x, y), path + [grid[x][y]])\n                if new_path is not None:\n                    if result is None or new_path < result:\n                        result = new_path\n        visited.remove(curr)\n        return result\n\n    result = None\n    for i in range(n):\n        for j in range(n):\n            path = dfs((i, j), [grid[i][j]])\n            if path is not None:\n                if result is None or path < result:\n                    result = path\n    return result\n', 's-45': '\n    N = len(grid)\n\n    def dfs(pos, path):\n        if len(path) == k:\n            return path\n\n        x, y = pos\n        neighbors = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n        candidates = []\n\n        for nx, ny in neighbors:\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in path:\n                candidates.append((grid[nx][ny], (nx, ny)))\n\n        candidates.sort()\n\n        for val, nxt_pos in candidates:\n            res = dfs(nxt_pos, path + [nxt_pos])\n            if res:\n                return [grid[x][y]] + res\n\n    res = []\n    for i in range(N):\n        for j in range(N):\n            res = min(res, dfs((i, j), [(i, j)]))\n    return res\n', 's-46': '\n\nimport heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    heap = [(grid[i][j], [(i, j)]) for i in range(n) for j in range(n)]\n    heapq.heapify(heap)\n\n    while heap:\n        curr_val, curr_path = heapq.heappop(heap)\n        if len(curr_path) == k:\n            return [grid[i][j] for i, j in curr_path]\n        curr_pos = curr_path[-1]\n        for di, dj in directions:\n            next_pos = (curr_pos[0] + di, curr_pos[1] + dj)\n            if 0 <= next_pos[0] < n and 0 <= next_pos[1] < n and next_pos not in [pos for _, pos in curr_path]:\n                next_path = curr_path + [next_pos]\n                heapq.heappush(heap, (curr_val + grid[next_pos[0]][next_pos[1]], next_path))\n', 's-47': "\n    n = len(grid)\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    min_path = []\n    min_lexi = float('inf')\n    \n    def dfs(path, i, j, lexi):\n        nonlocal min_lexi, min_path\n        \n        if len(path) == k:\n            if lexi < min_lexi:\n                min_path = list(path)\n                min_lexi = lexi\n            return\n        \n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                dfs(path + [grid[ni][nj]], ni, nj, lexi * 10 + grid[ni][nj])\n    \n    for i in range(n):\n        for j in range(n):\n            dfs([grid[i][j]], i, j, grid[i][j])\n    \n    return min_path\n", 's-48': '\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        neighbors = [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]\n        candidates = []\n        for ni, nj in neighbors:\n            if ni >= 0 and ni < n and nj >= 0 and nj < n and (ni, nj) not in visited:\n                candidates.append((ni, nj))\n        candidates.sort(key=lambda x: grid[x[0]][x[1]])\n        for ni, nj in candidates:\n            visited.add((ni, nj))\n            res = dfs(ni, nj, visited, path + [grid[ni][nj]])\n            if res:\n                return res\n            visited.remove((ni, nj))\n        return None\n\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            visited = {(i, j)}\n            res = dfs(i, j, visited, [grid[i][j]])\n            if res:\n                return res\n    return None\n', 's-49': '\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for x, y in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            r, c = i + x, j + y\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and not visited[r][c]:\n                visited[r][c] = True\n                res = dfs(r, c, path + [grid[r][c]])\n                visited[r][c] = False\n                if res:\n                    if not min_path or res < min_path:\n                        min_path = res\n        return min_path\n    \n    visited = [[False] * len(grid[0]) for _ in range(len(grid))]\n    res = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            path = dfs(i, j, [grid[i][j]])\n            visited[i][j] = False\n            if path:\n                if not res or path < res:\n                    res = path\n    return res\n', 's-50': '\n    n = len(grid)\n    heap = [(grid[i][0], [i], 0) for i in range(n)]\n    res = []\n    while heap:\n        val, path, j = heappop(heap)\n        if len(path) == k:\n            res = path\n            break\n        for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            i = path[-1] + x\n            jj = j + y\n            if 0 <= i < n and 0 <= jj < n and (i, jj) not in path:\n                heappush(heap, (grid[i][jj], path + [i], jj))\n    return [grid[res[i]][res[i+1]] for i in range(k-1)]\n', 's-51': '\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[i][0], [(i, 0)]) for i in range(N)]\n    visited = set(heap)\n    heapify(heap)\n    while k > 1:\n        val, path = heappop(heap)\n        for dx, dy in directions:\n            x, y = path[-1][0] + dx, path[-1][1] + dy\n            if 0 <= x < N and 0 <= y < N and (x, y) not in visited:\n                visited.add((x, y))\n                heappush(heap, (grid[x][y], path + [(x, y)]))\n        k -= 1\n    return [grid[x][y] for x, y in path]\n', 's-52': '\n    def dfs(curr, visited, path):\n        if len(path) == k:\n            return path\n        x, y = curr\n        neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n        neighbors = [(nx, ny) for nx, ny in neighbors if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited]\n        for nx, ny in sorted(neighbors, key=lambda x: grid[x[0]][x[1]]):\n            new_visited = visited.copy()\n            new_visited.add((nx, ny))\n            new_path = dfs((nx, ny), new_visited, path + [grid[nx][ny]])\n            if new_path:\n                return new_path\n        return None\n\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            path = dfs((i, j), {(i, j)}, [grid[i][j]])\n            if path:\n                return path\n', 's-53': '\n    def dfs(curr, visited, path):\n        if len(path) == k:\n            return path\n        visited.add(curr)\n        min_path = None\n        for next_cell in get_neighbors(curr):\n            if next_cell not in visited:\n                new_path = dfs(next_cell, visited, path + [grid[next_cell[0]][next_cell[1]]])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n        visited.remove(curr)\n        return min_path\n    \n    def get_neighbors(cell):\n        row, col = cell\n        neighbors = []\n        for r, c in [(row-1,col),(row+1,col),(row,col-1),(row,col+1)]:\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]):\n                neighbors.append((r,c))\n        return neighbors\n    \n    # main function\n    min_path = None\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            path = dfs((r,c), set(), [grid[r][c]])\n            if path is not None:\n                if min_path is None or path < min_path:\n                    min_path = path\n    return min_path\n', 's-54': '\n    def dfs(i, j, path):\n        path.append(grid[i][j])\n        if len(path) == k:\n            return path\n        min_path = None\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                visited[x][y] = True\n                temp_path = dfs(x, y, path[:])\n                visited[x][y] = False\n                if temp_path and (not min_path or temp_path < min_path):\n                    min_path = temp_path\n        return min_path\n        \n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    res = None\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            path = dfs(i, j, [])\n            visited[i][j] = False\n            if path and (not res or path < res):\n                res = path\n    return res\n', 's-55': '\n    n = len(grid)\n    visited = set()\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n\n        visited.add((i, j))\n        candidates = []\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                candidates.append((grid[ni][nj], ni, nj))\n\n        if not candidates:\n            return None\n\n        candidates.sort()\n        for c in candidates:\n            res = dfs(c[1], c[2], path + [c[0]])\n            if res:\n                return res\n\n        visited.remove((i, j))\n        return None\n\n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res\n', 's-56': '\n    n = len(grid)\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        next_paths = []\n        for dx, dy in moves:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                visited[x][y] = True\n                next_paths.append((grid[x][y], dfs(x, y, path + [grid[x][y]])))\n                visited[x][y] = False\n        return min(next_paths)\n\n    visited = [[False] * n for _ in range(n)]\n    result = []\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            result.append((grid[i][j], dfs(i, j, [grid[i][j]])))\n            visited[i][j] = False\n    return sorted(result)[0][1]\n', 's-57': '\n    def dfs(i, j, path, visited):\n        nonlocal min_path\n        if len(path) == k:\n            if not min_path or path < min_path:\n                min_path = path\n            return\n        for r, c in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n            if 0 <= r < n and 0 <= c < n and (r, c) not in visited:\n                visited.add((r, c))\n                dfs(r, c, path + [grid[r][c]], visited)\n                visited.remove((r, c))\n\n    n = len(grid)\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            visited = {(i, j)}\n            dfs(i, j, [grid[i][j]], visited)\n    return min_path\n', 's-58': '\n    N = len(grid)\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n\n        neighbors = []\n        if i > 0:\n            neighbors.append((i - 1, j))\n        if i < N - 1:\n            neighbors.append((i + 1, j))\n        if j > 0:\n            neighbors.append((i, j - 1))\n        if j < N - 1:\n            neighbors.append((i, j + 1))\n\n        min_path = None\n        for ni, nj in neighbors:\n            if (ni, nj) not in path:\n                new_path = dfs(ni, nj, path + [(ni, nj)])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n\n        return min_path\n\n    min_path = None\n    for i in range(N):\n        for j in range(N):\n            path = dfs(i, j, [(i, j)])\n            if path is not None:\n                if min_path is None or path < min_path:\n                    min_path = path\n\n    return [grid[i][j] for i, j in min_path]\n', 's-59': '\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n\n        result = None\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in path:\n                new_path = path + [(nx, ny)]\n                if result is None or grid[nx][ny] < result[-1]:\n                    result = dfs(nx, ny, new_path)\n\n        return result\n\n    result = None\n    for i in range(n):\n        for j in range(n):\n            path = [(i, j)]\n            sub_result = dfs(i, j, path)\n            if sub_result is not None and (result is None or sub_result < result):\n                result = sub_result\n\n    return [grid[x][y] for x, y in result]\n', 's-60': '\n    n = len(grid)\n    visited = set()\n    q = [(grid[i][j], [(i, j)]) for i in range(n) for j in range(n)]\n\n    while q:\n        path, (i, j) = q.pop(0)\n        if len(path) == k:\n            return path\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                q.append((path + [grid[ni][nj]], (ni, nj)))\n    return None\n', 's-61': '\n    n = len(grid)\n    visited = set()\n    heap = [(grid[i][0], (i, 0)) for i in range(n)]\n    heapq.heapify(heap)\n    \n    while heap:\n        path_sum, (x, y) = heapq.heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if len(visited) == k:\n            return list(path_sum)\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                continue\n            heapq.heappush(heap, (path_sum + grid[nx][ny], (nx, ny)))\n', 's-62': "\n    n = len(grid)\n    visited = set()\n\n    def dfs(path):\n        if len(path) == k:\n            return path\n\n        # Get the current cell's coordinates\n        r, c = path[-1]\n\n        # Check all the neighboring cells\n        neighbors = []\n        if r > 0:\n            neighbors.append((r-1, c))\n        if r < n-1:\n            neighbors.append((r+1, c))\n        if c > 0:\n            neighbors.append((r, c-1))\n        if c < n-1:\n            neighbors.append((r, c+1))\n\n        # Sort the neighbors by their value on the grid\n        sorted_neighbors = sorted(neighbors, key=lambda x: grid[x[0]][x[1]])\n\n        for neighbor in sorted_neighbors:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                result = dfs(path + [neighbor])\n                if result:\n                    return result\n                visited.remove(neighbor)\n\n    # Find the starting cell with the minimum value\n    start = min(((i, j) for i in range(n) for j in range(n)), key=lambda x: grid[x[0]][x[1]])\n\n    visited.add(start)\n    return dfs([start])\n", 's-63': '\n    n = len(grid)\n    visited = set()\n    heap = [(grid[i][0], [(i, 0)]) for i in range(n)]\n    heapq.heapify(heap)\n\n    while heap:\n        cost, path = heapq.heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n\n        i, j = path[-1]\n        if (i, j) in visited:\n            continue\n\n        visited.add((i, j))\n        for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                heapq.heappush(heap, (cost + grid[ni][nj], path + [(ni, nj)]))\n', 's-64': '\n    n = len(grid)\n    lst = []\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            lst.append(path)\n            return\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n\n    lst.sort()\n    return lst[0]\n', 's-65': '\n    n = len(grid)\n    visited = set()\n\n    def dfs(i, j, steps):\n        if steps == k:\n            return [grid[i][j]]\n        \n        visited.add((i, j))\n        candidates = []\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if ni < 0 or ni >= n or nj < 0 or nj >= n or (ni, nj) in visited:\n                continue\n            candidates.append(dfs(ni, nj, steps+1) + [grid[i][j]])\n        visited.remove((i, j))\n        return min(candidates)\n\n    min_path = []\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, 1)\n            if not min_path or path < min_path:\n                min_path = path\n    \n    return list(reversed(min_path))\n', 's-66': '\n    n = len(grid)\n    visited = set()\n    res = []\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            res.append(path)\n            return\n        visited.add((i, j))\n        for r, c in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n            if 0 <= r < n and 0 <= c < n and (r, c) not in visited:\n                dfs(r, c, path + [grid[r][c]])\n        visited.remove((i, j))\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n            \n    return min(res)\n', 's-67': '\n    n = len(grid)\n    if k >= n * n:\n        return sorted(grid[0][:1])\n\n    # Initialize the visited set with the start cell\n    visited = set()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                visited.add((i, j))\n\n    # Create a queue to hold possible paths\n    queue = [(grid[i][j], [(i, j)]) for i, j in visited]\n\n    # Sort the queue based on the lexicographical order\n    queue.sort(key=lambda x: x[1])\n\n    # Loop through the queue until a path of length k is found\n    while queue:\n        val, path = queue.pop(0)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n        i, j = path[-1]\n\n        # Check neighbors of the current cell\n        for ni, nj in [(i+1,j), (i-1,j), (i,j+1), (i,j-1)]:\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                new_path = path + [(ni, nj)]\n                new_val = grid[ni][nj]\n                new_item = (new_val, new_path)\n                visited.add((ni, nj))\n                queue.append(new_item)\n\n        # Sort the queue based on the lexicographical order\n        queue.sort(key=lambda x: x[1])\n\n    # Return empty list if no path of length k is found\n    return []\n', 's-68': '\n    N = len(grid)\n    nums = set(range(1, N*N+1))\n    def dfs(path):\n        if len(path) == k:\n            return path\n        for i, j in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            x, y = path[-1]\n            nx, ny = x+i, y+j\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in path:\n                if len(path) == k-1 and grid[nx][ny] not in nums:\n                    continue\n                if len(path) == k-1 and grid[nx][ny] in nums and grid[nx][ny] < path[-1][-1]:\n                    continue\n                res = dfs(path + [(nx, ny)])\n                if res:\n                    return res\n        return None\n    for i in range(N):\n        for j in range(N):\n            path = dfs([(i, j)])\n            if path:\n                return [grid[x][y] for x, y in path]\n', 's-69': '\n    n = len(grid)\n    visited = set()\n    queue = [(i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n\n    while queue:\n        x, y, path = queue.pop(0)\n        if len(path) == k:\n            return path\n\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, path + [grid[nx][ny]]))\n\n    return []\n', 's-70': '\n    n = len(grid)\n    visited = set()\n    directions = [(1,0), (0,1), (-1,0), (0,-1)]\n    ans = []\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            ans.append(path)\n            return\n        visited.add((x, y))\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                dfs(nx, ny, path + [grid[nx][ny]])\n        visited.remove((x, y))\n        \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n    \n    return sorted(ans)[0]\n', 's-71': '\n    n = len(grid)\n    start = [(grid[i][j], i, j) for i in range(n) for j in range(n)]\n    start.sort()\n\n    def dfs(cur, path):\n        if len(path) == k:\n            return path\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            nx, ny = cur[1] + dx, cur[2] + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in path:\n                np = dfs((grid[nx][ny], nx, ny), path + [(nx, ny)])\n                if np is not None:\n                    return np\n\n    for i in range(n * n):\n        path = dfs(start[i], [(start[i][1], start[i][2])])\n        if path is not None:\n            return [grid[p[0]][p[1]] for p in path]\n', 's-72': '\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[i][0], (i, 0)) for i in range(n)]\n    visited = set(heap)\n\n    for _ in range(k - 1):\n        val, (x, y) = heapq.heappop(heap)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if nx < 0 or ny < 0 or nx >= n or ny >= n or (nx, ny) in visited:\n                continue\n            heapq.heappush(heap, (grid[nx][ny], (nx, ny)))\n            visited.add((nx, ny))\n\n    return [heapq.heappop(heap)[0] for _ in range(k)]\n', 's-73': '\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # function to check if a cell is within the grid\n    def valid(i, j):\n        return 0 <= i < n and 0 <= j < n\n    # function to generate lexicographically sorted path starting from (i, j) of length k\n    def dfs(i, j, visited, path):\n        visited.add((i, j))\n        if len(path) == k:\n            return path\n        next_paths = []\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if valid(ni, nj) and (ni, nj) not in visited:\n                next_paths.append(dfs(ni, nj, visited, path + [grid[ni][nj]]))\n        visited.remove((i, j))\n        # sort the next paths lexicographically and return the smallest one\n        return min(next_paths)\n    # main function to generate minimum path\n    min_path = []\n    for i in range(n):\n        for j in range(n):\n            # generate path starting from (i, j)\n            path = dfs(i, j, set(), [grid[i][j]])\n            # if the generated path is the minimum so far, update the result\n            if not min_path or path < min_path:\n                min_path = path\n    return min_path\n', 's-74': '\n    N = len(grid)\n\n    def dfs(x, y, seen, path):\n        if len(path) == k:\n            return path\n        seen.add((x, y))\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in seen:\n                res = dfs(nx, ny, seen, path + [grid[nx][ny]])\n                if res:\n                    return res\n        seen.remove((x, y))\n\n    res = []\n    for i in range(N):\n        for j in range(N):\n            path = dfs(i, j, set(), [grid[i][j]])\n            if path and (not res or path < res):\n                res = path\n    return res\n', 's-75': '\n    n = len(grid)\n    visited = set()\n\n    def backtrack(curr, path):\n        if len(path) == k:\n            return path\n        visited.add(curr)\n        neighbors = [(curr[0] - 1, curr[1]), (curr[0] + 1, curr[1]), \n                     (curr[0], curr[1] - 1), (curr[0], curr[1] + 1)]\n        valid_neighbors = [(i, j) for i, j in neighbors if 0 <= i < n and 0 <= j < n and (i, j) not in visited]\n        valid_neighbors.sort(key=lambda x: grid[x[0]][x[1]])\n        for neighbor in valid_neighbors:\n            path.append(grid[neighbor[0]][neighbor[1]])\n            result = backtrack(neighbor, path)\n            if result:\n                return result\n            path.pop()\n        visited.remove(curr)\n\n    for i in range(n):\n        for j in range(n):\n            path = [grid[i][j]]\n            result = backtrack((i, j), path)\n            if result:\n                return result\n', 's-76': '\n    n = len(grid)\n    visited = set()\n    path = []\n\n    def backtrack(i, j, steps):\n        if steps == k:\n            return path.copy()\n\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        neighbors = [(ni, nj) for ni, nj in neighbors if 0 <= ni < n and 0 <= nj < n]\n        neighbors = sorted(neighbors, key=lambda x: grid[x[0]][x[1]])\n\n        for ni, nj in neighbors:\n            if (ni, nj) not in visited:\n                visited.add((ni, nj))\n                path.append(grid[ni][nj])\n                result = backtrack(ni, nj, steps+1)\n                if result:\n                    return result\n                visited.remove((ni, nj))\n                path.pop()\n\n        return None\n\n    for i in range(n):\n        for j in range(n):\n            visited.add((i, j))\n            path.append(grid[i][j])\n            result = backtrack(i, j, 1)\n            if result:\n                return result\n\n            visited.remove((i, j))\n            path.pop()\n', 's-77': '\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    n = len(grid)\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n\n        res = []\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in path:\n                res.append((grid[x][y], x, y))\n\n        res.sort()\n        for val, x, y in res:\n            path.add((x, y))\n            found = dfs(x, y, path)\n            if found:\n                return [grid[i][j]] + found\n            path.remove((x, y))\n\n        return None\n\n    ans = None\n    for i in range(n):\n        for j in range(n):\n            path = {(i, j)}\n            found = dfs(i, j, path)\n            if found:\n                if not ans or found < ans:\n                    ans = found\n\n    return ans\n', 's-78': '\n    n = len(grid)\n    visited = set()\n    directions = [(0,1), (1,0), (0,-1), (-1,0)]\n\n    def dfs(path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for i, j in path[-1]:\n            for di, dj in directions:\n                ni, nj = i+di, j+dj\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                    visited.add((ni, nj))\n                    new_path = dfs(path + [(ni, nj)])\n                    visited.remove((ni, nj))\n                    if new_path is not None and (min_path is None or new_path < min_path):\n                        min_path = new_path\n        return min_path\n\n    for i in range(n):\n        for j in range(n):\n            visited.add((i, j))\n            path = dfs([(i, j)])\n            visited.remove((i, j))\n            if path is not None:\n                return [grid[i][j] for i, j in path]\n', 's-79': '\n    n = len(grid)\n    visited = set()\n\n    def dfs(i, j, steps):\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return None\n        if (i, j) in visited:\n            return None\n        visited.add((i, j))\n\n        if steps == k:\n            return [grid[i][j]]\n\n        neighbors = []\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + di, j + dj\n            neighbors.append(dfs(ni, nj, steps + 1))\n        neighbors = [n for n in neighbors if n is not None]\n\n        if len(neighbors) == 0:\n            return None\n        else:\n            neighbors.sort()\n            return [grid[i][j]] + neighbors[0]\n\n    result = []\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, 1)\n            if path is not None:\n                if len(result) == 0 or path < result:\n                    result = path\n    return result\n', 's-80': '\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n\n        visited.add((i, j))\n\n        min_path = None\n\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            x, y = i + dx, j + dy\n\n            if (x, y) in visited or x < 0 or x >= n or y < 0 or y >= n:\n                continue\n\n            next_path = dfs(x, y, visited, path + [grid[x][y]])\n\n            if next_path is not None and (min_path is None or next_path < min_path):\n                min_path = next_path\n\n        visited.remove((i, j))\n\n        return min_path\n\n    n = len(grid)\n\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, set(), [grid[i][j]])\n\n            if path is not None:\n                return path\n', 's-81': '\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        res = None\n        for di, dj in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                visited[ni][nj] = True\n                res = min(res, dfs(ni, nj, path + [grid[ni][nj]]), key=lambda p: tuple(p)) if res else dfs(ni, nj, path + [grid[ni][nj]])\n                visited[ni][nj] = False\n        return res\n    \n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                return path\n            visited[i][j] = False\n    return None\n', 's-82': '\n    def dfs(x, y, cur_path, visited):\n        if len(cur_path) == k:\n            return cur_path\n        visited.add((x, y))\n        min_path = None\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                path = dfs(nx, ny, cur_path + [grid[nx][ny]], visited)\n                if path is not None and (min_path is None or path < min_path):\n                    min_path = path\n        visited.remove((x, y))\n        return min_path\n\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]], set())\n            if path is not None:\n                return path\n', 's-83': '\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        next_cells = []\n        for x, y in neighbors:\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (x, y) not in visited:\n                next_cells.append((grid[x][y], x, y))\n        next_cells.sort()\n        for value, x, y in next_cells:\n            visited.add((x, y))\n            result = dfs(x, y, visited, path + [value])\n            if result:\n                return result\n            visited.remove((x, y))\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited = set([(i, j)])\n            path = [grid[i][j]]\n            result = dfs(i, j, visited, path)\n            if result:\n                return result\n', 's-84': '\n    def dfs(i, j, visited, length, path):\n        if length == k:\n            return path\n        visited.add((i, j))\n        min_path = None\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                next_path = dfs(ni, nj, visited.copy(), length+1, path + [grid[ni][nj]])\n                if next_path is not None:\n                    if min_path is None or next_path < min_path:\n                        min_path = next_path\n        return min_path\n\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, set(), 1, [grid[i][j]])\n            if path is not None:\n                if min_path is None or path < min_path:\n                    min_path = path\n    return min_path\n', 's-85': '\n    # Initialize variables\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = [(grid[i][0], [(i, 0)]) for i in range(n)]\n    visited = set((i, 0) for i in range(n))\n\n    # Loop until we have popped k elements off the heap\n    for _ in range(k):\n        # Pop the smallest element off the heap\n        cur_val, cur_path = heapq.heappop(heap)\n\n        # If the current path has k elements, return it\n        if len(cur_path) == k:\n            return [grid[x][y] for x, y in cur_path]\n\n        # Explore neighbors of the current position\n        cur_x, cur_y = cur_path[-1]\n        for dx, dy in directions:\n            new_x, new_y = cur_x + dx, cur_y + dy\n            if 0 <= new_x < n and 0 <= new_y < n and (new_x, new_y) not in visited:\n                new_val = grid[new_x][new_y]\n                new_path = cur_path + [(new_x, new_y)]\n                heapq.heappush(heap, (new_val, new_path))\n                visited.add((new_x, new_y))\n', 's-86': '\n    n = len(grid)\n    lst = []\n\n    def dfs(cell, path):\n        if len(path) == k:\n            lst.append(path)\n            return\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            x, y = cell[0]+dx, cell[1]+dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in path:\n                dfs((x, y), path + [(x, y)])\n\n    for i in range(n):\n        for j in range(n):\n            dfs((i, j), [(i, j)])\n\n    min_lst = min(lst)\n    return [grid[cell[0]][cell[1]] for cell in min_lst]\n', 's-87': '\n    def dfs(x, y, visited, path):\n        if len(path) == k:\n            return path\n        visited.add((x, y))\n        res = []\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                new_path = dfs(nx, ny, visited.copy(), path + [grid[nx][ny]])\n                if new_path:\n                    res.append(new_path)\n        return min(res) if res else None\n\n    n = len(grid)\n    paths = []\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, set(), [grid[i][j]])\n            if path:\n                paths.append(path)\n    return min(paths)\n', 's-88': '\n    N = len(grid)\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = set()\n    heap = [(grid[i][0], (i, 0), [grid[i][0]]) for i in range(N)]\n    heapq.heapify(heap)\n\n    while heap:\n        _, (i, j), path = heapq.heappop(heap)\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        for di, dj in moves:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < N and (ni, nj) not in visited:\n                heapq.heappush(heap, (grid[ni][nj], (ni, nj), path + [grid[ni][nj]])))\n', 's-89': '\n    N = len(grid)\n    min_path = []\n\n    def dfs(path, curr_pos, visited):\n        nonlocal min_path\n        if len(path) == k:\n            if not min_path or path < min_path:\n                min_path = path\n            return\n        \n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            next_x, next_y = curr_pos[0] + dx, curr_pos[1] + dy\n            if 0 <= next_x < N and 0 <= next_y < N and (next_x, next_y) not in visited:\n                visited.add((next_x, next_y))\n                dfs(path + [grid[next_x][next_y]], (next_x, next_y), visited)\n                visited.remove((next_x, next_y))\n\n    for i in range(N):\n        for j in range(N):\n            visited = {(i, j)}\n            dfs([grid[i][j]], (i, j), visited)\n\n    return min_path\n', 's-90': '\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = set()\n    ans = []\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            ans.append(path)\n            return\n        visited.add((i, j))\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if (ni, nj) not in visited and 0 <= ni < rows and 0 <= nj < cols:\n                dfs(ni, nj, path + [grid[ni][nj]])\n        visited.remove((i, j))\n\n    for i in range(rows):\n        for j in range(cols):\n            dfs(i, j, [grid[i][j]])\n\n    ans.sort()\n    return ans[0]\n', 's-91': '\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                visited[ni][nj] = True\n                res = dfs(ni, nj, path + [grid[ni][nj]])\n                visited[ni][nj] = False\n                if res:\n                    return res\n                \n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            res = dfs(i, j, [grid[i][j]])\n            visited[i][j] = False\n            if res:\n                return res\n', 's-92': '\n    def dfs(x, y, path):\n        path.append(grid[x][y])\n        if len(path) == k:\n            return path\n        minPath = None\n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                res = dfs(nx, ny, path)\n                visited[nx][ny] = False\n                if res is not None and (minPath is None or res < minPath):\n                    minPath = res\n        path.pop()\n        return minPath\n\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            res = dfs(i, j, [])\n            if res is not None:\n                return res\n            visited[i][j] = False\n    return None\n', 's-93': '\n    n = len(grid)\n    visited = set()\n    heap = [(grid[i][0], (i, 0), []) for i in range(n)]\n    heapq.heapify(heap)\n    \n    while heap:\n        val, (i, j), path = heapq.heappop(heap)\n        path = path + [val]\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        for ni, nj in [(i+1,j), (i-1,j), (i,j+1), (i,j-1)]:\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                heapq.heappush(heap, (grid[ni][nj], (ni, nj), path))\n', 's-94': '\n    n = len(grid)\n    visited = set()\n\n    def dfs(i, j, curr_path):\n        if len(curr_path) == k:\n            return curr_path\n\n        visited.add((i, j))\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                new_path = dfs(x, y, curr_path + [grid[x][y]])\n                if new_path:\n                    res.append(new_path)\n\n        visited.remove((i, j))\n        if res:\n            return min(res)\n\n    ans = []\n    for i in range(n):\n        for j in range(n):\n            ans.append(dfs(i, j, [grid[i][j]]))\n\n    return min(ans)\n', 's-95': '\n    def dfs(x, y, visited, path):\n        if len(path) == k:\n            return path\n        visited.add((x, y))\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                res = dfs(nx, ny, visited, path + [grid[nx][ny]])\n                if res:\n                    return res\n        visited.remove((x, y))\n        return None\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, set(), [grid[i][j]])\n            if res:\n                return res\n', 's-96': '\n\nimport heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    if k == 1:\n        return [min(min(grid))]\n    visited = set()\n    heap = [(grid[i][j], [(i, j)]) for i in range(n) for j in range(n)]\n    while heap:\n        cost, path = heapq.heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n        i, j = path[-1]\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                visited.add((x, y))\n                new_path = path + [(x, y)]\n                new_cost = max(cost, grid[x][y])\n                heapq.heappush(heap, (new_cost, new_path))\n\n# Test cases\n', 's-97': '\n\nimport heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    heap = [(grid[i][j], [(i, j)]) for i in range(n) for j in range(n)]\n    heapq.heapify(heap)\n\n    while heap:\n        curr_val, curr_path = heapq.heappop(heap)\n\n        if len(curr_path) == k:\n            return [grid[i][j] for i, j in curr_path]\n\n        i, j = curr_path[-1]\n\n        for new_i, new_j in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= new_i < n and 0 <= new_j < n and (new_i, new_j) not in visited:\n                new_path = curr_path + [(new_i, new_j)]\n                heapq.heappush(heap, (grid[new_i][new_j], new_path))\n                visited.add((new_i, new_j))\n\n    return []  # Return an empty list if no path of length k is found\n\n', 's-98': '\n    def dfs(i, j, visited):\n        visited.add((i, j))\n        if len(visited) == k:\n            return [grid[i][j]]\n\n        values = []\n        for di, dj in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                values.append(dfs(ni, nj, visited.copy()) + [grid[i][j]])\n\n        if not values:\n            return None\n\n        return min(values)\n\n    n = len(grid)\n    paths = []\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, set())\n            if path:\n                paths.append(path)\n\n    return sorted(paths)[0]\n', 's-99': '\n    rows, cols = len(grid), len(grid[0])\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for ni, nj in ((i+1,j),(i,j+1),(i-1,j),(i,j-1)):\n            if 0 <= ni < rows and 0 <= nj < cols:\n                path.append(grid[ni][nj])\n                cur_path = dfs(ni, nj, path)\n                if cur_path is not None:\n                    if min_path is None or cur_path < min_path:\n                        min_path = list(cur_path)\n                path.pop()\n        return min_path\n\n    min_path = None\n    for i in range(rows):\n        for j in range(cols):\n            path = [grid[i][j]]\n            cur_path = dfs(i, j, path)\n            if cur_path is not None:\n                if min_path is None or cur_path < min_path:\n                    min_path = cur_path\n    return min_path\n'}}