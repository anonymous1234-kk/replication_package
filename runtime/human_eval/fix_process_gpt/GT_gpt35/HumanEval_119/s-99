task_id:HumanEval/119
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
```

----------------------Assistant Message----------------------
```python

def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''

    # Initialize an empty stack to store the opening parentheses
    stack = []

    # Iterate through each character of the first string in the list
    for char in lst[0]:
        # If the current character is an opening parenthesis, push it onto the stack
        if char == '(':
            stack.append(char)
        # If the current character is a closing parenthesis, check if the stack is empty
        # or if the top of the stack is not an opening parenthesis
        elif not stack or stack[-1] != '(':
            return 'No'
        # If the stack is not empty and the top of the stack is an opening parenthesis,
        # pop the opening parenthesis from the stack
        else:
            stack.pop()

    # Iterate through each character of the second string in the list
    for char in lst[1]:
        # If the current character is a closing parenthesis, push it onto the stack
        if char == ')':
            stack.append(char)
        # If the current character is an opening parenthesis, check if the stack is empty
        # or if the top of the stack is not a closing parenthesis
        elif not stack or stack[-1] != ')':
            return 'No'
        # If the stack is not empty and the top of the stack is a closing parenthesis,
        # pop the closing parenthesis from the stack
        else:
            stack.pop()

    # If the stack is empty, all parentheses are balanced, return 'Yes'
    # Otherwise, return 'No'
    return 'Yes' if not stack else 'No'

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-10<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert match_parens(['((((', '))))']) == Yes
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert match_parens(['(())', ')']) == No
assert match_parens(['((()))))', '))()(((()())(()))']) == No
assert match_parens(['(', '(', ')', ')', '(', ')', ')', ')']) == No
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python

def match_parens(lst):
    stack = []

    for char in lst[0]:
        if char == '(':
            stack.append(char)
        elif not stack or stack[-1] != '(':
            return 'No'
        else:
            stack.pop()

    for char in lst[1]:
        if char == ')':
            stack.append(char)
        elif not stack or stack[-1] != ')':
            return 'No'
        else:
            stack.pop()

    return 'Yes' if not stack else 'No'

```
