task_id:HumanEval/75
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
```

----------------------Assistant Message----------------------
```python

def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """

    # Check if the given number is less than 6. 
    # If it is, then it cannot be the multiplication of 3 prime numbers.
    if a < 6:
        return False
    
    # Check if the given number is divisible by 2 or 3, 
    # which means it cannot be the multiplication of 3 prime numbers.
    if a % 2 == 0 or a % 3 == 0:
        return False
    
    # Check if the given number is the multiplication of 3 prime numbers.
    # We will start checking for prime numbers from 5.
    i = 5
    while i * i <= a:
        if a % i == 0 or a % (i + 2) == 0:
            return False
        i += 6
    
    return True

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-6<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert is_multiply_prime(2 * 3 * 7) == True
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert is_multiply_prime(91) == False
assert is_multiply_prime(2 * 3 * 11 * 13) == False
assert is_multiply_prime(2 * 3 * 5 * 7) == False
assert is_multiply_prime(2 * 3 * 7 * 11) == False
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python

def is_multiply_prime(a):
    if a < 6:
        return False
    if a % 2 == 0 or a % 3 == 0:
        return False
    i = 5
    while i * i <= a:
        if a % i == 0 or a % (i + 2) == 0:
            return False
        i += 6
    return True

```
