task_id:HumanEval/153
----------------------System Message----------------------
You are a helpful AI assistant.
----------------------User Message----------------------
I want you to act like a Python programmer. I will give you the declaration of a function and comments about its property. You need to implement the body of the function in the code block. Do not modify any code I provide.

----------------------Assistant Message----------------------
OK, I'm ready to help.
----------------------User Message----------------------
Here is the question.
```python

def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
```

----------------------Assistant Message----------------------
```python

def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """

    strongest_extension = None
    max_strength = float('-inf')

    for extension in extensions:
        cap_count = sum(1 for c in extension if c.isupper())
        sm_count = sum(1 for c in extension if c.islower())
        strength = cap_count - sm_count
        
        if strength > max_strength or (strength == max_strength and extension < strongest_extension):
            max_strength = strength
            strongest_extension = extension
    
    return f"{class_name}.{strongest_extension}"

```

>>>>>>>>>>>>>>>>>>>>>>fix test id: t-49<<<<<<<<<<<<<<<<<<<<<<
----------------------User Message----------------------
The generated code is not correct on the following test case, please fix the code to pass it and return the complete fixed code.
```python
assert Strongest_Extension('class6',['sd', 'Th', 'p', 'X', 'y', 'O']) == class6.X
```
 Besides the above test case, the code should also pass the following test cases, which are already passed previously:
```python
assert Strongest_Extension('some_class',['adD', 'MulTiply', 'SuBtract', 'DivIDE']) == some_class.DivIDE
assert Strongest_Extension('my_class',['a', 'Be', 'CC']) == my_class.CC
assert Strongest_Extension('my_class',['AA', 'Be', 'CcC', 'fFf']) == my_class.AA
assert Strongest_Extension('Alphabet',['aA', 'BB', 'CC', 'cD', 'aaA']) == Alphabet.BB
assert Strongest_Extension('my_class',['AA', 'BC', 'cc', 'LL', 'Mo', 'Zi', 'Lc', 'Cb', 'Ti', 'Xy']) == my_class.AA
assert Strongest_Extension('my_class',['ab', 'Ab', 'AB']) == my_class.AB
assert Strongest_Extension('my_class',['aAa', 'Be', 'CC']) == my_class.CC
assert Strongest_Extension('my_class',['Aa', 'Bb', 'Cc']) == my_class.Aa
assert Strongest_Extension('test',['Aa', 'aBc']) == test.Aa
assert Strongest_Extension('my_class',['zZz', 'AaA', 'bBb', 'CcC', 'dDd', 'EeE']) == my_class.AaA
assert Strongest_Extension('my_class',['Ju', 'Be', 'CC', 'kkkkkkkkkkkkkkkkk']) == my_class.CC
assert Strongest_Extension('class_E',['A', 'bBc', 'CC']) == class_E.CC
assert Strongest_Extension('my_class',['AA', 'ab', 'CDE']) == my_class.CDE
assert Strongest_Extension('class8',['AA', 'Bb', 'CCC']) == class8.CCC
assert Strongest_Extension('my_class',['xyz', 'ABC', 'DEFGH']) == my_class.DEFGH
assert Strongest_Extension('class_G',['A', 'bbc', 'CC']) == class_G.CC
assert Strongest_Extension('my_class',['a', 'Be', 'CC']) == my_class.CC
assert Strongest_Extension('my_class',['Ju', 'Be', 'CC', 'Kk', 'Ll', 'Mm', 'Nn', 'Oo', 'Pp']) == my_class.CC
assert Strongest_Extension('geeks',['hello', 'world', 'python']) == geeks.hello
assert Strongest_Extension('my_class',['AA', 'Be', 'CC', 'AbCdEFGHIJKLMNOPQ']) == my_class.AbCdEFGHIJKLMNOPQ
```
.
 You only need to generate the fixed code, do not provide any assert statements or explanations.
----------------------Assistant Message----------------------
```python
def Strongest_Extension(class_name, extensions):
    strongest_extension = None
    max_strength = float('-inf')

    for extension in extensions:
        cap_count = sum(1 for c in extension if c.isupper())
        sm_count = sum(1 for c in extension if c.islower())
        strength = cap_count - sm_count
        
        if strength > max_strength or (strength == max_strength and extension < strongest_extension):
            max_strength = strength
            strongest_extension = extension
    
    return f"{class_name}.{strongest_extension}"
```
